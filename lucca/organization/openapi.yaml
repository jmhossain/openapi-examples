openapi: 3.0.3
info:
  title: Organization structure API
  description: |
    Welcome on the documentation for the Organization Structure API
  version: '1.0'
  contact:
    name: Lucca
    url: www.lucca.fr
    email: developers@lucca.fr
  x-konfig-ignore:
    object-with-no-properties: true
    potential-incorrect-type: true
servers:
  - description: Your production environment (France)
    url: https://example.ilucca.net
  - description: Your test environment (France)
    url: https://example.ilucca-test.net
tags:
  - name: Axis-sections
  - name: Departments
paths:
  /api/v3/axes:
    get:
      tags:
        - Axis-sections
      summary: List Axes
      operationId: Axissections_list
      description: List all Axes satisfying query filters.
      parameters:
        - description: Filter on axes unique identifiers.
          schema:
            type: array
            items:
              type: integer
          in: query
          name: id
          style: form
        - description: Filter on axes active status.
          schema:
            type: boolean
            default: true
          in: query
          name: isActive
        - $ref: '#/components/parameters/paging'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AxissectionsListResponse'
  /api/v3/axisSections:
    parameters: []
    get:
      tags:
        - Axis-sections
      summary: List AxisSections
      operationId: Axissections_list
      description: List all AxisSections satisfying query filters.
      parameters:
        - $ref: '#/components/parameters/paging'
        - description: Filter on the axis it belongs to.
          schema:
            type: array
            items:
              type: integer
          in: query
          name: axisId
          style: form
        - description: Filter on the owner managing it.
          schema:
            type: array
            items:
              type: integer
          in: query
          name: ownerId
          style: form
        - description: Filter on active status.
          schema:
            type: boolean
            default: true
          in: query
          name: active
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AxissectionsList200Response'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Axis-sections
      summary: Create a new AxisSection
      operationId: Axissections_createNewAxisSection
      description: Create a new AxisSection.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AxisSection'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AxissectionsCreateNewAxisSectionResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v3/axisSections/{axisSectionId}:
    parameters:
      - schema:
          type: integer
        name: axisSectionId
        in: path
        required: true
    get:
      tags:
        - Axis-sections
      summary: Get an AxisSection by id
      operationId: Axissections_getById
      description: Retrieve a single AxisSection by its unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AxissectionsGetByIdResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Axis-sections
      summary: Update an AxisSection by id
      operationId: Axissections_updateById
      description: Partial or complete update to an existing AxisSection.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AxisSection'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AxissectionsUpdateByIdResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Axis-sections
      summary: Delete an AxisSection by id
      operationId: Axissections_deleteById
      description: ''
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/v3/departments:
    get:
      tags:
        - Departments
      summary: List Departments
      operationId: Departments_getAll
      description: List all Departments satisfying query filters.
      parameters:
        - schema:
            type: integer
          in: query
          name: headId
        - schema:
            type: integer
          in: query
          name: parentId
        - $ref: '#/components/parameters/paging'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsGetAllResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          description: Internal Server Error
  /api/v3/departments/tree:
    get:
      tags:
        - Departments
      summary: List Departements as a tree
      operationId: Departments_listTree
      description: >-
        List all departments as a tree.

        Remark: first node is always empty and represents the starting point of
        the tree as multiple departments might be set to the highest level. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsListTreeResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          description: Internal Server Error
  /api/v3/departments/{departmentId}:
    parameters:
      - schema:
          type: integer
        name: departmentId
        in: path
        required: true
    get:
      tags:
        - Departments
      summary: Get Departement by id
      operationId: Departments_getById
      description: Retrieve a single Department by its unique identifier.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsGetByIdResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
components:
  parameters:
    paging:
      description: '{offset},{limit}. Defaults to 0,1000.'
      name: paging
      in: query
      required: true
      schema:
        type: string
        example: 100,0
  responses:
    Error:
      description: Generique error message response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DepartmentsGetAll400Response'
  schemas:
    AxisSection:
      title: The Axis Section resource
      description: >-
        ## Introduction


        In some application contexts, resources can be attached to analytical
        items. In most cases, the goal is to answer the needs of cost
        accounting. Axes are primarily used by Timmi Timesheet & Cleemy
        Expenses.


        Both in Timmi Timesheet and Cleemy Expense, users can enter their
        working hours or expenses spent on projects, tasks, work sites, cost
        centers, etc... These are the `AxisSection[]`, categorized in `Axis[]`.
        These axes can have parent-children relationships, and their
        axis-sections as well.


        ![axis-section-diagram.png](https://stoplight.io/api/v1/projects/cHJqOjEwNjgxNg/images/y74HUrks5dQ)


        ## Example


        Let's take an example. Say you expect your users to enter spent working
        hours on each project. Each project belongs to a single client, and is
        divided into tasks.


        In other words:


        - Clients
          - (1..n) Projects: each project belongs to one, and one only, client.
            - (n..n) Tasks: each task belongs to one or more project(s). 

        Then:

        - Each client is an `AxisSection` in the "Clients" `Axis`.

        - One client has zero or more projects, which are `AxisSection[]` in the
        "Projects" `Axis`. A project is child to one and only one client.

        - One project has zero or more tasks, which are `AxisSection[]` in the
        "Tasks" `Axis`. Each task axis-section is child to one or more
        project(s) axis-sections.


        The JSON representation of these axes in the API would be:


        ```json

        // GET /api/v3/axes HTTP/1.1

        {
          "data": {
            "items": [
              {
                "id": 1,
                "name": "Clients",
                "parentAxisId": null,
                "isNNRelation": false
              },
              {
                "id": 2,
                "name": "Projects",
                "parentAxisId": 1,
                "isNNRelation": false
              },
              {
                "id": 3,
                "name": "Tasks",
                "parentAxisId": 2,
                "isNNRelation": true
              }
            ]
          }
        }

        ```


        Regarding axis-sections:


        ```json

        // GET /api/v3/axisSections HTTP/1.1

        {
          "data": {
            "items": [
              {
                "id": 1,
                "name": "Acme Corporation",
                "axis": {
                  "id": 1,
                  "name": "Clients",
                  "parentAxisId": null,
                  "isNNRelation": false
                },
                "parentAxisSections": []
              },
              {
                "id": 2,
                "name": "My awesome project",
                "axis": {
                  "id": 2,
                  "name": "Projects",
                  "parentAxisId": 1,
                  "isNNRelation": false
                },
                "parentAxisSections": [
                  {
                    "id": 1,
                    "axisId": 1
                  }
                ]
              },
              {
                "id": 3,
                "name": "My #2 project",
                "axis": {
                  "id": 2,
                  "name": "Projects",
                  "parentAxisId": 1,
                  "isNNRelation": false
                },
                "parentAxisSections": [
                  {
                    "id": 1,
                    "axisId": 1
                  }
                ]
              },
              {
                "id": 4,
                "name": "User tests",
                "axis": {
                  "id": 3,
                  "name": "Tasks",
                  "parentAxisId": 2,
                  "isNNRelation": true
                },
                "parentAxisSections": [
                  {
                    "id": 2,
                    "axisId": 2
                  },
                  {
                    "id": 3,
                    "axisId": 2
                  }
                ]
              }
            ]
          }
        }

        ```

        ## Fields
      type: object
      allOf:
        - $ref: '#/components/schemas/AxisSectionTreeless'
        - properties:
            parentAxisSections:
              type: array
              items:
                $ref: '#/components/schemas/AxisSectionTreeless'
            childrenAxisSections:
              type: array
              items:
                $ref: '#/components/schemas/AxisSectionTreeless'
      x-tags:
        - Axis-sections
    Axis:
      title: The Axis resource
      description: >-
        Read more about axes in the [definition for the axisSection
        resource](reference/Organization-v3.yaml/components/schemas/AxisSection).
      x-tags:
        - Axis-sections
      allOf:
        - $ref: '#/components/schemas/AxisTreeless'
        - type: object
          properties:
            parentAxis:
              $ref: '#/components/schemas/AxisTreeless'
            childrenAxes:
              type: array
              items:
                $ref: '#/components/schemas/AxisTreeless'
              readOnly: true
    Department:
      title: The Department resource
      description: >-
        Departments, to which users must be attached, are used by the different
        Lucca solutions for different purposes:


        * Define access scopes: for example to restrict the visibility of
        absences in the Timmi Absences schedule.

        * Filtering data in a report: our different reports generally allow to
        filter data according to the legal entity, the SSC, but also the
        department of the user.

        * Build the organization chart in Poplee Core HR.

        The departments are represented as a hierarchical tree with a
        parent/child relationship.


        *NB:* You can have up to 9 levels of departments, and up to 99
        departments under a single parent department. However, limiting the
        number of levels to 7 is recommended.
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        code:
          type: string
          maxLength: 255
        hierarchy:
          description: Position of the departement in the hierarchical tree
          type: string
        parentId:
          description: Position of the parent department in the hierarchical tree
          type: string
          pattern: \/[0-9]\/
        isActive:
          type: boolean
        position:
          description: Department's general position in the hierarchy
          type: integer
          minimum: 10000000000000000000
          maximum: 100000000000000000000
        level:
          description: level of the Department. Deduce from Position.
          type: integer
        sortOrder:
          description: >-
            Order of the current Department among the children of the Parent
            Department
          type: integer
          minimum: 1
        headID:
          description: ID of the User who is the head of the department
          type: integer
        head:
          $ref: '#/components/schemas/User'
        users:
          description: Users of the department, including inactive users.
          type: array
          items:
            $ref: '#/components/schemas/User'
        currentUsers:
          description: Only active users of the department
          type: array
          items:
            $ref: '#/components/schemas/User'
        currentUsersCount:
          description: Number of active users in the department
          type: integer
          minimum: 0
          readOnly: true
      required:
        - name
        - code
      x-tags:
        - Departments
      example:
        id: 2
        name: Administration
        code: Administration
        hierarchy: /1.0/
        parentId: /
        position: 10000000000000000000
        sortOrder: 1
        level: 1
        isActive: true
        headID: null
        head: null
        users:
          - id: 11
            name: Daniel Hernandez
            url: https://sandbox.ilucca-demo.net/api/v3/users/11
          - id: 36
            name: henri paul
            url: https://sandbox.ilucca-demo.net/api/v3/users/36
        currentUsers:
          - id: 11
            name: Daniel Hernandez
            url: https://sandbox.ilucca-demo.net/api/v3/users/11
          - id: 36
            name: henri paul
            url: https://sandbox.ilucca-demo.net/api/v3/users/36
        url: https://sandbox.ilucca-demo.net/api/v3/departments/2
      x-examples:
        - id: 2
          name: Administration
          code: Administration
          hierarchy: /1.0/
          parentId: /
          position: 10000000000000000000
          sortOrder: 1
          level: 1
          isActive: true
          headID: null
          head: null
          users:
            - id: 11
              name: Daniel Hernandez
              url: https://sandbox.ilucca-demo.net/api/v3/users/11
            - id: 36
              name: henri paul
              url: https://sandbox.ilucca-demo.net/api/v3/users/36
          currentUsers:
            - id: 11
              name: Daniel Hernandez
              url: https://sandbox.ilucca-demo.net/api/v3/users/11
            - id: 36
              name: henri paul
              url: https://sandbox.ilucca-demo.net/api/v3/users/36
          url: https://sandbox.ilucca-demo.net/api/v3/departments/2
    AxisSectionTreeless:
      title: AxisSectionTreeless
      x-stoplight:
        id: kgwih8x8ajea8
      type: object
      properties:
        description:
          type:
            - string
            - 'null'
        id:
          type: integer
          minimum: 1
        name:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        code:
          type: string
        multilingualName:
          type: string
        ownerId:
          type:
            - integer
            - 'null'
        startOn:
          type:
            - string
            - 'null'
          format: date-time
          readOnly: true
        endOn:
          type:
            - string
            - 'null'
          format: date-time
        active:
          type: boolean
          default: true
        axisId:
          type: integer
      required:
        - code
        - multilingualName
        - axisId
    AxisTreeless:
      title: AxisTreeless
      x-stoplight:
        id: ptjr91y412040
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 0
          readOnly: true
        name:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        multilingualName:
          type: string
        position:
          type: integer
          minimum: 0
          default: 0
          format: int32
        parentAxisId:
          type:
            - integer
            - 'null'
          format: int32
          default: null
          minimum: 0
        isActive:
          type: boolean
          default: true
        isReadOnly:
          type: boolean
          default: false
          readOnly: true
        isNNRelation:
          type: boolean
          default: false
        level:
          type: integer
          format: int32
          default: 0
          readOnly: true
      required:
        - multilingualName
    DepartmentTreeNode:
      title: DepartmentTreeNode
      x-stoplight:
        id: trn3naznwv1de
      type: object
      properties:
        node:
          type: object
          properties:
            id:
              description: Department id
              type: integer
            name:
              description: Department name
              type: string
              maxLength: 255
              minLength: 1
            url:
              description: Department URL
              type: string
              format: uri
        children:
          description: List of all children departments.
          type: array
          items:
            $ref: '#/components/schemas/DepartmentTreeNode'
    User:
      title: User
      x-stoplight:
        id: 237yfq2tyul16
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
          format: uri
    AxissectionsListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Axis'
    AxissectionsList200Response:
      type: object
      properties:
        data:
          type: object
          properties:
            items:
              $ref: '#/components/schemas/AxisSection'
    AxissectionsCreateNewAxisSectionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AxisSection'
    AxissectionsGetByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AxisSection'
    AxissectionsUpdateByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AxisSection'
    DepartmentsGetAllResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Department'
    DepartmentsGetAll400Response:
      type: object
      properties:
        Status:
          type: integer
        Message:
          type: string
      x-examples:
        example-1:
          Status: 404
          Message: Resource Department with ID 13651 not found
    DepartmentsListTreeResponse:
      type: object
      x-examples:
        example-1:
          node: null
          children:
            - node:
                id: 0
                name: string
                url: string
              children:
                - null
      properties:
        data:
          type: object
          properties:
            node:
              description: Root department. Always null.
              type: 'null'
            children:
              description: 'Max depth: 9 levels'
              type:
                - array
                - 'null'
              items:
                $ref: '#/components/schemas/DepartmentTreeNode'
    DepartmentsGetByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Department'
  securitySchemes:
    Authorization:
      description: Header value must be equal to `lucca application={apiKey}`
      name: Authorization
      type: apiKey
      in: header
security:
  - Authorization: []
