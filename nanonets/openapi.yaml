openapi: 3.0.0
info:
  title: NanoNets
  description: >
    Welcome to the NanoNets API! You can use our API to build custom deep
    learning models.<br/>

    We have language bindings in Shell, Ruby, Golang, Java, C# and Python. You
    can view code examples in the dark area to the right, and you can switch the
    programming language for the examples with the tabs in the top right. <br/>
    In the documentation, you will find ready to fire code samples in these
    languages as well as detailed API specs for different
    endpoints.<br/><br/><br/>


    ### <span style="vertical-align: middle;">Want to quickly test our APIs?
    &nbsp;</span> <a style="vertical-align: middle; display: inline-flex;"
    href="https://elements.getpostman.com/redirect?entityId=4900737-80d490dc-a342-43be-8160-c9b5bab3c629&entityType=collection"
    target="_blank"><img src="https://run.pstmn.io/button.svg" alt="Run in
    Postman" /></a><br/><br/>

    Helpful links to get you started:<br/><br/>

    **Postman collection variables** - <a
    href="https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables"
    target="_blank">https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables</a><br/><br/>

    **To get your API key** <a href="https://app.nanonets.com/#keys"
    target="_blank">follow this link.</a><br/><br/>


    # Model Object

    A model Object has 3 main attributes<br/>

    ### model_id

    <b>Definition:</b> Unique ID for the model <br/><br/>

    ### model_type

    <b>Definition:</b> Type of model. Possible values are: <br/>

    <table>
        <tr>
            <td>classification</td>
            <td>Image classification model</td>
        </tr>
        <tr>
            <td>ocr</td>
            <td>OCR model</td>
        </tr>
    </table> <br/>


    ### state

    <b>Definition:</b> Current state of model. Possible values are:<br/>

    <table>
        <tr>
            <td>-1</td>
            <td>Error in model training</td>
        </tr>
        <tr>
            <td>0</td>
            <td>Model created. No training data uploaded yet</td>
        </tr>
        <tr>
            <td>1</td>
            <td>Training data uploaded. Need to annotate data</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Training data annotated. Need to start training</td>
        </tr>
        <tr>
            <td>3</td>
            <td>Model in training queue</td>
        </tr>
        <tr>
            <td>4</td>
            <td>Model currently training</td>
        </tr>
        <tr>
            <td>5</td>
            <td>Model hosted. Can be used for prediction</td>
        </tr>
        <tr>
            <td>6</td>
            <td>Model is retraining with new data. Can be used for prediction</td>
        </tr>
    </table>
  version: 2.0.0
  contact:
    email: support@nanonets.com
    name: NanoNets
    url: https://nanonets.com
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
  x-logo:
    url: https://nanonets.com/logo2.png
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - url: https://app.nanonets.com/api/v2
tags:
  - name: OCR Predict
  - description: >-
      You can create new image classification model
      [here](https://app.nanonets.com/#/ic/create)
    name: Image Classification Model
  - name: Image Classification Model Predict
  - name: Image Classification Model Upload
  - name: OCR Model
  - name: OCR Upload
  - name: Image Classification Model Train
  - name: Get Full Text
  - name: OCR Train
paths:
  /ImageCategorization/Model:
    post:
      tags:
        - Image Classification Model
      summary: Create New Model
      operationId: ImageClassificationModel_createNewModel
      security:
        - ApiKey: []
      description: >-
        You can create a new model using this endpoint. A successful API call
        will return the json structure of the newly created model. You can then
        use the model's id to upload images for each category and then retrain
        the model.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/ImageClassificationModelCreateNewModelRequest
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: classification
                    state: 0
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelCreateNewModelResponse
        '400':
          description: >-
            Zero or One category in request. Add two or more categories in
            parameters
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            var querystring = require('querystring')
            const form_data = {'categories' : ['category1', 'category2']}
            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/Model/',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }
            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url = 'https://app.nanonets.com/api/v2/ImageCategorization/Model/'


            headers = {
                'accept': 'application/x-www-form-urlencoded'
            }


            data = {'categories' : ['category1', 'category2']}


            response = requests.request("POST", url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
             --url 'https://app.nanonets.com/api/v2/ImageCategorization/Model/' \
             -u 'REPLACE_API_KEY' \
             -F 'categories=category1' \
             -F 'categories=category2'
        - lang: Golang
          source: |
            package main


            import (
                "bytes"
                "fmt"
                "io/ioutil"
                "mime/multipart"
                "net/http"
            )


            func main() {
                url := "https://app.nanonets.com/api/v2/ImageCategorization/Model/"


                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)


                writer.WriteField("categories", "category1")
                writer.WriteField("categories", "category2")


                contentType := writer.FormDataContentType()
                err := writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req, _ := http.NewRequest("POST", url, body)
                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")


                res, err := http.DefaultClient.Do(req)
                if err != nil {
                    fmt.Println(err)
                    return
                }
                defer res.Body.Close()


                output, _ := ioutil.ReadAll(res.Body)
                fmt.Println(res)
                fmt.Println(string(output))
            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('categories', 'category1');

            data.append('categories', 'category2');



            var xhr = new XMLHttpRequest();

            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });



            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/Model/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));

            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'

            require 'net/http/post/multipart'

            require 'json'

            require 'active_support/time'


            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/Model/')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/x-www-form-urlencoded'

            request.basic_auth 'REPLACE_API_KEY', ''


            request.set_form_data({'categories' => ['category1', 'category2']})

            response = http.request(request)

            # puts response.read_body

            apiModel = JSON.parse(response.read_body)

            modelId = apiModel['model_id']

            puts("New model created. Model id is #{modelId}")
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/Model/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "application/x-www-form-urlencoded");

            request.AddParameter("categories", "category1");

            request.AddParameter("categories", "category2");

            IRestResponse response = client.Execute(request);
        - lang: java
          source: |
            OkHttpClient client = new OkHttpClient();

            RequestBody formBody = new FormBody.Builder()
                .add("categories", "category1")
                .add("categories", "category2").build();

            Request request = new Request.Builder()
                .url("https://app.nanonets.com/api/v2/ImageCategorization/Model/")
                .post(formBody)
                .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
                .build();

            Response response = client.newCall(request).execute();            
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: categories={{category1}}
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/Model/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Create New Model
          x-testShouldPass: true
  /Inferences/Model/{model_id}/ImageLevelInferences/{id}:
    get:
      tags:
        - OCR Predict
      summary: Get Prediction File By Page ID
      operationId: OcrPredict_predictionFileByPageId
      security:
        - ApiKey: []
      description: 'This endpoint retrieves the results of a particular file by page id  '
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            The ID of the page that was received from the async prediction
            endpoint
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    result:
                      - input: string
                        message: Success
                        prediction:
                          - id: uuid
                            label: category1
                            ocr_text: string
                            score: 0.9
                            status: correctly_predicted
                            type: field
                            xmax: 100
                            xmin: 0
                            ymax: 100
                            ymin: 0
                          - cells:
                              - col: 1
                                col_span: 1
                                failed_validation: string
                                id: uuidX
                                label: col 1
                                row: 1
                                row_label: optional
                                row_span: 1
                                score: 99.99
                                status: string
                                text: ocr text 1
                                verification_status: correctly_predicted
                                xmax: 258
                                xmin: 159
                                ymax: 1357
                                ymin: 1258
                              - col: 2
                                col_span: 1
                                failed_validation: string
                                id: uuidX
                                label: col 2
                                row: 1
                                row_label: optional
                                row_span: 1
                                score: 99.99
                                status: string
                                text: ocr text 2
                                verification_status: correctly_predicted
                                xmax: 380
                                xmin: 258
                                ymax: 1357
                                ymin: 1258
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 2
                                row_span: 1
                                score: 99.99
                                text: ocr text 3
                                xmax: 258
                                xmin: 159
                                ymax: 1439
                                ymin: 1357
                              - col: 2
                                col_span: 1
                                failed_validation: string
                                id: uuidX
                                label: col 2
                                row: 2
                                row_label: optional
                                row_span: 1
                                score: 99.99902
                                status: string
                                text: ocr text 4
                                verification_status: correctly_predicted
                                xmax: 380
                                xmin: 258
                                ymax: 1439
                                ymin: 1357
                            id: uuidX
                            label: ''
                            ocr_text: table 1
                            score: 99.99
                            status: correctly_predicted
                            type: table
                            xmax: 380
                            xmin: 159
                            ymax: 1439
                            ymin: 1258
              schema:
                $ref: '#/components/schemas/OcrPredictPredictionFileByPageIdResponse'
        '404':
          description: >-
            Model does not exists. Check if you have entered correct model id
            with valid API key
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.get(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url =
            'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}'


            response = requests.request('GET', url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}"

                req, _ := http.NewRequest("GET", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}")

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Get.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}");

            var request = new RestRequest(Method.GET);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}")
              .get()
              .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /Inferences/Model/{model_id}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}:
    get:
      tags:
        - OCR Predict
      summary: Get All Prediction Files
      operationId: OcrPredict_allPredictionFiles
      security:
        - ApiKey: []
      description: >-
        This endpoint retrieves the files that have been processed by the
        prediction endpoints 
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            The number of days since 1st Jan 1970 GMT which represents the start
            of the period
          in: query
          name: start_day_interval
          required: true
          schema:
            type: integer
        - description: >-
            The number of days since 1st Jan 1970 GMT which represents the end
            of the period
          in: query
          name: current_batch_day
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Images Object
          content:
            application/json:
              examples:
                response:
                  value:
                    moderated_images:
                      - day_since_epoch: 18564
                        file_url: >-
                          uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                        hour_of_day: 15
                        id: 00000000-0000-0000-0000-000000000000
                        is_moderated: true
                        model_id: category1
                        predicted_boxes:
                          - label: invoice_id
                            ocr_text: '877541'
                            xmax: 984
                            xmin: 616
                            ymax: 357
                            ymin: 321
                        url: >-
                          uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000001.jpeg
                    moderated_images_count: 55
                    unmoderated_images:
                      - day_since_epoch: 18565
                        file_url: >-
                          uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                        hour_of_day: 23
                        id: 00000000-0000-0000-0000-000000000000X
                        is_moderated: false
                        model_id: 00000000-0000-0000-0000-000000000000
                        predicted_boxes:
                          - label: seller_name
                            ocr_text: Apple
                            xmax: 984
                            xmin: 616
                            ymax: 357
                            ymin: 321
                        url: >-
                          uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000002.jpeg
                    unmoderated_images_count: 156
              schema:
                $ref: '#/components/schemas/OcrPredictAllPredictionFilesResponse'
        '404':
          description: >-
            Model does not exists. Check if you have entered correct model id
            with valid API key
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/Inferences/Model/' + 'REPLACE_MODEL_ID' + '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.get(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url = 'https://app.nanonets.com/api/v2/Inferences/Model/' +
            'REPLACE_MODEL_ID' +
            '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}'


            response = requests.request('GET', url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}"

                req, _ := http.NewRequest("GET", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}")

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Get.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}");

            var request = new RestRequest(Method.GET);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}")
              .get()
              .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /Inferences/Model/{model_id}/InferenceRequestFiles/GetPredictions/{request_file_id}:
    get:
      tags:
        - OCR Predict
      summary: Get Prediction File By File ID
      operationId: OcrPredict_getFilePredictionByFileId
      security:
        - ApiKey: []
      description: 'This endpoint retrieves the results of a particular file by file id  '
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            The ID of the file that was received from the async prediction
            endpoint
          in: path
          name: request_file_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    moderated_images:
                      - day_since_epoch: 0
                        file_url: >-
                          uploadedfiles/<id>/PredictionImages/<original_image_name><timestamp_based_string>
                        hour_of_day: 0
                        id: uuidX
                        is_moderated: true
                        model_id: <model_id>
                        moderated_boxes:
                          - null
                        original_file_name: <filename>
                        page: 0
                        predicted_boxes:
                          - id: uuidX
                            label: category1
                            ocr_text: string
                            score: 0.9
                            status: correctly_predicted
                            type: field|table
                            xmax: 100
                            xmin: 0
                            ymax: 100
                            ymin: 0
                          - cells:
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 1
                                xmax: 258
                                xmin: 159
                                ymax: 1357
                                ymin: 1258
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 2
                                xmax: 380
                                xmin: 258
                                ymax: 1357
                                ymin: 1258
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 2
                                row_span: 1
                                score: 99.99
                                text: ocr text 3
                                xmax: 258
                                xmin: 159
                                ymax: 1439
                                ymin: 1357
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 2
                                row_span: 1
                                score: 99.99902
                                text: ocr text 4
                                xmax: 380
                                xmin: 258
                                ymax: 1439
                                ymin: 1357
                            label: ''
                            ocr_text: table 1
                            score: 99.99
                            type: table
                            xmax: 380
                            xmin: 159
                            ymax: 1439
                            ymin: 1258
                        request_file_id: uuid
                        request_metadata: metadata sent during prediction
                        status: Success
                        updated_at: timeuuid
                        url: uploadedfiles/<id>/PredictionImages/<image_name>
                        verified_at: timeuuid
                        verified_by: <person_name>
                    moderated_images_count: 0
                    signed_urls:
                      - null
                    unmoderated_images:
                      - null
                    unmoderated_images_count: 1
              schema:
                $ref: >-
                  #/components/schemas/OcrPredictGetFilePredictionByFileIdResponse
        '404':
          description: >-
            Model does not exists. Check if you have entered correct model id
            with valid API key
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.get(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url =
            'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}'


            response = requests.request('GET', url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}"

                req, _ := http.NewRequest("GET", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}")

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Get.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}");

            var request = new RestRequest(Method.GET);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/InferenceRequestFiles/GetPredictions/{{request_file_id}}")
              .get()
              .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/FullText:
    post:
      tags:
        - Get Full Text
      summary: Get Full Text
      operationId: GetFullText_fileContent
      security:
        - ApiKey: []
      description: >-
        Use this API to recieve the word and full text information in a file.
        More info on https://nanonets.com
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GetFullTextFileContentRequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    result:
                      - filename: MY_FILE_NAME_1.pdf
                        page_data:
                          - page: 0
                            raw_text: this contains all the text in the page
                            words:
                              - text: text of word 1
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                              - text: text of word 2
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                              - text: text of word 3
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                          - page: 1
                            raw_text: this contains all the text in the page
                            words:
                              - text: text of word 1
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                              - text: text of word 2
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                          - page: 2
                            raw_text: this contains all the text in the page
                            words:
                              - text: text of word 3
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                      - filename: MY_FILE_NAME_2.jpg
                        page_data:
                          - page: 0
                            raw_text: this contains all the text in the page
                            words:
                              - text: text of word 1
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
                              - text: text of word 2
                                xmax: 380
                                xmin: 159
                                ymax: 1439
                                ymin: 1258
              schema:
                $ref: '#/components/schemas/GetFullTextFileContentResponse'
        '400':
          description: >-
            File missing. Check if you have included a file in the request


            OR


            Incorrect image. Check if file you included is a valid PNG or JPEG
            or PDF
      x-code-samples:
        - lang: Nodejs
          source: |
            var axios = require('axios');
            var FormData = require('form-data');
            var fs = require('fs');
            var data = new FormData();
            data.apend('urls','FILE_URL')
            data.append('file', fs.createReadStream('FILE_PATH'));
            var config = {
              method: 'post',
              url: 'https://app.nanonets.com/api/v2/OCR/FullText',
              headers: { 
                'Authorization': 'Basic ' + Buffer.from("MY_API_KEY" + ":").toString('base64'), 
                ...data.getHeaders()
              },
              data : data
            };
            axios(config) .then(function (response) {
              console.log(JSON.stringify(response.data));
            }) .catch(function (error) {
              console.log(error);
            });
        - lang: Python
          source: >
            import requests

            import base64


            url = "https://app.nanonets.com/api/v2/OCR/FullText"


            payload={'urls': ['MY_IMAGE_URL']}

            files=[
              ('file',('FILE_NAME',open('FILE_PATH','rb'),'application/pdf')))
            ]

            headers = {}


            response = requests.request("POST", url, headers=headers,
            data=payload, files=files,
            auth=requests.auth.HTTPBasicAuth('REPLACE_YOUR_API_KEY', ''))


            print(response.text)
        - lang: Shell
          source: >
            curl --location --request POST
            'https://app.nanonets.com/api/v2/OCR/FullText' \

            --u 'REPLACE_API_KEY:' \

            --form 'file=@"FILE_PATH"' 
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/FullText");

            client.Timeout = -1;

            var request = new RestRequest(Method.POST);

            request.AddHeader("Authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_YOUR_API_KEY:")));

            request.AddFile("file", "FILE_PATH");

            IRestResponse response = client.Execute(request);

            Console.WriteLine(response.Content); 
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}:
    get:
      tags:
        - OCR Model
      summary: Get Model by Id
      operationId: OcrModel_getModelById
      security:
        - ApiKey: []
      description: This endpoint retrieves a specific model's details given it's id.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: ocr
                    state: 0
              schema:
                $ref: '#/components/schemas/OcrModelGetModelByIdResponse'
        '404':
          description: >-
            Model does not exists. Check if you have entered correct model id
            with valid API key
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/' + 'REPLACE_MODEL_ID',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.get(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url = 'https://app.nanonets.com/api/v2/OCR/Model/' + {{model_id}}


            response = requests.request('GET', url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/" + {{model_id}}

                req, _ := http.NewRequest("GET", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET", "https://app.nanonets.com/api/v2/OCR/Model/" +
            {{model_id}});

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url = URI('https://app.nanonets.com/api/v2/OCR/Model/' +
            {{model_id}})

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Get.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/" +
            {{model_id}});

            var request = new RestRequest(Method.GET);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/OCR/Model/" + {{model_id}})
              .get()
              .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}/LabelFile/?async=true:
    post:
      tags:
        - OCR Predict
      summary: Async Prediction for image file
      operationId: OcrPredict_imageFileAsyncPrediction
      security:
        - ApiKey: []
      description: >-
        Use the model to predict which one of the categories an image (given an
        image file) belongs to.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            This parameter specifies whether you'd like to upload the file for
            processing and then query the results with a unique id at a later
            point in time
          in: query
          name: async
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OcrPredictImageFileAsyncPredictionRequest'
        required: true
      responses:
        '200':
          description: >-
            message can contain 3 status messages

            1. success - file has been successfully processed

            2. pending - file is in the queue and will be processed

            3. failure - There was an issue while processing the file. It has
            been retrried 3 times. It is recommended to reupload the file and if
            the issue persists, please contact support 
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    result:
                      - message: Success
                        result:
                          - file_url: >-
                              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                            filepath: >-
                              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                            id: 00000000-0000-0000-0000-000000000000X
                            input: filename.jpg
                            message: Success
                            page: 55
                            prediction: []
                            request_file_id: 00000000-0000-0000-0000-000000000000
                            request_metadata: metadata sent during prediction
              schema:
                $ref: >-
                  #/components/schemas/OcrPredictImageFileAsyncPredictionResponse
        '400':
          description: |-
            File missing. Check if you have included a file in the request

            OR

            Incorrect image. Check if file you included is a valid PNG or JPEG
        '402':
          description: >-
            Exhausted Free API Calls. You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            var fs = require('fs')
            const form_data = {'modelId' : 'REPLACE_MODEL_ID', 
                                'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg'),
                                // for base64 of file instead of file
                                //'base64_data' : fs.readFileSync("REPLACE_IMAGE_PATH.jpg").toString('base64')
                              }

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/?async=true',
                formData: form_data,
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/?async=true'


            data = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb')}


            response = requests.post(url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)


            # for base64 of file instead of file

            # with open('REPLACE_IMAGE_PATH.jpg', 'rb') as file:

            #   encoded_file = base64.b64encode(file.read())

            # data = {'base64_data': encoded_file}

            # response = requests.post(url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true' \
                --header 'accept: multipart/form-data' \
                -u 'REPLACE_API_KEY' \
                -F 'file=@REPLACE_IMAGE_PATH.jpg'
                # -d 'base64_data=base64OfFile' # for base64 of file instead of file
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io"
                "io/ioutil"
                "mime/multipart"
                "net/http"
                // "net/url"
                "os"
                "path/filepath"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true"

                file, err := os.Open("REPLACE_IMAGE_PATH.jpg")
                if err != nil {
                    fmt.Println(err)
                    return
                }

                defer file.Close()

                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)

                part, err := writer.CreateFormFile("file", filepath.Base("REPLACE_IMAGE_PATH.jpg"))
                if err != nil {
                    fmt.Println(err)
                    return
                }
                _, err = io.Copy(part, file)

                contentType := writer.FormDataContentType()

                err = writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req, _ := http.NewRequest("POST", url, body)

                // for base64 of file instead of file
                // data := url.Values{}
                // data.Add("base64_data", base64OfFile)
                // req, _ := http.NewRequest("POST", url, bytes.NewBufferString(data.Encode()))

                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                respBody, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(respBody))

            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('file', fileBLob); // This is file object

            //data.append('base64_data', base64EncodedFile); // Can use this for
            base64 of the file



            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'

            require 'net/http/post/multipart'


            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            File.open('test.jpg') do |jpg|

            request = Net::HTTP::Post::Multipart.new(url.path,
                'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'))
            # for base64 of file instead of file

            # request = Net::HTTP::Post.new(url)

            # request.set_form_data({'base64_data' => base64OfFile})

            request.basic_auth 'REPLACE_API_KEY', ''

            response = Net::HTTP.start(url.host, url.port) do |http|
                http.request(request)
            end

            puts response.read_body

            end
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "Multipart/form-data");

            request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");

            // for base64 of file instead of file

            // request.AddParameter("base64_data", base64OfFile);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >
            OkHttpClient client = new OkHttpClient();

            private static final MediaType MEDIA_TYPE_JPG =
            MediaType.parse("image/jpeg");


            OkHttpClient client = new OkHttpClient();


            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                    .build();

            # for base64 of file instead of file

            # RequestBody formBody = new FormBody.Builder()

            #         .add("base64_data", base64OfFile).build();


            request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true")
                    .post(requestBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}/LabelUrls/?async=true:
    post:
      tags:
        - OCR Predict
      summary: Async Prediction for image url
      operationId: OcrPredict_imageUrlAsync
      security:
        - ApiKey: []
      description: >-
        This endpoint allows you to process a file on your OCR model and get the
        results
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            This parameter specifies whether you'd like to upload the file for
            processing and then query the results with a unique id at a later
            point in time
          in: path
          name: async
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OcrPredictImageUrlAsyncRequest'
        required: true
      responses:
        '200':
          description: >-
            message can contain 3 status messages

            1. success - File has been successfully processed

            2. pending - File is in the queue and will be processed

            3. failure - There was an issue while processing the file. It has
            been retried 3 times. It is recommended to reupload the file and if
            the issue persists, please contact support 
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    result:
                      - input: string
                        message: Success
                        result:
                          - file_url: >-
                              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                            filepath: >-
                              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                            id: 00000000-0000-0000-0000-000000000000X
                            input: filename.jpg
                            message: Success
                            page: 55
                            prediction: []
                            request_file_id: 00000000-0000-0000-0000-000000000000
                            request_metadata: metadata sent during prediction
              schema:
                $ref: '#/components/schemas/OcrPredictImageUrlAsyncResponse'
        '202':
          description: >-
            Request partially successful. One or more urls might not be correct
            or got no response
        '400':
          description: Urls missing. Check if you have an included array of image urls
        '402':
          description: >-
            Exhausted Free API Calls  You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var querystring = require('querystring')

            const form_data = {'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg'], 
                               // for base64 of file instead of url
                              //'base64_data' : fs.readFileSync("REPLACE_IMAGE_PATH.jpg").toString('base64')
                               }

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true'


            headers = {
                'accept': 'application/x-www-form-urlencoded'
            }


            data = {'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}


            # for base64 of file instead of url

            # with open('REPLACE_IMAGE_PATH.jpg', 'rb') as file:

            #   encoded_file = base64.b64encode(file.read())

            # data = {'base64_data': encoded_file}


            response = requests.request('POST', url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true' \
                --header 'accept: application/x-www-form-urlencoded' \
                -d 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \
                -u 'REPLACE_API_KEY'
                # -d 'base64_data=base64OfFile' # for base64 of file instead of urls
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io/ioutil"
                "net/http"
                "net/url"
            )

            func main() {

                labelUrl := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true"

                data := url.Values{}
                data.Add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg")
                // for base64 of file instead of url
                // data.Add("base64_data", base64OfFile)

                req, _ := http.NewRequest("POST", labelUrl, bytes.NewBufferString(data.Encode()))

                req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >
            var data =
            'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';

            //var data='base64_data=base64EncodedFile'// Can use this for base64
            of the url


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true");

            xhr.setRequestHeader("Content-Type",
            "application/x-www-form-urlencoded");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'


            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/x-www-form-urlencoded'

            request.basic_auth 'REPLACE_API_KEY', ''


            request.set_form_data({'urls' =>
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})

            # for base64 of file instead of urls

            # request.set_form_data({'base64_data' => base64OfFile})


            response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            request.AddHeader("accept", "application/x-www-form-urlencoded");

            request.AddParameter("urls",
            "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg");

            // for base64 of file instead of url

            // request.AddParameter("base64_data", base64OfFile);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient();

            RequestBody formBody = new FormBody.Builder()
                    .add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg").build();

            # for base64 of file instead of urls
            # RequestBody formBody = new FormBody.Builder()
            #         .add("base64_data", base64OfFile).build();

            Request request = new Request.Builder()
                .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true")
                .post(formBody)
                .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /ImageCategorization/LabelFile:
    post:
      tags:
        - Image Classification Model Predict
      summary: Prediction for image File
      operationId: ImageClassificationModelPredict_filePrediction
      security:
        - ApiKey: []
      description: >-
        Use the model to predict which one of the categories an image (given an
        image file) belongs to.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: >-
                #/components/schemas/ImageClassificationModelPredictFilePredictionRequest
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    model_id: 00000000-0000-0000-0000-000000000000
                    result:
                      - file: string
                        message: Success
                        prediction:
                          - label: category1
                            probability: 0.9
                          - label: category2
                            probability: 0.1
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelPredictFilePredictionResponse
        '400':
          description: |-
            File missing. Check if you have included a file in the request

            OR

            Incorrect image. Check if file you included is a valid PNG or JPEG
        '402':
          description: >-
            Exhausted Free API Calls. You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var fs = require('fs')

            const form_data = {'modelId' : 'REPLACE_MODEL_ID', 'file' :
            fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}

            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/',
                formData: form_data,
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/'


            data = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'modelId':
            ('', 'REPLACE_MODEL_ID')}


            response = requests.post(url, auth=
            requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/' \
              --header 'accept: multipart/form-data' \
              -u 'REPLACE_API_KEY' \
              -F 'modelId=REPLACE_MODEL_ID' \
              -F 'file=@REPLACE_IMAGE_PATH.jpg'
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io"
                "io/ioutil"
                "mime/multipart"
                "net/http"
                "os"
                "path/filepath"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/"

                file, err := os.Open("test.jpg")
                if err != nil {
                    fmt.Println(err)
                    return
                }

                defer file.Close()

                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)

                part, err := writer.CreateFormFile("file", filepath.Base("test.jpg"))
                if err != nil {
                    fmt.Println(err)
                    return
                }
                _, err = io.Copy(part, file)

                writer.WriteField("modelId", "REPLACE_MODEL_ID")

                contentType := writer.FormDataContentType()

                err = writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req, _ := http.NewRequest("POST", url, body)

                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                output, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(output))

            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('modelId', 'REPLACE_MODEL_ID');

            data.append('file', file); // file is a Blob object


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'

            require 'net/http/post/multipart'


            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            File.open('test.jpg') do |jpg|

            request = Net::HTTP::Post::Multipart.new(url.path,
                'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'),
                'modelId' => 'REPLACE_MODEL_ID')
            request.basic_auth 'REPLACE_API_KEY', ''

            response = Net::HTTP.start(url.host, url.port) do |http|
                http.request(request)
            end

            puts response.read_body

            end
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "Multipart/form-data");

            request.AddParameter("modelId", "REPLACE_MODEL_ID");

            request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();

            private static final MediaType MEDIA_TYPE_JPG =
            MediaType.parse("image/jpeg");


            OkHttpClient client = new OkHttpClient();


            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("modelId", "REPLACE_MODEL_ID")
                    .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                    .build();

            request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/")
                    .post(requestBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: modelId={{model_id}}&file=
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/LabelFile/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Prediction for image file
          x-testShouldPass: true
  /ImageCategorization/LabelUrls:
    post:
      tags:
        - Image Classification Model Predict
      summary: Prediction for image URLs
      operationId: ImageClassificationModelPredict_imageUrlPrediction
      security:
        - ApiKey: []
      description: >-
        Use the model to predict which one of the categories an image (given the
        image url) belongs to. You can specify multiple image urls.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: >-
                #/components/schemas/ImageClassificationModelPredictImageUrlPredictionRequest
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    model_id: 00000000-0000-0000-0000-000000000000
                    result:
                      - file: string
                        message: Success
                        page: 0
                        prediction:
                          - label: category1
                            probability: 0.9
                          - label: category2
                            probability: 0.1
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelPredictImageUrlPredictionResponse
        '202':
          description: >-
            Request partially successful. One or more urls might not be correct
            or got no response
        '400':
          description: Urls missing. Check if you have an included array of image urls
        '402':
          description: >-
            Exhausted Free API Calls  You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var querystring = require('querystring')

            const form_data = {'modelId': 'REPLACE_MODEL_ID', 'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}

            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url =
            'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/'


            headers = {
                'accept': 'application/x-www-form-urlencoded'
            }


            data = {'modelId': 'REPLACE_MODEL_ID', 'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}


            response = requests.request('POST', url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/' \
              --header 'accept: application/x-www-form-urlencoded' \
              -d 'modelId=REPLACE_MODEL_ID&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io/ioutil"
                "net/http"
                "net/url"
            )

            func main() {

                labelUrl := "https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/"

                data := url.Values{}
                data.Set("modelId", "REPLACE_MODEL_ID")
                data.Add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg")

                req, _ := http.NewRequest("POST", labelUrl, bytes.NewBufferString(data.Encode()))

                req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data =
            'modelId=REPLACE_MODEL_ID&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/");

            xhr.setRequestHeader("Content-Type",
            "application/x-www-form-urlencoded");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Post.new(url) request["accept"] =
            'application/x-www-form-urlencoded' request.basic_auth
            'REPLACE_API_KEY', '' request.set_form_data({'modelId' =>
            'REPLACE_MODEL_ID', 'urls' =>
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})
            response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "application/x-www-form-urlencoded");

            request.AddParameter("modelId", "REPLACE_MODEL_ID");

            request.AddParameter("urls",
            "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg");

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            RequestBody formBody = new FormBody.Builder()
                    .add("modelId", "REPLACE_MODEL_ID")
                    .add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg").build();

            Request request = new Request.Builder()
                .url("https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/")
                .post(formBody)
                .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: modelId={{model_id}}&file=
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/LabelUrls/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Prediction for image file
          x-testShouldPass: true
  /ImageCategorization/Models:
    get:
      tags:
        - Image Classification Model
      summary: Get All Models
      operationId: ImageClassificationModel_getAllModels
      security:
        - ApiKey: []
      description: This endpoint returns information of all models created by user
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    - categories:
                        - count: 0
                          name: category1
                        - count: 0
                          name: category2
                      model_id: 00000000-0000-0000-0000-000000000000
                      model_type: classification
                      state: 0
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelGetAllModelsResponse
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/Models/',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.get(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url = 'https://app.nanonets.com/api/v2/ImageCategorization/Models/'


            response = requests.request('GET', url, auth=
            requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))


            print(response.text)
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://app.nanonets.com/api/v2/ImageCategorization/Models/ \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/ImageCategorization/Models/"

                req, err := http.NewRequest("GET", url, nil)
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, err := http.DefaultClient.Do(req)
                if err != nil {
                    fmt.Println(err)
                    return
                }

                defer res.Body.Close()
                body, err := ioutil.ReadAll(res.Body)
                if err != nil {
                    fmt.Println(err)
                    return
                }

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("GET",
            "https://app.nanonets.com/api/v2/ImageCategorization/Models/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/Models/')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Get.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/Models/");

            var request = new RestRequest(Method.GET);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/ImageCategorization/Models/")
              .get()
              .addHeader("authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            method: GET
            uri: /ImageCategorization/Models/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Get All Models
          x-testShouldPass: true
  /ImageCategorization/Train:
    post:
      tags:
        - Image Classification Model Train
      summary: Train Model
      operationId: ImageClassificationModelTrain_newModelTraining
      security:
        - ApiKey: []
      description: >-
        You can use this endpoint to train a model after uploading images for
        each category. You can use the same endpoint to retrain a model after
        uploading more images to improve the model.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/ImageClassificationModelTrainNewModelTrainingRequest
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: classification
                    state: 0
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelTrainNewModelTrainingResponse
        '400':
          description: >-
            Model not ready for training. Check if the images for the model are
            uploaded
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            var querystring = require('querystring')
            const form_data = {'modelId' : 'REPLACE_MODEL_ID'}
            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/Train/',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }
            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url = 'https://app.nanonets.com/api/v2/ImageCategorization/Train/'


            querystring = {'modelId': 'REPLACE_MODEL_ID'}


            response = requests.request('POST', url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''),
            params=querystring)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID"

                req, _ := http.NewRequest("POST", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Post.new(url) request.basic_auth
            'REPLACE_API_KEY', '' response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID")
              .post(null)
              .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: modelId={{model_id}}
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/Train/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Train Model
          x-testShouldPass: true
  /ImageCategorization/UploadFile:
    post:
      tags:
        - Image Classification Model Upload
      summary: Upload training images by File
      operationId: ImageClassificationModelUpload_trainingImagesFile
      security:
        - ApiKey: []
      description: >-
        You can use this endpoint to upload training images for a category (for
        the specified model) using locally stored files. You will receive model
        information along with total number of images per category on successful
        execution. <br>Note: Filename in Data must be the same as that of the
        uploaded image name.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: >-
                #/components/schemas/ImageClassificationModelUploadTrainingImagesFileRequest
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: classification
                    state: 0
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelUploadTrainingImagesFileResponse
        '400':
          description: >-
            Category not valid for model. Check if this model has the category
            used in the request


            OR


            File missing. Check if you have included the file in the request


            OR


            Incorrect image. Check if file you included is valid PNG or JPEG
            file
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var fs = require('fs')

            const form_data = {'modelId' : 'REPLACE_MODEL_ID', 'category':
            'category1', 'file': fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}

            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/',
                formData: form_data,
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests



            url =
            'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/'



            data = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'),'category'
            :('', 'category1'), 'modelId' :('', 'REPLACE_MODEL_ID')}



            response = requests.post(url, auth=
            requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)

            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/' \
              --header 'accept: multipart/form-data' \
              -u 'REPLACE_API_KEY' \
              -F 'category=category1' \
              -F 'modelId=REPLACE_MODEL_ID' \
              -F 'file=@REPLACE_IMAGE_PATH.jpg'
        - lang: Golang
          source: |
            package main


            import (
                "bytes"
                "fmt"
                "io"
                "io/ioutil"
                "mime/multipart"
                "net/http"
                "os"
                "path/filepath"
            )


            func main() {
                url := "https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/"
                file, err := os.Open("REPLACE_IMAGE_PATH.jpg")
                if err != nil {
                    fmt.Println(err)
                    return
                }
                defer file.Close()


                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)
                part, err := writer.CreateFormFile("file", filepath.Base("REPLACE_IMAGE_PATH.jpg"))
                if err != nil {
                    fmt.Println(err)
                    return
                }

                _, err = io.Copy(part, file)
                if err != nil {
                    fmt.Println(err)
                    return
                }


                writer.WriteField("category", "category1")
                writer.WriteField("modelId", "REPLACE_MODEL_ID")
                contentType := writer.FormDataContentType()
                err = writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }
                req, _ := http.NewRequest("POST", url, body)
                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")


                res, _ := http.DefaultClient.Do(req)
                defer res.Body.Close()
                output, _ := ioutil.ReadAll(res.Body)
                fmt.Println(res)
                fmt.Println(string(output))
            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('category', 'category1');

            data.append('modelId', 'REPLACE_MODEL_ID');

            data.append('file', file); // file is a Blob object


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {

            if (this.readyState === this.DONE) {
                console.log(this.responseText);
            }

            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http' require 'net/http/post/multipart'

            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            File.open('REPLACE_IMAGE_PATH.jpg') do |jpg|
              request = Net::HTTP::Post::Multipart.new(url.path,
                'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg')
                'modelId' => 'REPLACE_MODEL_ID',
                'category' => 'category1')
              request.basic_auth 'REPLACE_API_KEY', ''
              response = Net::HTTP.start(url.host, url.port) do |http|
                http.request(request)
              end
              puts response.read_body
            end
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "Multipart/form-data");

            request.AddParameter("modelId", "REPLACE_MODEL_ID");

            request.AddParameter("category", "category1");

            request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >-
            private static final MediaType MEDIA_TYPE_JPG =
            MediaType.parse("image/jpeg");


            OkHttpClient client = new OkHttpClient();


            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("modelId", "REPLACE_MODEL_ID")
                    .addFormDataPart("category", "category1")
                    .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                    .build();

            request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/")
                    .post(requestBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: modelId={{model_id}}&category=category2&file=
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/UploadFile/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Upload training images by File
          x-testShouldPass: true
  /ImageCategorization/UploadUrls:
    post:
      tags:
        - Image Classification Model Upload
      summary: Upload training images by Url
      operationId: ImageClassificationModelUpload_byUrls
      security:
        - ApiKey: []
      description: >-
        You can use this endpoint to upload training images for a category (for
        the specified model) by image urls. You can upload multiple images in
        the same request by adding an array of urls. You will receive model
        information along with total number of images per category on successful
        execution.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageClassificationModelUploadByUrlsRequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: classification
                    state: 0
              schema:
                $ref: >-
                  #/components/schemas/ImageClassificationModelUploadByUrlsResponse
        '202':
          description: >-
            Request partially successful. One or more urls might not be correct
            or got no response
        '400':
          description: >-
            Category not valid for model. Check if this model has the category
            used in the request


            OR


            Urls missing  Check if you have included an array of image urls
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var querystring = require('querystring')

            const form_data = {'modelId' : 'REPLACE_MODEL_ID', 'category':
            'category1', 'urls':
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}

            const options = {
                url : 'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url =
            'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/'


            headers = {
                'accept': 'application/x-www-form-urlencoded'
            }


            data = {'modelId' : 'REPLACE_MODEL_ID', 'category': 'category1',
            'urls':
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}


            response = requests.request('POST', url, headers=headers, auth=
            requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/' \
              --header 'accept: application/x-www-form-urlencoded' \
              -d 'modelId=REPLACE_MODEL_ID&category=category1&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \
              -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |
            package main


            import (
                "bytes"
                "fmt"
                "io/ioutil"
                "net/http"
                "net/url"
            )


            func main() {
                UploadUrl := "https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/"


                data := url.Values{}
                data.Set("modelId", "REPLACE_MODEL_ID")
                data.Add("category", "category1")
                data.Add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg")


                req, err := http.NewRequest("POST", UploadUrl, bytes.NewBufferString(data.Encode()))
                if err != nil {
                    fmt.Println(err)
                    return
                }


                req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
                req.SetBasicAuth("REPLACE_API_KEY", "")


                res, err := http.DefaultClient.Do(req)
                if err != nil {
                    fmt.Println(err)
                    return
                }
                defer res.Body.Close()


                body, err := ioutil.ReadAll(res.Body)
                if err != nil {
                    fmt.Println(err)
                    return
                }


                fmt.Println(res)
                fmt.Println(string(body))
            }
        - lang: JavaScript
          source: >-
            var data =
            'modelId=REPLACE_MODEL_ID&category=category1&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/");

            xhr.setRequestHeader("Content-Type",
            "application/x-www-form-urlencoded");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri' require 'net/http'

            url =
            URI('https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Post.new(url) request["accept"] =
            'application/x-www-form-urlencoded' request.basic_auth
            'REPLACE_API_KEY', '' request.set_form_data({'modelId' =>
            'REPLACE_MODEL_ID', 'category' => 'category1', 'urls' =>
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})
            response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "application/x-www-form-urlencoded");

            request.AddParameter("modelId", "REPLACE_MODEL_ID");

            request.AddParameter("category", "category1");

            request.AddParameter("urls",
            "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg");

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            RequestBody formBody = new FormBody.Builder()
                    .add("modelId", "REPLACE_MODEL_ID")
                    .add("category", "category1")
                    .add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg").build();

            Request request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/")
                    .post(formBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: >-
              modelId={{model_id}}&category={{category1}}&urls=http://r.ddmcdn.com/w_830/s_f/o_1/cx_0/cy_66/cw_288/ch_162/APL/uploads/2014/10/cat_5-1.jpg
            headers:
              Content-Type: application/x-www-form-urlencoded
            method: POST
            uri: /ImageCategorization/UploadUrls/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Upload training images by Url
          x-testShouldPass: true
  /OCR/Model:
    post:
      tags:
        - OCR Model
      summary: Create New Model
      operationId: OcrModel_createNewModel
      security:
        - ApiKey: []
      description: >-
        You can create a new model using this endpoint. A successful API call
        will return the json structure of the newly created model. You can then
        use the model's id to upload images for each category and then retrain
        the model.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewModelrequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: ocr
                    state: 0
              schema:
                $ref: '#/components/schemas/OcrModelCreateNewModelResponse'
        '400':
          description: >-
            Zero or One category in request. Add two or more categories in
            parameters
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            const form_data = {'categories' : ['category1', 'category2'],
            'model_type': 'ocr'}

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/',
                body: JSON.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': "application/json",
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url = "https://app.nanonets.com/api/v2/OCR/Model/"


            payload = "{\"categories\" : [\"category1\", \"category2\"],
            \"model_type\": \"ocr\"}"

            headers = {
                'Content-Type': "application/json",
            }


            response = requests.request("POST", url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''),
            data=payload)


            print(response.text)
        - lang: Shell
          source: |-
            curl -X POST https://app.nanonets.com/api/v2/OCR/Model/ \
                -H 'Content-Type: application/json' \
                -u 'REPLACE_API_KEY' \
                -d '{"categories" : ["category1", "category2"], "model_type": "ocr"}'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "io/ioutil"
                "net/http"
                "strings"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/"

                payload := strings.NewReader("{\"categories\" : [\"category1\", \"category2\"], \"model_type\": \"ocr\"}")

                req, _ := http.NewRequest("POST", url, payload)

                req.Header.Add("Content-Type", "application/json")
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = JSON.stringify({
              "categories": [
                "category1",
                "category2"
              ], 
              "model_type": "ocr"
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === 4) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST", "https://app.nanonets.com/api/v2/OCR/Model/");

            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'


            url = URI("https://app.nanonets.com/api/v2/OCR/Model/")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["Content-Type"] = 'application/json'

            request.basic_auth 'REPLACE_API_KEY', ''

            request.body = "{\"categories\" :[\"category1\", \"category2\"],
            \"model_type\": \"ocr\"}"


            response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            request.AddHeader("Content-Type", "application/json");

            request.AddParameter("undefined", "{"categories" :["category1",
            "category2"], "model_type": "ocr"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{"categories" :
            ["category1", "category2"], "model_type": "ocr"}");

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/OCR/Model/")
              .post(body)
              .addHeader("Content-Type", "application/json")
              .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests:
        - expectedResponse:
            headers: {}
            x-allowExtraHeaders: true
            x-arrayCheckCount: false
            x-arrayOrderedMatching: false
            x-bodyMatchMode: NONE
            x-matchResponseSchema: true
          request:
            body: >-
              {"categories" : ["{{category1}}", "{{category2}}"], "model_type":
              "ocr"}
            headers:
              Content-Type: application/json
            method: POST
            uri: /OCR/Model/
          x-testDescription: ''
          x-testEnabled: true
          x-testName: Create New Model1
          x-testShouldPass: true
  /OCR/Model/{model_id}/LabelFile:
    post:
      tags:
        - OCR Predict
      summary: Prediction for image file
      operationId: OcrPredict_imageFile
      security:
        - ApiKey: []
      description: >-
        Use the model to predict which one of the categories an image (given an
        image file) belongs to.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            language hints eg: en, vi (not specifying generally gives best
            results)
          in: path
          name: l
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OcrPredictImageFileRequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    result:
                      - input: string
                        message: Success
                        prediction:
                          - label: category1
                            ocr_text: string
                            score: 0.9
                            xmax: 100
                            xmin: 0
                            ymax: 100
                            ymin: 0
                          - cells:
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 1
                                xmax: 258
                                xmin: 159
                                ymax: 1357
                                ymin: 1258
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 2
                                xmax: 380
                                xmin: 258
                                ymax: 1357
                                ymin: 1258
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 2
                                row_span: 1
                                score: 99.99
                                text: ocr text 3
                                xmax: 258
                                xmin: 159
                                ymax: 1439
                                ymin: 1357
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 2
                                row_span: 1
                                score: 99.99902
                                text: ocr text 4
                                xmax: 380
                                xmin: 258
                                ymax: 1439
                                ymin: 1357
                            label: ''
                            ocr_text: table 1
                            score: 99.99
                            type: table
                            xmax: 380
                            xmin: 159
                            ymax: 1439
                            ymin: 1258
              schema:
                $ref: '#/components/schemas/OcrPredictImageFileResponse'
        '400':
          description: |-
            File missing. Check if you have included a file in the request

            OR

            Incorrect image. Check if file you included is a valid PNG or JPEG
        '402':
          description: >-
            Exhausted Free API Calls. You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            var fs = require('fs')
            const form_data = {'modelId' : 'REPLACE_MODEL_ID', 
                                'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg'),
                                // for base64 of file instead of file
                                //'base64_data' : fs.readFileSync("REPLACE_IMAGE_PATH.jpg").toString('base64')
                              }

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/',
                formData: form_data,
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/'


            data = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb')}


            response = requests.post(url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)

            # for base64 of file instead of file

            # with open('REPLACE_IMAGE_PATH.jpg', 'rb') as file:

            #   encoded_file = base64.b64encode(file.read())

            # data = {'base64_data': encoded_file}

            # response = requests.post(url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/' \
                --header 'accept: multipart/form-data' \
                -u 'REPLACE_API_KEY' \
                -F 'file=@REPLACE_IMAGE_PATH.jpg'
                # -d 'base64_data=base64OfFile' # for base64 of file instead of file
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io"
                "io/ioutil"
                "mime/multipart"
                "net/http"
                // "net/url"
                "os"
                "path/filepath"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/"

                file, err := os.Open("REPLACE_IMAGE_PATH.jpg")
                if err != nil {
                    fmt.Println(err)
                    return
                }

                defer file.Close()

                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)

                part, err := writer.CreateFormFile("file", filepath.Base("REPLACE_IMAGE_PATH.jpg"))
                if err != nil {
                    fmt.Println(err)
                    return
                }
                _, err = io.Copy(part, file)

                contentType := writer.FormDataContentType()

                err = writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req, _ := http.NewRequest("POST", url, body)

                // for base64 of file instead of file
                // data := url.Values{}
                // data.Add("base64_data", base64OfFile)
                // req, _ := http.NewRequest("POST", url, bytes.NewBufferString(data.Encode()))

                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                respBody, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(respBody))

            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('file', fileBLob); // This is file object

            //data.append('base64_data', base64EncodedFile); // Can use this for
            base64 of the file



            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'

            require 'net/http/post/multipart'


            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            File.open('test.jpg') do |jpg|

            request = Net::HTTP::Post::Multipart.new(url.path,
                'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'))
            # for base64 of file instead of file

            # request = Net::HTTP::Post.new(url)

            # request.set_form_data({'base64_data' => base64OfFile})

            request.basic_auth 'REPLACE_API_KEY', ''

            response = Net::HTTP.start(url.host, url.port) do |http|
                http.request(request)
            end

            puts response.read_body

            end
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic " +
            Convert.ToBase64String(Encoding.Default.GetBytes("REPLACE_API_KEY:")));

            request.AddHeader("accept", "Multipart/form-data");

            request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");

            // for base64 of file instead of file

            // request.AddParameter("base64_data", base64OfFile);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >
            OkHttpClient client = new OkHttpClient();

            private static final MediaType MEDIA_TYPE_JPG =
            MediaType.parse("image/jpeg");


            OkHttpClient client = new OkHttpClient();


            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                    .build();

            # for base64 of file instead of file

            # RequestBody formBody = new FormBody.Builder()

            #         .add("base64_data", base64OfFile).build();

            request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/")
                    .post(requestBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}/LabelUrls:
    post:
      tags:
        - OCR Predict
      summary: Prediction for image url
      operationId: OcrPredict_imageUrlsPost
      security:
        - ApiKey: []
      description: >-
        Use the model to predict which one of the categories an image (given the
        image url) belongs to. You can specify multiple image urls.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
        - description: >-
            language hints eg: en, vi (not specifying generally gives best
            results)
          in: path
          name: l
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OcrPredictImageUrlsPostRequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    message: Success
                    result:
                      - input: string
                        message: Success
                        prediction:
                          - label: category1
                            ocr_text: string
                            score: 0.9
                            xmax: 100
                            xmin: 0
                            ymax: 100
                            ymin: 0
                          - cells:
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 1
                                xmax: 258
                                xmin: 159
                                ymax: 1357
                                ymin: 1258
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 1
                                row_span: 1
                                score: 99.99
                                text: ocr text 2
                                xmax: 380
                                xmin: 258
                                ymax: 1357
                                ymin: 1258
                              - col: 1
                                col_span: 1
                                label: col 1
                                row: 2
                                row_span: 1
                                score: 99.99
                                text: ocr text 3
                                xmax: 258
                                xmin: 159
                                ymax: 1439
                                ymin: 1357
                              - col: 2
                                col_span: 1
                                label: col 2
                                row: 2
                                row_span: 1
                                score: 99.99902
                                text: ocr text 4
                                xmax: 380
                                xmin: 258
                                ymax: 1439
                                ymin: 1357
                            label: ''
                            ocr_text: table 1
                            score: 99.99
                            type: table
                            xmax: 380
                            xmin: 159
                            ymax: 1439
                            ymin: 1258
              schema:
                $ref: '#/components/schemas/OcrPredictImageUrlsPostResponse'
        '202':
          description: >-
            Request partially successful. One or more urls might not be correct
            or got no response
        '400':
          description: Urls missing. Check if you have an included array of image urls
        '402':
          description: >-
            Exhausted Free API Calls  You have exhausted your free API calls
            please change your plan <a
            href="https://app.nanonets.com/user/apps">here</a>
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var querystring = require('querystring')

            const form_data = {'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg'], 
                               // for base64 of file instead of url
                              //'base64_data' : fs.readFileSync("REPLACE_IMAGE_PATH.jpg").toString('base64')
                               }

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/',
                body: querystring.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/'


            headers = {
                'accept': 'application/x-www-form-urlencoded'
            }


            data = {'urls' :
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}


            # for base64 of file instead of url

            # with open('REPLACE_IMAGE_PATH.jpg', 'rb') as file:

            #   encoded_file = base64.b64encode(file.read())

            # data = {'base64_data': encoded_file}


            response = requests.request('POST', url, headers=headers,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/' \
                --header 'accept: application/x-www-form-urlencoded' \
                -d 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \
                -u 'REPLACE_API_KEY'
                # -d 'base64_data=base64OfFile' # for base64 of file instead of urls
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io/ioutil"
                "net/http"
                "net/url"
            )

            func main() {

                labelUrl := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/"

                data := url.Values{}
                data.Add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg")
                // for base64 of file instead of url
                // data.Add("base64_data", base64OfFile)

                req, _ := http.NewRequest("POST", labelUrl, bytes.NewBufferString(data.Encode()))

                req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >
            var data =
            'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';

            //var data='base64_data=base64EncodedFile'// Can use this for base64
            of the url


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/");

            xhr.setRequestHeader("Content-Type",
            "application/x-www-form-urlencoded");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'


            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/x-www-form-urlencoded'

            request.basic_auth 'REPLACE_API_KEY', ''


            request.set_form_data({'urls' =>
            ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})

            # for base64 of file instead of urls

            # request.set_form_data({'base64_data' => base64OfFile})


            response = http.request(request)

            puts response.read_body
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            request.AddHeader("accept", "application/x-www-form-urlencoded");

            request.AddParameter("urls",
            "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg");

            // for base64 of file instead of url

            // request.AddParameter("base64_data", base64OfFile);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |
            OkHttpClient client = new OkHttpClient();

            RequestBody formBody = new FormBody.Builder()
                    .add("urls", "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg").build();

            # for base64 of file instead of urls
            # RequestBody formBody = new FormBody.Builder()
            #         .add("base64_data", base64OfFile).build();

            Request request = new Request.Builder()
                .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/")
                .post(formBody)
                .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}/Train:
    post:
      tags:
        - OCR Train
      summary: Train Model
      operationId: OcrTrain_model
      security:
        - ApiKey: []
      description: >-
        You can use this endpoint to train a model after uploading images for
        each category. You can use the same endpoint to retrain a model after
        uploading more images to improve the model.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    categories:
                      - count: 0
                        name: category1
                      - count: 0
                        name: category2
                    model_id: 00000000-0000-0000-0000-000000000000
                    model_type: ocr
                    state: 0
              schema:
                $ref: '#/components/schemas/OcrTrainModelResponse'
        '400':
          description: >-
            Model not ready for training. Check if the images for the model are
            uploaded
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: |
            var request = require('request')
            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/',
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }
            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/'

            response = requests.request('POST', url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/REPLACE_MODEL_ID/Train/' \
                -u 'REPLACE_API_KEY'
        - lang: Golang
          source: |-
            package main

            import (
                "fmt"
                "net/http"
                "io/ioutil"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/"

                req, _ := http.NewRequest("POST", url, nil)

                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >
            var data = null;


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {

            if (this.readyState === this.DONE) {
                console.log(this.responseText);
            }

            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/REPLACE_MODEL_ID/Train/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >-
            require 'uri' require 'net/http'

            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/')

            http = Net::HTTP.new(url.host, url.port) http.use_ssl = true

            request = Net::HTTP::Post.new(url) request.basic_auth
            'REPLACE_API_KEY', ''

            response = http.request(request) puts response.read_body
        - lang: C#
          source: >-
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/")
              .post(null)
              .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
  /OCR/Model/{model_id}/UploadFile:
    post:
      tags:
        - OCR Upload
      summary: Upload training images by File
      operationId: OcrUpload_trainingImagesFile
      description: >-
        You can use this endpoint to upload training images for a category (for
        the specified model) using locally stored files. You will receive model
        information along with total number of images per category on successful
        execution. <br>Note: Filename in Data must be the same as that of the
        uploaded image name.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OcrUploadTrainingImagesFileRequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    Data:
                      - filename: example.jpeg
                        id: 00000000-0000-0000-0000-000000000000X
                        object:
                          - bndbox:
                              xmax: 100
                              xmin: 1
                              ymax: 100
                              ymin: 1
                            name: category1
                        size:
                          height: 1024
                          width: 1024
                    Meta:
                      Accuracy: 0
                      Categories:
                        - count: 0
                          name: category1
                        - count: 0
                          name: category2
                      ModelID: 00000000-0000-0000-0000-000000000000
                      ModelType: localization
                      State: 0
                      Status: Current Status
              schema:
                $ref: '#/components/schemas/OcrUploadTrainingImagesFileResponse'
        '400':
          description: >-
            Category not valid for model. Check if this model has the category
            used in the request


            OR


            File missing. Check if you have included the file in the request


            OR


            Incorrect image. Check if file you included is valid PNG or JPEG
            file
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            var fs = require('fs')

            const form_data = {'file' :
            fs.createReadStream('REPLACE_IMAGE_PATH.jpg'), 'data' :
            JSON.stringify([
              {"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":[{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin":1,"xmax": 100, "ymax": 100}}]}])}

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/',
                formData: form_data,
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >-
            import requests


            url =
            'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/'


            data = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'data' :('',
            '[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":
            [{"name":"category1", "ocr_text":"text inside the bounding box",
            "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}]')}


            response = requests.post(url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/' \
                --header 'accept: multipart/form-data' \
                -u 'REPLACE_API_KEY' \
                -F 'data=[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}]' \
                -F 'file=@REPLACE_IMAGE_PATH.jpg'
        - lang: Golang
          source: |
            package main

            import (
                "bytes"
                "fmt"
                "io"
                "io/ioutil"
                "mime/multipart"
                "net/http"
                "os"
                "path/filepath"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/"

                file, err := os.Open("test.jpg")
                if err != nil {
                    fmt.Println(err)
                    return
                }

                defer file.Close()

                body := &bytes.Buffer{}
                writer := multipart.NewWriter(body)

                part, err := writer.CreateFormFile("file", filepath.Base("test.jpg"))
                if err != nil {
                    fmt.Println(err)
                    return
                }
                _, err = io.Copy(part, file)

                writer.WriteField("data", `[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}]`)
                contentType := writer.FormDataContentType()

                err = writer.Close()
                if err != nil {
                    fmt.Println(err)
                    return
                }

                req, _ := http.NewRequest("POST", url, body)

                req.Header.Add("Content-Type", contentType)
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                outputBody, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(outputBody))

            }
        - lang: JavaScript
          source: >
            var data = new FormData();

            data.append('data', '[{"filename":"REPLACE_IMAGE_FILENAME.jpg",
            "object": [{"name":"category1", "ocr_text":"text inside the bounding
            box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax":
            100}}]}]');

            data.append('file', file); // file is a Blob object


            var xhr = new XMLHttpRequest();


            var xhr = new XMLHttpRequest();


            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === this.DONE) {
                    console.log(this.responseText);
                }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'

            require 'net/http/post/multipart'


            url =
            URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/')


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            File.open('REPLACE_IMAGE_PATH.jpg') do |jpg|
              request = Net::HTTP::Post::Multipart.new url.path,
                  'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg'),
                  'data' => '[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":[{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox":{"xmin":1,"ymin":1,"xmax":100, "ymax":100}}]}]'
              request.basic_auth 'REPLACE_API_KEY', ''
              response = Net::HTTP.start(url.host, url.port) do |http|
                  http.request(request)
              end
              puts response.read_body
            end
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/UploadFile/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            request.AddHeader("accept", "Multipart/form-data");

            request.AddParameter("data",
            "[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\":
            [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding
            box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\":
            100}}]}]");

            request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");

            IRestResponse response = client.Execute(request);"
        - lang: Java
          source: >
            private static final MediaType MEDIA_TYPE_JPG =
            MediaType.parse("image/jpeg");


            OkHttpClient client = new OkHttpClient();


            RequestBody requestBody = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart("data", "[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]")
                    .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                    .build();

            request = new Request.Builder()
                    .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/")
                    .post(requestBody)
                    .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
                    .build();

            Response response = client.newCall(request).execute();"
  /OCR/Model/{model_id}/UploadUrls:
    post:
      tags:
        - OCR Upload
      summary: Upload training images by Url
      operationId: OcrUpload_trainingImagesByUrl
      security:
        - ApiKey: []
      description: >-
        You can use this endpoint to upload training images for a category (for
        the specified model) by image urls. You can upload multiple images in
        the same request by adding an array of urls. You will receive model
        information along with total number of images per category on successful
        execution.
      parameters:
        - description: ''
          in: path
          name: model_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadTrainingImagesByUrlrequest'
        required: true
      responses:
        '200':
          description: Model Object
          content:
            application/json:
              examples:
                response:
                  value:
                    Data:
                      - filename: example.jpeg
                        id: 00000000-0000-0000-0000-000000000000X
                        object:
                          - bndbox:
                              xmax: 100
                              xmin: 1
                              ymax: 100
                              ymin: 1
                            name: category1
                            ocr_text: text inside the bounding box
                        size:
                          height: 1024
                          width: 1024
                    Meta:
                      Accuracy: 0
                      Categories:
                        - count: 0
                          name: category1
                        - count: 0
                          name: category2
                      ModelID: 00000000-0000-0000-0000-000000000000
                      ModelType: ocr
                      State: 0
                      Status: Current Status
              schema:
                $ref: '#/components/schemas/OcrUploadTrainingImagesByUrlResponse'
        '202':
          description: >-
            Request partially successful. One or more urls might not be correct
            or got no response
        '400':
          description: >-
            Category not valid for model. Check if this model has the category
            used in the request


            OR


            Urls missing. Check if you have included an array of image urls
        '404':
          description: Model does not exists. Check if the model id exists
      x-code-samples:
        - lang: Nodejs
          source: >
            var request = require('request')

            const form_data = {"data":
            [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
            "object": [{"name":"category1", "ocr_text":"text inside the bounding
            box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}},
            {"name":"category2", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100,
            "ymax": 100}}]}], "urls":
            ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}

            const options = {
                url : 'https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/',
                body: JSON.stringify(form_data),
                headers: {
                    'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),
                    'Content-Type': "application/json"
                }
            }

            request.post(options, function(err, httpResponse, body) {

              console.log(body)
            });
        - lang: Python
          source: >
            import requests


            url =
            "https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/"


            payload = "{\"data\":
            [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\",
            \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the
            bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100,
            \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\":
            1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\":
            [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}"

            headers = {
                'Content-Type': "application/json"
            }


            response = requests.request("POST", url,
            auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''),
            data=payload, headers=headers)


            print(response.text)
        - lang: Shell
          source: |
            curl --request POST \
                --url https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/ \
                -u 'REPLACE_API_KEY' \
                -H 'Content-Type: application/json' \
                --data '{"data": [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}, {"name":"category2", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}], "urls": ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}'
        - lang: Golang
          source: |
            package main

            import (
                "fmt"
                "io/ioutil"
                "net/http"
                "strings"
            )

            func main() {

                url := "https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/"

                payload := strings.NewReader("{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}")

                req, _ := http.NewRequest("POST", url, payload)

                req.Header.Add("Content-Type", "application/json")
                req.SetBasicAuth("REPLACE_API_KEY", "")

                res, _ := http.DefaultClient.Do(req)

                defer res.Body.Close()
                body, _ := ioutil.ReadAll(res.Body)

                fmt.Println(res)
                fmt.Println(string(body))

            }
        - lang: JavaScript
          source: >-
            var data = JSON.stringify({
              "data": [
                {
                  "filename": "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
                  "object": [
                    {
                      "name": "category1",
                      "bndbox": {
                        "xmin": 1,
                        "ymin": 1,
                        "xmax": 100,
                        "ymax": 100
                      },
                      "ocr_text" : "text inside the bounding box",
                    },
                    {
                      "name": "category2",
                      "bndbox": {
                        "xmin": 1,
                        "ymin": 1,
                        "xmax": 100,
                        "ymax": 100
                      },
                      "ocr_text" : "text inside the bounding box",
                    }
                  ]
                }
              ],
              "urls": [
                "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"
              ]
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === 4) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/");

            xhr.setRequestHeader("Content-Type", "application/json");

            xhr.setRequestHeader("authorization", "Basic " +
            btoa("REPLACE_API_KEY:"));


            xhr.send(data);
        - lang: Ruby
          source: >
            require 'uri'

            require 'net/http'


            url =
            URI("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true


            request = Net::HTTP::Post.new(url)

            request["Content-Type"] = 'application/json'

            request.basic_auth 'REPLACE_API_KEY', ''

            request.body = "{\"data\":
            [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\",
            \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the
            bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100,
            \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\":
            1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\":
            [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}"


            response = http.request(request)

            puts response.read_body"
        - lang: C#
          source: >
            var client = new
            RestClient("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/");

            var request = new RestRequest(Method.POST);

            request.AddHeader("authorization", "Basic REPLACE_API_KEY");

            request.AddHeader("Content-Type", "application/json");

            request.AddParameter("undefined", " {"data":
            [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
            "object": [{"name":"category1", "ocr_text": "text inside the
            bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax":
            100}}, {"name":"category2", "ocr_text": "text inside the bounding
            box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}],
            "urls":
            ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "

            {"data":
            [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
            "object": [{"name":"category1", "ocr_text": "text inside the
            bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax":
            100}}, {"name":"category2", "ocr_text": "text inside the bounding
            box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}],
            "urls":
            ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}");

            Request request = new Request.Builder()
              .url("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/")
              .post(body)
              .addHeader("Content-Type", "application/json")
              .addHeader("Authorization", Credentials.basic("REPLACE_API_KEY", ""))
              .build();

            Response response = client.newCall(request).execute();
      x-operation-settings:
        AllowDynamicFormParameters: false
        AllowDynamicQueryParameters: false
        CollectParameters: false
        IsMultiContentStreaming: false
      x-unitTests: []
components:
  securitySchemes:
    ApiKey:
      description: >-
        When you sign up for an account, you are given your first API key. To do
        so please [follow this link.](https://app.nanonets.com/#keys)


        Also you can generate additional API keys, and delete API keys (as you
        may need to rotate your keys in the future). NanoNets expects for the
        API key to be included in all API requests to the server in a header
        that looks like the following:


        <span style="color:red">Authorization: REPLACE_API_KEY</span>


        All API requests must be made over HTTPS. Calls made over plain HTTP
        will fail. API requests without authentication will also fail.
      type: http
      x-skip-client-authentication: false
      x-testValue: []
      scheme: basic
  schemas:
    Bndbox:
      title: Bndbox
      example:
        xmax: 100
        xmin: 1
        ymax: 100
        ymin: 1
      properties:
        xmax:
          description: ''
          example: 100
          format: int
          type: integer
        xmin:
          description: ''
          example: 1
          format: int
          type: integer
        ymax:
          description: ''
          example: 100
          format: int
          type: integer
        ymin:
          description: ''
          example: 1
          format: int
          type: integer
      required:
        - xmin
        - ymin
        - xmax
        - ymax
      type: object
    CreateNewModelrequest:
      title: Create New Model Body
      example:
        categories:
          - '{{category1}}'
          - '{{category2}}'
        model_type:
          - ocr
      properties:
        categories:
          description: ''
          example:
            - '{{category1}}'
            - '{{category2}}'
          items:
            type: string
          type: array
        model_type:
          description: Type of model, 'ocr' for OCR model
          example: ocr
          type: string
      required:
        - categories
      type: object
    Datum:
      title: Annotation Object
      example:
        filename: https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
        object:
          - bndbox:
              xmax: 100
              xmin: 1
              ymax: 100
              ymin: 1
            name: '{{category1}}'
      properties:
        filename:
          description: ''
          example: https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
          type: string
        object:
          description: ''
          example:
            - bndbox:
                xmax: 100
                xmin: 1
                ymax: 100
                ymin: 1
              name: '{{category1}}'
          items:
            $ref: '#/components/schemas/Object3'
          type: array
      required:
        - filename
        - object
      type: object
    Object3:
      title: Annotations
      example:
        bndbox:
          xmax: 100
          xmin: 1
          ymax: 100
          ymin: 1
        name: '{{category1}}'
      properties:
        bndbox:
          $ref: '#/components/schemas/Bndbox'
        name:
          description: ''
          example: '{{category1}}'
          type: string
      required:
        - name
        - bndbox
      type: object
    UploadTrainingImagesByUrlrequest:
      title: Upload Training Images Body
      example:
        data:
          - filename: https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
            object:
              - bndbox:
                  xmax: 100
                  xmin: 1
                  ymax: 100
                  ymin: 1
                name: '{{category1}}'
        urls:
          - https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
      properties:
        data:
          description: ''
          example:
            - filename: >-
                https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
              object:
                - bndbox:
                    xmax: 100
                    xmin: 1
                    ymax: 100
                    ymin: 1
                  name: '{{category1}}'
          items:
            $ref: '#/components/schemas/Datum'
          type: array
        urls:
          description: ''
          example:
            - https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg
          items:
            type: string
          type: array
      required:
        - data
        - urls
      type: object
    ImageClassificationModelCreateNewModelRequest:
      type: object
      properties:
        categories:
          type: string
      required:
        - categories
    GetFullTextFileContentRequest:
      type: object
      properties:
        file:
          description: >-
            Comma separated page numbers which needs to be processed from the
            list of Files uploaded.  ex: '1,2' 
          type: string
          format: binary
        urls:
          description: >-
            language hints eg: en, vi (not specifying generally gives best
            results)
          type: string
      required:
        - file
    OcrPredictImageFileAsyncPredictionRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        base64_data:
          type: string
        request_metadata:
          description: metadata to save with the document
          type: string
      required:
        - file
    OcrPredictImageUrlAsyncRequest:
      type: object
      properties:
        urls:
          type: string
        base64_data:
          type: string
        request_metadata:
          description: metadata to save with the document
          type: string
      required:
        - urls
    ImageClassificationModelPredictFilePredictionRequest:
      type: object
      properties:
        modelId:
          type: string
        file:
          type: string
          format: binary
      required:
        - modelId
        - file
    ImageClassificationModelPredictImageUrlPredictionRequest:
      type: object
      properties:
        modelId:
          type: string
        urls:
          type: string
      required:
        - modelId
        - urls
    ImageClassificationModelTrainNewModelTrainingRequest:
      type: object
      properties:
        modelId:
          type: string
      required:
        - modelId
    ImageClassificationModelUploadTrainingImagesFileRequest:
      type: object
      properties:
        modelId:
          type: string
        category:
          type: string
        file:
          type: string
          format: binary
      required:
        - modelId
        - category
        - file
    ImageClassificationModelUploadByUrlsRequest:
      type: object
      properties:
        modelId:
          type: string
        category:
          type: string
        urls:
          type: string
      required:
        - modelId
        - category
        - urls
    OcrPredictImageFileRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
        base64_data:
          type: string
        request_metadata:
          description: metadata to save with the document
          type: string
        pages_to_process:
          description: >-
            Comma separated page numbers which needs to be processed from the
            list of Files uploaded.  ex: '1,2' 
          type: string
      required:
        - file
    OcrPredictImageUrlsPostRequest:
      type: object
      properties:
        urls:
          type: string
        base64_data:
          type: string
        request_metadata:
          description: metadata to save with the document
          type: string
        pages_to_process:
          description: >-
            Comma separated page numbers which needs to be processed from the
            list of URL's  ex: '1,2' 
          type: string
      required:
        - urls
    OcrUploadTrainingImagesFileRequest:
      type: object
      properties:
        data:
          type: string
        file:
          type: string
          format: binary
      required:
        - data
        - file
    ImageClassificationModelCreateNewModelResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: classification
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: classification
        state: 0
    OcrPredictPredictionFileByPageIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        result:
          type: array
          items:
            type: object
            properties:
              input:
                type: string
                example: string
              message:
                type: string
                example: Success
              prediction:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: uuid
                    label:
                      type: string
                      example: category1
                    ocr_text:
                      type: string
                      example: string
                    score:
                      type: number
                      example: 0.9
                    status:
                      type: string
                      example: correctly_predicted
                    type:
                      type: string
                      example: field
                    xmax:
                      type: number
                      example: 100
                    xmin:
                      type: number
                      example: 0
                    ymax:
                      type: number
                      example: 100
                    ymin:
                      type: number
                      example: 0
                    cells:
                      type: array
                      items:
                        type: object
                        properties:
                          col:
                            type: number
                            example: 1
                          col_span:
                            type: number
                            example: 1
                          failed_validation:
                            type: string
                            example: string
                          id:
                            type: string
                            example: uuid
                          label:
                            type: string
                            example: col 1
                          row:
                            type: number
                            example: 1
                          row_label:
                            type: string
                            example: optional
                          row_span:
                            type: number
                            example: 1
                          score:
                            type: number
                            example: 99.99
                          status:
                            type: string
                            example: string
                          text:
                            type: string
                            example: ocr text 1
                          verification_status:
                            type: string
                            example: correctly_predicted
                          xmax:
                            type: number
                            example: 258
                          xmin:
                            type: number
                            example: 159
                          ymax:
                            type: number
                            example: 1357
                          ymin:
                            type: number
                            example: 1258
      example:
        message: Success
        result:
          - input: string
            message: Success
            prediction:
              - id: uuidX
                label: category1
                ocr_text: string
                score: 0.9
                status: correctly_predicted
                type: field
                xmax: 100
                xmin: 0
                ymax: 100
                ymin: 0
              - cells:
                  - col: 1
                    col_span: 1
                    failed_validation: string
                    id: uuidX
                    label: col 1
                    row: 1
                    row_label: optional
                    row_span: 1
                    score: 99.99
                    status: string
                    text: ocr text 1
                    verification_status: correctly_predicted
                    xmax: 258
                    xmin: 159
                    ymax: 1357
                    ymin: 1258
                  - col: 2
                    col_span: 1
                    failed_validation: string
                    id: uuidX
                    label: col 2
                    row: 1
                    row_label: optional
                    row_span: 1
                    score: 99.99
                    status: string
                    text: ocr text 2
                    verification_status: correctly_predicted
                    xmax: 380
                    xmin: 258
                    ymax: 1357
                    ymin: 1258
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 2
                    row_span: 1
                    score: 99.99
                    text: ocr text 3
                    xmax: 258
                    xmin: 159
                    ymax: 1439
                    ymin: 1357
                  - col: 2
                    col_span: 1
                    failed_validation: string
                    id: uuidX
                    label: col 2
                    row: 2
                    row_label: optional
                    row_span: 1
                    score: 99.99902
                    status: string
                    text: ocr text 4
                    verification_status: correctly_predicted
                    xmax: 380
                    xmin: 258
                    ymax: 1439
                    ymin: 1357
                id: uuidX
                label: ''
                ocr_text: table 1
                score: 99.99
                status: correctly_predicted
                type: table
                xmax: 380
                xmin: 159
                ymax: 1439
                ymin: 1258
    OcrPredictAllPredictionFilesResponse:
      type: object
      properties:
        moderated_images:
          type: array
          items:
            type: object
            properties:
              day_since_epoch:
                type: number
                example: 18564
              file_url:
                type: string
                example: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
              hour_of_day:
                type: number
                example: 15
              id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
              is_moderated:
                type: boolean
                example: true
              model_id:
                type: string
                example: category1
              predicted_boxes:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: invoice_id
                    ocr_text:
                      type: string
                      example: '877541'
                    xmax:
                      type: number
                      example: 984
                    xmin:
                      type: number
                      example: 616
                    ymax:
                      type: number
                      example: 357
                    ymin:
                      type: number
                      example: 321
              url:
                type: string
                example: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000001.jpeg
        moderated_images_count:
          type: number
          example: 55
        unmoderated_images:
          type: array
          items:
            type: object
            properties:
              day_since_epoch:
                type: number
                example: 18565
              file_url:
                type: string
                example: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
              hour_of_day:
                type: number
                example: 23
              id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
              is_moderated:
                type: boolean
                example: false
              model_id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
              predicted_boxes:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: seller_name
                    ocr_text:
                      type: string
                      example: Apple
                    xmax:
                      type: number
                      example: 984
                    xmin:
                      type: number
                      example: 616
                    ymax:
                      type: number
                      example: 357
                    ymin:
                      type: number
                      example: 321
              url:
                type: string
                example: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000002.jpeg
        unmoderated_images_count:
          type: number
          example: 156
      example:
        moderated_images:
          - day_since_epoch: 18564
            file_url: >-
              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
            hour_of_day: 15
            id: 00000000-0000-0000-0000-000000000000X
            is_moderated: true
            model_id: category1
            predicted_boxes:
              - label: invoice_id
                ocr_text: '877541'
                xmax: 984
                xmin: 616
                ymax: 357
                ymin: 321
            url: >-
              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000001.jpeg
        moderated_images_count: 55
        unmoderated_images:
          - day_since_epoch: 18565
            file_url: >-
              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
            hour_of_day: 23
            id: 00000000-0000-0000-0000-000000000000X
            is_moderated: false
            model_id: 00000000-0000-0000-0000-000000000000
            predicted_boxes:
              - label: seller_name
                ocr_text: Apple
                xmax: 984
                xmin: 616
                ymax: 357
                ymin: 321
            url: >-
              uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000002.jpeg
        unmoderated_images_count: 156
    OcrPredictGetFilePredictionByFileIdResponse:
      type: object
      properties:
        moderated_images:
          type: array
          items:
            type: object
            properties:
              day_since_epoch:
                type: number
                example: 0
              file_url:
                type: string
                example: >-
                  uploadedfiles/<id>/PredictionImages/<original_image_name><timestamp_based_string>
              hour_of_day:
                type: number
                example: 0
              id:
                type: string
                example: uuid
              is_moderated:
                type: boolean
                example: true
              model_id:
                type: string
                example: <model_id>
              moderated_boxes:
                type: array
                items:
                  type: string
                  nullable: true
                  x-konfig-null-placeholder: true
              original_file_name:
                type: string
                example: <filename>
              page:
                type: number
                example: 0
              predicted_boxes:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: uuid
                    label:
                      type: string
                      example: category1
                    ocr_text:
                      type: string
                      example: string
                    score:
                      type: number
                      example: 0.9
                    status:
                      type: string
                      example: correctly_predicted
                    type:
                      type: string
                      example: field|table
                    xmax:
                      type: number
                      example: 100
                    xmin:
                      type: number
                      example: 0
                    ymax:
                      type: number
                      example: 100
                    ymin:
                      type: number
                      example: 0
                    cells:
                      type: array
                      items:
                        type: object
                        properties:
                          col:
                            type: number
                            example: 1
                          col_span:
                            type: number
                            example: 1
                          label:
                            type: string
                            example: col 1
                          row:
                            type: number
                            example: 1
                          row_span:
                            type: number
                            example: 1
                          score:
                            type: number
                            example: 99.99
                          text:
                            type: string
                            example: ocr text 1
                          xmax:
                            type: number
                            example: 258
                          xmin:
                            type: number
                            example: 159
                          ymax:
                            type: number
                            example: 1357
                          ymin:
                            type: number
                            example: 1258
              request_file_id:
                type: string
                example: uuid
              request_metadata:
                type: string
                example: metadata sent during prediction
              status:
                type: string
                example: Success
              updated_at:
                type: string
                example: timeuuid
              url:
                type: string
                example: uploadedfiles/<id>/PredictionImages/<image_name>
              verified_at:
                type: string
                example: timeuuid
              verified_by:
                type: string
                example: <person_name>
        moderated_images_count:
          type: number
          example: 0
        signed_urls:
          type: array
          items:
            type: string
            nullable: true
            x-konfig-null-placeholder: true
        unmoderated_images:
          type: array
          items:
            type: string
            nullable: true
            x-konfig-null-placeholder: true
        unmoderated_images_count:
          type: number
          example: 1
      example:
        moderated_images:
          - day_since_epoch: 0
            file_url: >-
              uploadedfiles/<id>/PredictionImages/<original_image_name><timestamp_based_string>
            hour_of_day: 0
            id: uuidX
            is_moderated: true
            model_id: <model_id>
            moderated_boxes:
              - null
            original_file_name: <filename>
            page: 0
            predicted_boxes:
              - id: uuidX
                label: category1
                ocr_text: string
                score: 0.9
                status: correctly_predicted
                type: field|table
                xmax: 100
                xmin: 0
                ymax: 100
                ymin: 0
              - cells:
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 1
                    xmax: 258
                    xmin: 159
                    ymax: 1357
                    ymin: 1258
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 2
                    xmax: 380
                    xmin: 258
                    ymax: 1357
                    ymin: 1258
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 2
                    row_span: 1
                    score: 99.99
                    text: ocr text 3
                    xmax: 258
                    xmin: 159
                    ymax: 1439
                    ymin: 1357
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 2
                    row_span: 1
                    score: 99.99902
                    text: ocr text 4
                    xmax: 380
                    xmin: 258
                    ymax: 1439
                    ymin: 1357
                label: ''
                ocr_text: table 1
                score: 99.99
                type: table
                xmax: 380
                xmin: 159
                ymax: 1439
                ymin: 1258
            request_file_id: uuid
            request_metadata: metadata sent during prediction
            status: Success
            updated_at: timeuuid
            url: uploadedfiles/<id>/PredictionImages/<image_name>
            verified_at: timeuuid
            verified_by: <person_name>
        moderated_images_count: 0
        signed_urls:
          - null
        unmoderated_images:
          - null
        unmoderated_images_count: 1
    GetFullTextFileContentResponse:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: MY_FILE_NAME_1.pdf
              page_data:
                type: array
                items:
                  type: object
                  properties:
                    page:
                      type: number
                      example: 0
                    raw_text:
                      type: string
                      example: this contains all the text in the page
                    words:
                      type: array
                      items:
                        type: object
                        properties:
                          text:
                            type: string
                            example: text of word 1
                          xmax:
                            type: number
                            example: 380
                          xmin:
                            type: number
                            example: 159
                          ymax:
                            type: number
                            example: 1439
                          ymin:
                            type: number
                            example: 1258
      example:
        result:
          - filename: MY_FILE_NAME_1.pdf
            page_data:
              - page: 0
                raw_text: this contains all the text in the page
                words:
                  - text: text of word 1
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
                  - text: text of word 2
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
                  - text: text of word 3
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
              - page: 1
                raw_text: this contains all the text in the page
                words:
                  - text: text of word 1
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
                  - text: text of word 2
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
              - page: 2
                raw_text: this contains all the text in the page
                words:
                  - text: text of word 3
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
          - filename: MY_FILE_NAME_2.jpg
            page_data:
              - page: 0
                raw_text: this contains all the text in the page
                words:
                  - text: text of word 1
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
                  - text: text of word 2
                    xmax: 380
                    xmin: 159
                    ymax: 1439
                    ymin: 1258
    OcrModelGetModelByIdResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: ocr
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: ocr
        state: 0
    OcrPredictImageFileAsyncPredictionResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        result:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: Success
              result:
                type: array
                items:
                  type: object
                  properties:
                    file_url:
                      type: string
                      example: >-
                        uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                    filepath:
                      type: string
                      example: >-
                        uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                    id:
                      type: string
                      example: 00000000-0000-0000-0000-000000000000
                    input:
                      type: string
                      example: filename.jpg
                    message:
                      type: string
                      example: Success
                    page:
                      type: number
                      example: 55
                    prediction:
                      type: array
                      items:
                        type: string
                    request_file_id:
                      type: string
                      example: 00000000-0000-0000-0000-000000000000
                    request_metadata:
                      type: string
                      example: metadata sent during prediction
      example:
        message: Success
        result:
          - message: Success
            result:
              - file_url: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                filepath: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                id: 00000000-0000-0000-0000-000000000000X
                input: filename.jpg
                message: Success
                page: 55
                prediction: []
                request_file_id: 00000000-0000-0000-0000-000000000000
                request_metadata: metadata sent during prediction
    OcrPredictImageUrlAsyncResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        result:
          type: array
          items:
            type: object
            properties:
              input:
                type: string
                example: string
              message:
                type: string
                example: Success
              result:
                type: array
                items:
                  type: object
                  properties:
                    file_url:
                      type: string
                      example: >-
                        uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                    filepath:
                      type: string
                      example: >-
                        uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                    id:
                      type: string
                      example: 00000000-0000-0000-0000-000000000000
                    input:
                      type: string
                      example: filename.jpg
                    message:
                      type: string
                      example: Success
                    page:
                      type: number
                      example: 55
                    prediction:
                      type: array
                      items:
                        type: string
                    request_file_id:
                      type: string
                      example: 00000000-0000-0000-0000-000000000000
                    request_metadata:
                      type: string
                      example: metadata sent during prediction
      example:
        message: Success
        result:
          - input: string
            message: Success
            result:
              - file_url: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/original_file_name-xxxx.jpeg
                filepath: >-
                  uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg
                id: 00000000-0000-0000-0000-000000000000X
                input: filename.jpg
                message: Success
                page: 55
                prediction: []
                request_file_id: 00000000-0000-0000-0000-000000000000
                request_metadata: metadata sent during prediction
    ImageClassificationModelPredictFilePredictionResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        result:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
                example: string
              message:
                type: string
                example: Success
              prediction:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: category1
                    probability:
                      type: number
                      example: 0.9
      example:
        message: Success
        model_id: 00000000-0000-0000-0000-000000000000
        result:
          - file: string
            message: Success
            prediction:
              - label: category1
                probability: 0.9
              - label: category2
                probability: 0.1
    ImageClassificationModelPredictImageUrlPredictionResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        result:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
                example: string
              message:
                type: string
                example: Success
              page:
                type: number
                example: 0
              prediction:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: category1
                    probability:
                      type: number
                      example: 0.9
      example:
        message: Success
        model_id: 00000000-0000-0000-0000-000000000000
        result:
          - file: string
            message: Success
            page: 0
            prediction:
              - label: category1
                probability: 0.9
              - label: category2
                probability: 0.1
    ImageClassificationModelGetAllModelsResponse:
      type: array
      items:
        type: object
        properties:
          categories:
            type: array
            items:
              type: object
              properties:
                count:
                  type: number
                  example: 0
                name:
                  type: string
                  example: category1
          model_id:
            type: string
            example: 00000000-0000-0000-0000-000000000000
          model_type:
            type: string
            example: classification
          state:
            type: number
            example: 0
      example:
        - categories:
            - count: 0
              name: category1
            - count: 0
              name: category2
          model_id: 00000000-0000-0000-0000-000000000000
          model_type: classification
          state: 0
    ImageClassificationModelTrainNewModelTrainingResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: classification
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: classification
        state: 0
    ImageClassificationModelUploadTrainingImagesFileResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: classification
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: classification
        state: 0
    ImageClassificationModelUploadByUrlsResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: classification
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: classification
        state: 0
    OcrModelCreateNewModelResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: ocr
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: ocr
        state: 0
    OcrPredictImageFileResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        result:
          type: array
          items:
            type: object
            properties:
              input:
                type: string
                example: string
              message:
                type: string
                example: Success
              prediction:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: category1
                    ocr_text:
                      type: string
                      example: string
                    score:
                      type: number
                      example: 0.9
                    xmax:
                      type: number
                      example: 100
                    xmin:
                      type: number
                      example: 0
                    ymax:
                      type: number
                      example: 100
                    ymin:
                      type: number
                      example: 0
                    cells:
                      type: array
                      items:
                        type: object
                        properties:
                          col:
                            type: number
                            example: 1
                          col_span:
                            type: number
                            example: 1
                          label:
                            type: string
                            example: col 1
                          row:
                            type: number
                            example: 1
                          row_span:
                            type: number
                            example: 1
                          score:
                            type: number
                            example: 99.99
                          text:
                            type: string
                            example: ocr text 1
                          xmax:
                            type: number
                            example: 258
                          xmin:
                            type: number
                            example: 159
                          ymax:
                            type: number
                            example: 1357
                          ymin:
                            type: number
                            example: 1258
                    type:
                      type: string
                      example: table
      example:
        message: Success
        result:
          - input: string
            message: Success
            prediction:
              - label: category1
                ocr_text: string
                score: 0.9
                xmax: 100
                xmin: 0
                ymax: 100
                ymin: 0
              - cells:
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 1
                    xmax: 258
                    xmin: 159
                    ymax: 1357
                    ymin: 1258
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 2
                    xmax: 380
                    xmin: 258
                    ymax: 1357
                    ymin: 1258
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 2
                    row_span: 1
                    score: 99.99
                    text: ocr text 3
                    xmax: 258
                    xmin: 159
                    ymax: 1439
                    ymin: 1357
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 2
                    row_span: 1
                    score: 99.99902
                    text: ocr text 4
                    xmax: 380
                    xmin: 258
                    ymax: 1439
                    ymin: 1357
                label: ''
                ocr_text: table 1
                score: 99.99
                type: table
                xmax: 380
                xmin: 159
                ymax: 1439
                ymin: 1258
    OcrPredictImageUrlsPostResponse:
      type: object
      properties:
        message:
          type: string
          example: Success
        result:
          type: array
          items:
            type: object
            properties:
              input:
                type: string
                example: string
              message:
                type: string
                example: Success
              prediction:
                type: array
                items:
                  type: object
                  properties:
                    label:
                      type: string
                      example: category1
                    ocr_text:
                      type: string
                      example: string
                    score:
                      type: number
                      example: 0.9
                    xmax:
                      type: number
                      example: 100
                    xmin:
                      type: number
                      example: 0
                    ymax:
                      type: number
                      example: 100
                    ymin:
                      type: number
                      example: 0
                    cells:
                      type: array
                      items:
                        type: object
                        properties:
                          col:
                            type: number
                            example: 1
                          col_span:
                            type: number
                            example: 1
                          label:
                            type: string
                            example: col 1
                          row:
                            type: number
                            example: 1
                          row_span:
                            type: number
                            example: 1
                          score:
                            type: number
                            example: 99.99
                          text:
                            type: string
                            example: ocr text 1
                          xmax:
                            type: number
                            example: 258
                          xmin:
                            type: number
                            example: 159
                          ymax:
                            type: number
                            example: 1357
                          ymin:
                            type: number
                            example: 1258
                    type:
                      type: string
                      example: table
      example:
        message: Success
        result:
          - input: string
            message: Success
            prediction:
              - label: category1
                ocr_text: string
                score: 0.9
                xmax: 100
                xmin: 0
                ymax: 100
                ymin: 0
              - cells:
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 1
                    xmax: 258
                    xmin: 159
                    ymax: 1357
                    ymin: 1258
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 1
                    row_span: 1
                    score: 99.99
                    text: ocr text 2
                    xmax: 380
                    xmin: 258
                    ymax: 1357
                    ymin: 1258
                  - col: 1
                    col_span: 1
                    label: col 1
                    row: 2
                    row_span: 1
                    score: 99.99
                    text: ocr text 3
                    xmax: 258
                    xmin: 159
                    ymax: 1439
                    ymin: 1357
                  - col: 2
                    col_span: 1
                    label: col 2
                    row: 2
                    row_span: 1
                    score: 99.99902
                    text: ocr text 4
                    xmax: 380
                    xmin: 258
                    ymax: 1439
                    ymin: 1357
                label: ''
                ocr_text: table 1
                score: 99.99
                type: table
                xmax: 380
                xmin: 159
                ymax: 1439
                ymin: 1258
    OcrTrainModelResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              count:
                type: number
                example: 0
              name:
                type: string
                example: category1
        model_id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        model_type:
          type: string
          example: ocr
        state:
          type: number
          example: 0
      example:
        categories:
          - count: 0
            name: category1
          - count: 0
            name: category2
        model_id: 00000000-0000-0000-0000-000000000000
        model_type: ocr
        state: 0
    OcrUploadTrainingImagesFileResponse:
      type: object
      properties:
        Data:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: example.jpeg
              id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
              object:
                type: array
                items:
                  type: object
                  properties:
                    bndbox:
                      type: object
                      properties:
                        xmax:
                          type: number
                          example: 100
                        xmin:
                          type: number
                          example: 1
                        ymax:
                          type: number
                          example: 100
                        ymin:
                          type: number
                          example: 1
                    name:
                      type: string
                      example: category1
              size:
                type: object
                properties:
                  height:
                    type: number
                    example: 1024
                  width:
                    type: number
                    example: 1024
        Meta:
          type: object
          properties:
            Accuracy:
              type: number
              example: 0
            Categories:
              type: array
              items:
                type: object
                properties:
                  count:
                    type: number
                    example: 0
                  name:
                    type: string
                    example: category1
            ModelID:
              type: string
              example: 00000000-0000-0000-0000-000000000000
            ModelType:
              type: string
              example: localization
            State:
              type: number
              example: 0
            Status:
              type: string
              example: Current Status
      example:
        Data:
          - filename: example.jpeg
            id: 00000000-0000-0000-0000-000000000000X
            object:
              - bndbox:
                  xmax: 100
                  xmin: 1
                  ymax: 100
                  ymin: 1
                name: category1
            size:
              height: 1024
              width: 1024
        Meta:
          Accuracy: 0
          Categories:
            - count: 0
              name: category1
            - count: 0
              name: category2
          ModelID: 00000000-0000-0000-0000-000000000000
          ModelType: localization
          State: 0
          Status: Current Status
    OcrUploadTrainingImagesByUrlResponse:
      type: object
      properties:
        Data:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
                example: example.jpeg
              id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
              object:
                type: array
                items:
                  type: object
                  properties:
                    bndbox:
                      type: object
                      properties:
                        xmax:
                          type: number
                          example: 100
                        xmin:
                          type: number
                          example: 1
                        ymax:
                          type: number
                          example: 100
                        ymin:
                          type: number
                          example: 1
                    name:
                      type: string
                      example: category1
                    ocr_text:
                      type: string
                      example: text inside the bounding box
              size:
                type: object
                properties:
                  height:
                    type: number
                    example: 1024
                  width:
                    type: number
                    example: 1024
        Meta:
          type: object
          properties:
            Accuracy:
              type: number
              example: 0
            Categories:
              type: array
              items:
                type: object
                properties:
                  count:
                    type: number
                    example: 0
                  name:
                    type: string
                    example: category1
            ModelID:
              type: string
              example: 00000000-0000-0000-0000-000000000000
            ModelType:
              type: string
              example: ocr
            State:
              type: number
              example: 0
            Status:
              type: string
              example: Current Status
      example:
        Data:
          - filename: example.jpeg
            id: 00000000-0000-0000-0000-000000000000X
            object:
              - bndbox:
                  xmax: 100
                  xmin: 1
                  ymax: 100
                  ymin: 1
                name: category1
                ocr_text: text inside the bounding box
            size:
              height: 1024
              width: 1024
        Meta:
          Accuracy: 0
          Categories:
            - count: 0
              name: category1
            - count: 0
              name: category2
          ModelID: 00000000-0000-0000-0000-000000000000
          ModelType: ocr
          State: 0
          Status: Current Status
x-tagGroups:
  - tags:
      - OCR Model
      - OCR Upload
      - OCR Train
      - OCR Predict
    name: OCR
  - tags:
      - Get Full Text
    name: Free Full Text OCR
  - tags:
      - Image Classification Model
      - Image Classification Model Upload
      - Image Classification Model Train
      - Image Classification Model Predict
    name: Image Classification
