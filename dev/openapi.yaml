openapi: 3.0.3
info:
  title: Forem API V1
  description: |-
    Access Forem articles, users and other resources via API.
            For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
            All endpoints can be accessed with the 'api-key' header and a accept header, but
            some of them are accessible publicly without authentication.

            Dates and date times, unless otherwise specified, must be in
            the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
  version: 1.0.0
  x-konfig-ignore:
    object-with-no-properties: true
    potential-incorrect-type: true
servers:
  - description: Production server
    url: https://dev.to/api
tags:
  - name: users
  - name: articles
  - name: organizations
  - name: segments
  - name: billboards
  - name: pages
  - name: comments
  - name: tags
  - name: reactions
  - name: followed_tags
  - name: followers
  - name: podcast_episodes
  - name: profile images
  - name: readinglist
  - name: videos
paths:
  /api/articles:
    post:
      tags:
        - articles
      summary: Publish article
      operationId: Articles_createNewArticle
      description: >-
        This endpoint allows the client to create a new article.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '201':
          description: An Article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCreateNewArticleResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCreateNewArticle401Response'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCreateNewArticle422Response'
    get:
      tags:
        - articles
      summary: Published articles
      operationId: Articles_listPublishedArticles
      security: []
      description: |-
        This endpoint allows the client to retrieve a list of articles.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        By default it will return featured, published articles ordered
        by descending popularity.

        It supports pagination, each page will contain `30` articles by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
        - description: >-
            Using this parameter will retrieve articles that contain the
            requested tag. Articles

            will be ordered by descending popularity.This parameter can be used
            in conjuction with `top`.
          name: tag
          in: query
          required: false
          schema:
            type: string
          example: discuss
        - description: >-
            Using this parameter will retrieve articles with any of the
            comma-separated tags.

            Articles will be ordered by descending popularity.
          name: tags
          in: query
          required: false
          schema:
            type: string
          example: javascript, css
        - description: >-
            Using this parameter will retrieve articles that do _not_ contain
            _any_

            of comma-separated tags. Articles will be ordered by descending
            popularity.
          name: tags_exclude
          in: query
          required: false
          schema:
            type: string
          example: node, java
        - description: |-
            Using this parameter will retrieve articles belonging
                        to a User or Organization ordered by descending publication date.
                        If `state=all` the number of items returned will be `1000` instead of the default `30`.
                        This parameter can be used in conjuction with `state`.
          name: username
          in: query
          required: false
          schema:
            type: string
          example: ben
        - description: >-
            Using this parameter will allow the client to check which articles
            are fresh or rising.
                        If `state=fresh` the server will return fresh articles.
                        If `state=rising` the server will return rising articles.
                        This param can be used in conjuction with `username`, only if set to `all`.
          name: state
          in: query
          required: false
          schema:
            type: string
            enum:
              - fresh
              - rising
              - all
          example: fresh
        - description: >-
            Using this parameter will allow the client to return the most
            popular articles

            in the last `N` days.

            `top` indicates the number of days since publication of the articles
            returned.

            This param can be used in conjuction with `tag`.
          name: top
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 2
        - description: >-
            Adding this will allow the client to return the list of articles

            belonging to the requested collection, ordered by ascending
            publication date.
          name: collection_id
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 99
      responses:
        '200':
          description: A List of Articles
          content:
            application/json:
              example:
                - tags: discuss
                  title: Let Us Now Praise Famous Men4
                  description: >-
                    Street yr raw denim master. Twee vice selvage neutra. 
                    Single-origin coffee crucifix franzen lo-fi...
                  type_of: article
                  id: 5
                  readable_publish_date: Dec 15
                  slug: let-us-now-praise-famous-men4-1oj7
                  path: /username6/let-us-now-praise-famous-men4-1oj7
                  url: >-
                    http://forem.test/username6/let-us-now-praise-famous-men4-1oj7
                  comments_count: 0
                  public_reactions_count: 0
                  collection_id: null
                  published_timestamp: '2023-12-15T00:15:28Z'
                  positive_reactions_count: 0
                  cover_image: >-
                    http://forem.test/assets/8-915172672c34364d29c3fce07afa413c1ac072beff54ddd79fc7e3ed633556a1.png
                  social_image: >-
                    http://forem.test/assets/8-915172672c34364d29c3fce07afa413c1ac072beff54ddd79fc7e3ed633556a1.png
                  canonical_url: >-
                    http://forem.test/username6/let-us-now-praise-famous-men4-1oj7
                  created_at: '2023-12-15T00:15:28Z'
                  edited_at: null
                  crossposted_at: null
                  published_at: '2023-12-15T00:15:28Z'
                  last_comment_at: '2023-12-15T00:15:28Z'
                  reading_time_minutes: 1
                  tag_list:
                    - discuss
                  user:
                    name: Lanette "Marine" \:/ Stanton
                    username: username6
                    twitter_username: twitter6
                    github_username: github6
                    user_id: 886
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/886/e13bee17-64f8-43d8-9cdb-ba17c28cbdb4.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/886/e13bee17-64f8-43d8-9cdb-ba17c28cbdb4.jpeg
                  organization:
                    name: Spinka and Sons
                    username: org4
                    slug: org4
                    profile_image: >-
                      /uploads/organization/profile_image/4/f1003659-a58c-4019-89d1-24817528626a.png
                    profile_image_90: >-
                      /uploads/organization/profile_image/4/f1003659-a58c-4019-89d1-24817528626a.png
                  flare_tag:
                    name: discuss
                    bg_color_hex: '#000000'
                    text_color_hex: '#ffffff'
              schema:
                $ref: '#/components/schemas/ArticlesListPublishedArticlesResponse'
  /api/articles/latest:
    get:
      tags:
        - articles
      summary: Published articles sorted by published date
      operationId: Articles_listLatestPublished
      security: []
      description: >-
        This endpoint allows the client to retrieve a list of articles. ordered
        by descending publish date.


        It supports pagination, each page will contain 30 articles by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of Articles
          content:
            application/json:
              example:
                - tags: javascript, html, discuss
                  title: Precious Bane7
                  description: >-
                    Etsy green juice trust fund irony sriracha bushwick
                    flexitarian pickled. Blog kitsch...
                  type_of: article
                  id: 8
                  readable_publish_date: Dec 15
                  slug: precious-bane7-31i9
                  path: /username9/precious-bane7-31i9
                  url: http://forem.test/username9/precious-bane7-31i9
                  comments_count: 0
                  public_reactions_count: 0
                  collection_id: null
                  published_timestamp: '2023-12-15T00:15:28Z'
                  positive_reactions_count: 0
                  cover_image: >-
                    http://forem.test/assets/29-62fdba2773105cf85b89a795a479be680d13a73e6b5406cacaa2458d403dda8c.png
                  social_image: >-
                    http://forem.test/assets/29-62fdba2773105cf85b89a795a479be680d13a73e6b5406cacaa2458d403dda8c.png
                  canonical_url: http://forem.test/username9/precious-bane7-31i9
                  created_at: '2023-12-15T00:15:28Z'
                  edited_at: null
                  crossposted_at: null
                  published_at: '2023-12-15T00:15:28Z'
                  last_comment_at: '2023-12-15T00:15:28Z'
                  reading_time_minutes: 1
                  tag_list:
                    - javascript
                    - html
                    - discuss
                  user:
                    name: Bobette "Ling" \:/ Kuvalis
                    username: username9
                    twitter_username: twitter9
                    github_username: github9
                    user_id: 889
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/889/114ac38d-7b97-41d5-9668-c44b27fa8fa1.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/889/114ac38d-7b97-41d5-9668-c44b27fa8fa1.jpeg
                  flare_tag:
                    name: discuss
                    bg_color_hex: '#000000'
                    text_color_hex: '#ffffff'
                - tags: javascript, html, discuss
                  title: Cover Her Face6
                  description: >-
                    Park aesthetic tattooed godard post-ironic wolf beard
                    cold-pressed. Tumblr authentic roof readymade...
                  type_of: article
                  id: 7
                  readable_publish_date: Dec 15
                  slug: cover-her-face6-12p3
                  path: /username8/cover-her-face6-12p3
                  url: http://forem.test/username8/cover-her-face6-12p3
                  comments_count: 0
                  public_reactions_count: 0
                  collection_id: null
                  published_timestamp: '2023-12-15T00:15:28Z'
                  positive_reactions_count: 0
                  cover_image: >-
                    http://forem.test/assets/25-b4bb206b62bee552880440f638594e41dcd649ed9bd821af2e8dfc671d1d6813.png
                  social_image: >-
                    http://forem.test/assets/25-b4bb206b62bee552880440f638594e41dcd649ed9bd821af2e8dfc671d1d6813.png
                  canonical_url: http://forem.test/username8/cover-her-face6-12p3
                  created_at: '2023-12-15T00:15:28Z'
                  edited_at: null
                  crossposted_at: null
                  published_at: '2023-12-15T00:15:28Z'
                  last_comment_at: '2023-12-15T00:15:28Z'
                  reading_time_minutes: 1
                  tag_list:
                    - javascript
                    - html
                    - discuss
                  user:
                    name: Karen "Nakia" \:/ Lockman
                    username: username8
                    twitter_username: twitter8
                    github_username: github8
                    user_id: 888
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/888/bb690b36-2309-455f-81f4-98b4ec247427.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/888/bb690b36-2309-455f-81f4-98b4ec247427.jpeg
                  flare_tag:
                    name: discuss
                    bg_color_hex: '#000000'
                    text_color_hex: '#ffffff'
                - tags: javascript, html, discuss
                  title: I Know Why the Caged Bird Sings5
                  description: >-
                    Carry meh farm-to-table. Fanny pack before they sold out
                    normcore fingerstache disrupt church-key...
                  type_of: article
                  id: 6
                  readable_publish_date: Dec 15
                  slug: i-know-why-the-caged-bird-sings5-393f
                  path: /username7/i-know-why-the-caged-bird-sings5-393f
                  url: >-
                    http://forem.test/username7/i-know-why-the-caged-bird-sings5-393f
                  comments_count: 0
                  public_reactions_count: 0
                  collection_id: null
                  published_timestamp: '2023-12-15T00:15:28Z'
                  positive_reactions_count: 0
                  cover_image: >-
                    http://forem.test/assets/7-7dc75c1a59875db65e2539f321090f6cb232c3dbffdbe4367b0d32b8f2797758.png
                  social_image: >-
                    http://forem.test/assets/7-7dc75c1a59875db65e2539f321090f6cb232c3dbffdbe4367b0d32b8f2797758.png
                  canonical_url: >-
                    http://forem.test/username7/i-know-why-the-caged-bird-sings5-393f
                  created_at: '2023-12-15T00:15:28Z'
                  edited_at: null
                  crossposted_at: null
                  published_at: '2023-12-15T00:15:28Z'
                  last_comment_at: '2023-12-15T00:15:28Z'
                  reading_time_minutes: 1
                  tag_list:
                    - javascript
                    - html
                    - discuss
                  user:
                    name: Darby "Damian" \:/ Quitzon
                    username: username7
                    twitter_username: twitter7
                    github_username: github7
                    user_id: 887
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/887/9e09ae0d-d45e-46e6-bcab-3b65ffef6c4d.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/887/9e09ae0d-d45e-46e6-bcab-3b65ffef6c4d.jpeg
                  flare_tag:
                    name: discuss
                    bg_color_hex: '#000000'
                    text_color_hex: '#ffffff'
              schema:
                $ref: '#/components/schemas/ArticlesListLatestPublishedResponse'
  /api/articles/{id}:
    get:
      tags:
        - articles
      summary: Published article by id
      operationId: Articles_getById
      security: []
      description: >-
        This endpoint allows the client to retrieve a single published article
        given its `id`.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An Article
          content:
            application/json:
              example:
                tags:
                  - discuss
                title: It's a Battlefield8
                description: >-
                  Venmo slow-carb vhs ugh cronut crucifix. Freegan hella hammock
                  helvetica you probably haven't heard...
                type_of: article
                id: 9
                readable_publish_date: Dec 15
                slug: its-a-battlefield8-2af
                path: /username10/its-a-battlefield8-2af
                url: http://forem.test/username10/its-a-battlefield8-2af
                comments_count: 0
                public_reactions_count: 0
                collection_id: null
                published_timestamp: '2023-12-15T00:15:28Z'
                positive_reactions_count: 0
                cover_image: >-
                  http://forem.test/assets/14-5e64731cc7cd63e3b689647d9d3c3e4e1d907690c716d3dd1e356466726a2c2d.png
                social_image: >-
                  http://forem.test/assets/14-5e64731cc7cd63e3b689647d9d3c3e4e1d907690c716d3dd1e356466726a2c2d.png
                canonical_url: http://forem.test/username10/its-a-battlefield8-2af
                created_at: '2023-12-15T00:15:28Z'
                edited_at: null
                crossposted_at: null
                published_at: '2023-12-15T00:15:28Z'
                last_comment_at: '2023-12-15T00:15:28Z'
                reading_time_minutes: 1
                tag_list: discuss
                body_html: >+
                  <p>Venmo slow-carb vhs ugh cronut crucifix. Freegan hella
                  hammock helvetica you probably haven't heard of them try-hard.
                  Humblebrag iphone fashion axe small batch flexitarian
                  fixie.</p>


                  <p>Neutra cliche occupy trust fund actually. Heirloom vinyl
                  vice freegan. Pbr&amp;b whatever organic dreamcatcher
                  kickstarter pork belly authentic.</p>

                body_markdown: >+
                  ---

                  title: It's a Battlefield8

                  published: true

                  tags: discuss

                  date: 

                  series: 

                  canonical_url: 


                  ---


                  Venmo slow-carb vhs ugh cronut crucifix. Freegan hella hammock
                  helvetica you probably haven't heard of them try-hard.
                  Humblebrag iphone fashion axe small batch flexitarian fixie.



                  Neutra cliche occupy trust fund actually. Heirloom vinyl vice
                  freegan. Pbr&b whatever organic dreamcatcher kickstarter pork
                  belly authentic.

                user:
                  name: Raylene "Romana" \:/ Bailey
                  username: username10
                  twitter_username: twitter10
                  github_username: github10
                  user_id: 890
                  website_url: null
                  profile_image: >-
                    /uploads/user/profile_image/890/f6fe914d-9deb-461c-bb67-2f8af4957a89.jpeg
                  profile_image_90: >-
                    /uploads/user/profile_image/890/f6fe914d-9deb-461c-bb67-2f8af4957a89.jpeg
                flare_tag:
                  name: discuss
                  bg_color_hex: '#000000'
                  text_color_hex: '#ffffff'
              schema:
                $ref: '#/components/schemas/ArticlesGetByIdResponse'
        '404':
          description: Article Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetById404Response'
    put:
      tags:
        - articles
      summary: Update an article by id
      operationId: Articles_updateById
      description: >-
        This endpoint allows the client to update an existing article.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.
      parameters:
        - description: The ID of the user to unpublish.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: An Article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateById401Response'
        '404':
          description: Article Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateById404Response'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateById422Response'
  /api/articles/{username}/{slug}:
    get:
      tags:
        - articles
      summary: Published article by path
      operationId: Articles_getByPath
      security: []
      description: >-
        This endpoint allows the client to retrieve a single published article
        given its `path`.
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An Article
          content:
            application/json:
              example:
                tags:
                  - discuss
                title: Far From the Madding Crowd12
                description: >-
                  3 wolf moon asymmetrical mumblecore put a bird on it tilde
                  yolo mustache crucifix. Heirloom scenester...
                type_of: article
                id: 13
                readable_publish_date: Dec 15
                slug: far-from-the-madding-crowd12-1m5d
                path: /username15/far-from-the-madding-crowd12-1m5d
                url: http://forem.test/username15/far-from-the-madding-crowd12-1m5d
                comments_count: 0
                public_reactions_count: 0
                collection_id: null
                published_timestamp: '2023-12-15T00:15:29Z'
                positive_reactions_count: 0
                cover_image: >-
                  http://forem.test/assets/2-1a96ae446ded018b65b215cce3aecc40a00e701642da521fdd6edd3c593ff6c1.png
                social_image: >-
                  http://forem.test/assets/2-1a96ae446ded018b65b215cce3aecc40a00e701642da521fdd6edd3c593ff6c1.png
                canonical_url: http://forem.test/username15/far-from-the-madding-crowd12-1m5d
                created_at: '2023-12-15T00:15:29Z'
                edited_at: null
                crossposted_at: null
                published_at: '2023-12-15T00:15:29Z'
                last_comment_at: '2023-12-15T00:15:29Z'
                reading_time_minutes: 1
                tag_list: discuss
                body_html: >+
                  <p>3 wolf moon asymmetrical mumblecore put a bird on it tilde
                  yolo mustache crucifix. Heirloom scenester crucifix pickled
                  skateboard. Synth 8-bit flexitarian typewriter banjo. Crucifix
                  synth wayfarers humblebrag locavore vice brooklyn organic.</p>


                  <p>Microdosing cronut muggle magic authentic carry. Occupy
                  kombucha synth celiac food truck you probably haven't heard of
                  them.</p>

                body_markdown: >+
                  ---

                  title: Far From the Madding Crowd12

                  published: true

                  tags: discuss

                  date: 

                  series: 

                  canonical_url: 


                  ---


                  3 wolf moon asymmetrical mumblecore put a bird on it tilde
                  yolo mustache crucifix. Heirloom scenester crucifix pickled
                  skateboard. Synth 8-bit flexitarian typewriter banjo. Crucifix
                  synth wayfarers humblebrag locavore vice brooklyn organic.



                  Microdosing cronut muggle magic authentic carry. Occupy
                  kombucha synth celiac food truck you probably haven't heard of
                  them.

                user:
                  name: Noreen "Alvaro" \:/ Schinner
                  username: username15
                  twitter_username: twitter15
                  github_username: github15
                  user_id: 895
                  website_url: null
                  profile_image: >-
                    /uploads/user/profile_image/895/9e4706ef-d56d-4167-9355-1a3db85801e1.jpeg
                  profile_image_90: >-
                    /uploads/user/profile_image/895/9e4706ef-d56d-4167-9355-1a3db85801e1.jpeg
                flare_tag:
                  name: discuss
                  bg_color_hex: '#000000'
                  text_color_hex: '#ffffff'
              schema:
                $ref: '#/components/schemas/ArticlesGetByPathResponse'
        '404':
          description: Article Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetByPath404Response'
  /api/articles/me:
    get:
      tags:
        - articles
        - users
      summary: User's articles
      operationId: Articles_getPublishedList
      description: >-
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.


        Published articles will be in reverse chronological publication order.


        It will return published articles with pagination. By default a page
        will contain 30 articles.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of the authenticated user's Articles
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/ArticlesGetPublishedListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetPublishedList401Response'
  /api/articles/me/published:
    get:
      tags:
        - articles
        - users
      summary: User's published articles
      operationId: Articles_getPublishedList
      description: >-
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.


        Published articles will be in reverse chronological publication order.


        It will return published articles with pagination. By default a page
        will contain 30 articles.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of the authenticated user's Articles
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/ArticlesGetPublishedList200Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetPublishedList401Response'
  /api/articles/me/unpublished:
    get:
      tags:
        - articles
        - users
      summary: User's unpublished articles
      operationId: Articles_getUnpublishedList
      description: >-
        This endpoint allows the client to retrieve a list of unpublished
        articles on behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.


        Unpublished articles will be in reverse chronological creation order.


        It will return unpublished articles with pagination. By default a page
        will contain 30 articles.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of the authenticated user's Articles
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/ArticlesGetUnpublishedListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetUnpublishedList401Response'
  /api/articles/me/all:
    get:
      tags:
        - articles
        - users
      summary: User's all articles
      operationId: Articles_getAllUserArticles
      description: >-
        This endpoint allows the client to retrieve a list of all articles on
        behalf of an authenticated user.


        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question, a
        help thread etc. but is referred to as article within the code.


        It will return both published and unpublished articles with pagination.


        Unpublished articles will be at the top of the list in reverse
        chronological creation order. Published articles will follow in reverse
        chronological publication order.


        By default a page will contain 30 articles.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of the authenticated user's Articles
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/ArticlesGetAllUserArticlesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesGetAllUserArticles401Response'
  /api/articles/{id}/unpublish:
    put:
      tags:
        - articles
      summary: Unpublish an article
      operationId: Articles_unpublishById
      description: >-
        This endpoint allows the client to unpublish an article.


        The user associated with the API key must have any 'admin' or
        'moderator' role.


        The article will be unpublished and will no longer be visible to the
        public. It will remain

        in the database and will set back to draft status on the author's posts
        dashboard. Any

        notifications associated with the article will be deleted. Any comments
        on the article

        will remain.
      parameters:
        - description: The ID of the article to unpublish.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
        - description: Content for the note that's created along with unpublishing
          name: note
          in: query
          required: false
          schema:
            type: string
          example: Admin requested unpublishing all articles via API
      responses:
        '204':
          description: Article successfully unpublished
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUnpublishByIdResponse'
        '404':
          description: Article Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUnpublishById404Response'
  /api/segments:
    get:
      tags:
        - segments
      summary: Manually managed audience segments
      operationId: Segments_listAudienceSegments
      description: >-
        This endpoint allows the client to retrieve a list of audience segments.


        An audience segment is a group of users that can be targeted by a
        Billboard. This API only permits managing segments you create and
        maintain yourself.


        The endpoint supports pagination, and each page will contain `30`
        segments by default.
      parameters:
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of manually managed audience segments
          content:
            application/json:
              example:
                - id: 2
                  created_at: '2023-12-15T11:15:30.398+11:00'
                  type_of: manual
                  updated_at: '2023-12-15T11:15:30.398+11:00'
                  user_count: 1
                - id: 1
                  created_at: '2023-12-15T11:15:30.308+11:00'
                  type_of: manual
                  updated_at: '2023-12-15T11:15:30.308+11:00'
                  user_count: 3
              schema:
                $ref: '#/components/schemas/SegmentsListAudienceSegmentsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsListAudienceSegments401Response'
    post:
      tags:
        - segments
      summary: Create a manually managed audience segment
      operationId: Segments_createManuallyManagedSegment
      description: >-
        This endpoint allows the client to create a new audience segment.


        An audience segment is a group of users that can be targeted by a
        Billboard. This API only permits managing segments you create and
        maintain yourself.
      responses:
        '201':
          description: A manually managed audience segment
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsCreateManuallyManagedSegmentResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsCreateManuallyManagedSegment401Response
  /api/segments/{id}:
    get:
      tags:
        - segments
      summary: A manually managed audience segment
      operationId: Segments_getById
      description: >-
        This endpoint allows the client to retrieve a single manually-managed
        audience segment specified by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: The audience segment
          content:
            application/json:
              example:
                id: 4
                created_at: '2023-12-15T11:15:30.937+11:00'
                type_of: manual
                updated_at: '2023-12-15T11:15:30.937+11:00'
                user_count: 3
              schema:
                $ref: '#/components/schemas/SegmentsGetByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsGetById401Response'
        '404':
          description: Audience Segment Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsGetById404Response'
    delete:
      tags:
        - segments
      summary: Delete a manually managed audience segment
      operationId: Segments_deleteManuallyManagedSegment
      description: >-
        This endpoint allows the client to delete an audience segment specified
        by ID.


        Audience segments cannot be deleted if there are still any Billboards
        using them.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: The deleted audience segment
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsDeleteManuallyManagedSegmentResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsDeleteManuallyManagedSegment401Response
        '404':
          description: Audience Segment Not Found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsDeleteManuallyManagedSegment404Response
        '409':
          description: Audience segment could not be deleted
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SegmentsDeleteManuallyManagedSegment409Response
  /api/segments/{id}/users:
    get:
      tags:
        - segments
      summary: Users in a manually managed audience segment
      operationId: Segments_getUserListInSegment
      description: >-
        This endpoint allows the client to retrieve a list of the users in an
        audience segment specified by ID. The endpoint supports pagination, and
        each page will contain `30` users by default.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A List of users in the audience segment
          content:
            application/json:
              example:
                - summary: null
                  type_of: user
                  id: 935
                  username: username55
                  name: Douglas "Ervin" \:/ Homenick
                  twitter_username: twitter55
                  github_username: github55
                  location: null
                  website_url: null
                  joined_at: Dec 15, 2023
                  profile_image: >-
                    /uploads/user/profile_image/935/f305ebc2-4b79-4bd2-8cf3-068dce1744f1.jpeg
                - summary: null
                  type_of: user
                  id: 936
                  username: username56
                  name: Cheree "Brandon" \:/ Kilback
                  twitter_username: twitter56
                  github_username: github56
                  location: null
                  website_url: null
                  joined_at: Dec 15, 2023
                  profile_image: >-
                    /uploads/user/profile_image/936/c39ca408-c6f0-4812-b69e-98ac37b03526.jpeg
                - summary: null
                  type_of: user
                  id: 937
                  username: username57
                  name: Reta "Janetta" \:/ Heathcote
                  twitter_username: twitter57
                  github_username: github57
                  location: null
                  website_url: null
                  joined_at: Dec 15, 2023
                  profile_image: >-
                    /uploads/user/profile_image/937/d2b7e4ec-9c26-401f-83dc-18852e2d5617.jpeg
              schema:
                $ref: '#/components/schemas/SegmentsGetUserListInSegmentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsGetUserListInSegment401Response'
        '404':
          description: Audience Segment Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsGetUserListInSegment404Response'
  /api/segments/{id}/add_users:
    put:
      tags:
        - segments
      summary: Add users to a manually managed audience segment
      operationId: Segments_addUsersToSegment
      description: >-
        This endpoint allows the client to add users in bulk to an audience
        segment specified by ID.


        Successes are users that were included in the segment (even if they were
        already in it), and failures are users that could not be added to the
        segment.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SegmentUserIds'
      responses:
        '200':
          description: Result of adding the users to the segment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsAddUsersToSegmentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsAddUsersToSegment401Response'
        '404':
          description: Audience Segment Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsAddUsersToSegment404Response'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsAddUsersToSegment422Response'
  /api/segments/{id}/remove_users:
    put:
      tags:
        - segments
      summary: Remove users from a manually managed audience segment
      operationId: Segments_removeUsersFromSegment
      description: >-
        This endpoint allows the client to remove users in bulk from an audience
        segment specified by ID.


        Successes are users that were removed; failures are users that weren't a
        part of the segment.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SegmentUserIds'
      responses:
        '200':
          description: Result of removing the users to the segment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsRemoveUsersFromSegmentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsRemoveUsersFromSegment401Response'
        '404':
          description: Audience Segment Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsRemoveUsersFromSegment404Response'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentsRemoveUsersFromSegment422Response'
  /api/billboards:
    get:
      tags:
        - billboards
      summary: Billboards
      operationId: Billboards_getList
      description: This endpoint allows the client to retrieve a list of all billboards.
      responses:
        '200':
          description: successful
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/BillboardsGetListResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsGetList401Response'
    post:
      tags:
        - billboards
      summary: Create a billboard
      operationId: Billboards_createNewBillboard
      description: This endpoint allows the client to create a new billboard.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillboardsCreateNewBillboardRequest'
      responses:
        '201':
          description: A billboard
          content:
            application/json:
              example:
                id: 2
                approved: true
                audience_segment_id: null
                body_markdown: |-
                  # Hi, this is ad
                  Yep, it's an ad
                cached_tag_list: ''
                clicks_count: 0
                created_at: '2023-12-15T11:15:34.267+11:00'
                creator_id: null
                custom_display_label: null
                display_to: all
                exclude_article_ids: ''
                impressions_count: 0
                name: Example Billboard
                organization_id: null
                placement_area: post_comments
                priority: false
                processed_html: >-
                  <h1>  <a name="hi-this-is-ad" href="#hi-this-is-ad">  </a> 
                  Hi, this is ad</h1><p>Yep, it's an ad</p>
                published: true
                render_mode: forem_markdown
                success_rate: 0
                template: authorship_box
                type_of: in_house
                updated_at: '2023-12-15T11:15:34.267+11:00'
                weight: 1
                audience_segment_type: null
                tag_list: ''
                target_geolocations:
                  - US-WA
                  - CA-BC
              schema:
                $ref: '#/components/schemas/BillboardsCreateNewBillboardResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsCreateNewBillboard401Response'
        '422':
          description: unprocessable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsCreateNewBillboard422Response'
  /api/billboards/{id}:
    get:
      tags:
        - billboards
      summary: A billboard (by id)
      operationId: Billboards_getById
      description: >-
        This endpoint allows the client to retrieve a single billboard, via its
        id.
      parameters:
        - description: The ID of the billboard.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 123
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsGetByIdResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsGetById401Response'
        '404':
          description: Unknown Billboard ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsGetById404Response'
    put:
      tags:
        - billboards
      summary: Update a billboard by ID
      operationId: Billboards_updateById
      description: >-
        This endpoint allows the client to update the attributes of a single
        billboard, via its id.
      parameters:
        - description: The ID of the billboard.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillboardsUpdateByIdRequest'
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                approved: false
                body_markdown: Hello _hey_ Hey hey 3
                creator_id: null
                display_to: all
                name: Billboard 4
                organization_id: 7
                placement_area: sidebar_left
                published: false
                type_of: in_house
                exclude_article_ids: ''
                weight: 1
                audience_segment_id: null
                priority: false
                custom_display_label: null
                template: authorship_box
                render_mode: forem_markdown
                cached_tag_list: ''
                id: 4
                clicks_count: 0
                created_at: '2023-12-15T11:15:34.735+11:00'
                impressions_count: 0
                processed_html: <p>Hello <em>hey</em> Hey hey 3</p>
                success_rate: 0
                updated_at: '2023-12-15T11:15:34.738+11:00'
                audience_segment_type: null
                tag_list: ''
                target_geolocations: []
              schema:
                $ref: '#/components/schemas/BillboardsUpdateByIdResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsUpdateById401Response'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsUpdateById404Response'
  /api/billboards/{id}/unpublish:
    put:
      tags:
        - billboards
      summary: Unpublish a billboard
      operationId: Billboards_unpublishBillboard
      description: >-
        This endpoint allows the client to remove a billboard from rotation by
        un-publishing it.
      parameters:
        - description: The ID of the billboard to unpublish.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 123
      responses:
        '204':
          description: no content
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsUnpublishBillboardResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillboardsUnpublishBillboard404Response'
  /api/comments:
    get:
      tags:
        - comments
      summary: Comments
      operationId: Comments_getAllThreaded
      security: []
      description: >
        This endpoint allows the client to retrieve all comments belonging to an
        article or podcast episode as threaded conversations.


        It will return the all top level comments with their nested comments as
        threads. See the format specification for further details.


        It supports pagination, each page will contain `50` top level comments
        (and as many child comments they have) by default.


        If the page parameter is not passed, all comments of an article or
        podcast will be returned.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
        - description: Article identifier.
          name: a_id
          in: query
          required: false
          schema:
            type: string
          example: '321'
        - description: Podcast Episode identifier.
          name: p_id
          in: query
          required: false
          schema:
            type: string
          example: '321'
        - description: Page
          name: page
          in: query
          required: false
          schema:
            type: string
          example: '321'
      responses:
        '200':
          description: A List of Comments
          content:
            application/json:
              example:
                - type_of: comment
                  id_code: '1'
                  created_at: '2023-12-15T00:15:35Z'
                  body_html: |+
                    <p>Poutine try-hard migas.</p>

                  user:
                    name: Denese "Adriene" \:/ Leffler
                    username: username121
                    twitter_username: twitter121
                    github_username: github121
                    user_id: 1001
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/1001/5e43495c-e279-4d6b-a6b9-3409c368d2f5.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/1001/5e43495c-e279-4d6b-a6b9-3409c368d2f5.jpeg
                  children: []
              schema:
                $ref: '#/components/schemas/CommentsGetAllThreadedResponse'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsGetAllThreaded404Response'
  /api/comments/{id}:
    get:
      tags:
        - comments
      summary: Comment by id
      operationId: Comments_getThreadedComment
      security: []
      description: >-
        This endpoint allows the client to retrieve a comment as well as his
        descendants comments.

          It will return the required comment (the root) with its nested descendants as a thread.

          See the format specification for further details.
      parameters:
        - description: Comment identifier.
          name: id
          in: path
          required: true
          schema:
            type: integer
          example: 321
      responses:
        '200':
          description: A List of the Comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsGetThreadedCommentResponse'
        '404':
          description: Comment Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsGetThreadedComment404Response'
  /api/follows/tags:
    get:
      tags:
        - followed_tags
        - tags
      summary: Followed Tags
      operationId: Followedtags_getTagList
      description: >-
        This endpoint allows the client to retrieve a list of the tags they
        follow.
      responses:
        '200':
          description: A List of followed tags
          content:
            application/json:
              example:
                - id: 46
                  name: tag3
                  points: 1
                - id: 47
                  name: tag4
                  points: 1
              schema:
                $ref: '#/components/schemas/FollowedtagsGetTagListResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedtagsGetTagList401Response'
  /api/followers/users:
    get:
      tags:
        - followers
      summary: Followers
      operationId: Followers_getList
      description: >-
        This endpoint allows the client to retrieve a list of the followers they
        have.
                "Followers" are users that are following other users on the website.
                It supports pagination, each page will contain 80 followers by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
        - description: >-
            Default is 'created_at'. Specifies the sort order for the created_at
            param of the follow
                                            relationship. To sort by newest followers first (descending order) specify
                                            ?sort=-created_at.
          name: sort
          in: query
          required: false
          schema:
            type: string
          example: created_at
      responses:
        '200':
          description: A List of followers
          content:
            application/json:
              example:
                - type_of: user_follower
                  id: 6
                  created_at: '2023-12-15T00:15:36Z'
                  user_id: 1012
                  name: Moises "Eddie" \:/ Johns
                  path: /username132
                  username: username132
                  profile_image: >-
                    /uploads/user/profile_image/1012/bdceff13-fec1-4040-8999-fda3de5d20ad.jpeg
                - type_of: user_follower
                  id: 5
                  created_at: '2023-12-15T00:15:36Z'
                  user_id: 1010
                  name: Bianca "Bryan" \:/ Turcotte
                  path: /username130
                  username: username130
                  profile_image: >-
                    /uploads/user/profile_image/1010/2a301706-4678-449a-95b9-75e71500015b.jpeg
              schema:
                $ref: '#/components/schemas/FollowersGetListResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersGetList401Response'
  /api/organizations/{username}:
    get:
      tags:
        - organizations
      summary: An organization (by username)
      operationId: Organizations_getByUsername
      security: []
      description: >-
        This endpoint allows the client to retrieve a single organization by
        their username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An Organization
          content:
            application/json:
              example:
                summary: >-
                  Biodiesel sustainable letterpress portland chartreuse.
                  Authentic post-ironic everyday skateboard franzen thundercats.
                type_of: organization
                id: 12
                username: org12
                name: Sporer Inc
                twitter_username: org2359
                github_username: org5109
                url: http://baumbach-smitham.net/lavonia_emard
                location: null
                tech_stack: null
                tag_line: null
                story: null
                joined_at: '2023-12-15T00:15:36Z'
                profile_image: >-
                  /uploads/organization/profile_image/12/f0728df4-7a41-474c-8675-aa2b31a8d84c.png
              schema:
                $ref: '#/components/schemas/OrganizationsGetByUsernameResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsGetByUsername404Response'
  /api/organizations/{organization_id_or_username}/users:
    get:
      tags:
        - organizations
        - users
      summary: Organization's users
      operationId: Organizations_listUsers
      security: []
      description: >-
        This endpoint allows the client to retrieve a list of users belonging to
        the organization


        It supports pagination, each page will contain `30` users by default.
      parameters:
        - name: organization_id_or_username
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: An Organization's users (with ID)
          content:
            application/json:
              example:
                - summary: null
                  type_of: user
                  id: 1025
                  username: username145
                  name: Lennie "Lacy" \:/ Jaskolski
                  twitter_username: twitter145
                  github_username: github145
                  location: null
                  website_url: null
                  joined_at: Dec 15, 2023
                  profile_image: >-
                    /uploads/user/profile_image/1025/6c6a3071-cc34-41fb-9a03-811eca66e09d.jpeg
                - summary: null
                  type_of: user
                  id: 1026
                  username: username146
                  name: Iva "Deon" \:/ Bernhard
                  twitter_username: twitter146
                  github_username: github146
                  location: null
                  website_url: null
                  joined_at: Dec 15, 2023
                  profile_image: >-
                    /uploads/user/profile_image/1026/08be477d-61b1-4140-b1af-0608ba9fc9cd.jpeg
              schema:
                $ref: '#/components/schemas/OrganizationsListUsersResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsListUsers404Response'
  /api/organizations/{organization_id_or_username}/articles:
    get:
      tags:
        - organizations
        - articles
      summary: Organization's Articles
      operationId: Organizations_listArticles
      security: []
      description: >-
        This endpoint allows the client to retrieve a list of Articles belonging
        to the organization


        It supports pagination, each page will contain `30` users by default.
      parameters:
        - name: organization_id_or_username
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: An Organization's Articles (with ID)
          content:
            application/json:
              example:
                - tags: javascript, html, discuss
                  title: To Say Nothing of the Dog26
                  description: >-
                    Readymade literally fanny pack squid slow-carb crucifix
                    mumblecore authentic. Kickstarter put a bird...
                  type_of: article
                  id: 27
                  readable_publish_date: Dec 15
                  slug: to-say-nothing-of-the-dog26-2oic
                  path: /org18/to-say-nothing-of-the-dog26-2oic
                  url: http://forem.test/org18/to-say-nothing-of-the-dog26-2oic
                  comments_count: 0
                  public_reactions_count: 0
                  collection_id: null
                  published_timestamp: '2023-12-15T00:15:37Z'
                  positive_reactions_count: 0
                  cover_image: >-
                    http://forem.test/assets/14-5e64731cc7cd63e3b689647d9d3c3e4e1d907690c716d3dd1e356466726a2c2d.png
                  social_image: >-
                    http://forem.test/assets/14-5e64731cc7cd63e3b689647d9d3c3e4e1d907690c716d3dd1e356466726a2c2d.png
                  canonical_url: http://forem.test/org18/to-say-nothing-of-the-dog26-2oic
                  created_at: '2023-12-15T00:15:37Z'
                  edited_at: null
                  crossposted_at: null
                  published_at: '2023-12-15T00:15:37Z'
                  last_comment_at: '2023-12-15T00:15:37Z'
                  reading_time_minutes: 1
                  tag_list:
                    - javascript
                    - html
                    - discuss
                  user:
                    name: Emmett "Lanelle" \:/ Hills
                    username: username156
                    twitter_username: twitter156
                    github_username: github156
                    user_id: 1036
                    website_url: null
                    profile_image: >-
                      /uploads/user/profile_image/1036/11b2f734-0a30-48a0-926f-13ff058d4c93.jpeg
                    profile_image_90: >-
                      /uploads/user/profile_image/1036/11b2f734-0a30-48a0-926f-13ff058d4c93.jpeg
                  organization:
                    name: Lindgren-Marquardt
                    username: org18
                    slug: org18
                    profile_image: >-
                      /uploads/organization/profile_image/18/040332d6-91a3-43e2-b13a-60d17688bf40.png
                    profile_image_90: >-
                      /uploads/organization/profile_image/18/040332d6-91a3-43e2-b13a-60d17688bf40.png
              schema:
                $ref: '#/components/schemas/OrganizationsListArticlesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsListArticles404Response'
  /api/organizations:
    get:
      tags:
        - organizations
      summary: Organizations
      operationId: Organizations_listOfDev
      security: []
      description: |-
        This endpoint allows the client to retrieve a list of Dev organizations.

          It supports pagination, each page will contain 10 tags by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam10to1000'
      responses:
        '200':
          description: A list of all organizations
          content:
            application/json:
              example:
                - summary: >-
                    Lomo food truck pour-over. 90's quinoa authentic diy muggle
                    magic butcher ethical. Cliche tattooed mustache ethical.
                  id: 20
                  name: Klein Group
                  profile_image:
                    url: >-
                      /uploads/organization/profile_image/20/6656819e-edbd-4af2-97de-b4457cdfd026.png
                  slug: org20
                  tag_line: null
                  url: http://skiles.org/woodrow
              schema:
                $ref: '#/components/schemas/OrganizationsListOfDevResponse'
    post:
      tags:
        - organizations
      summary: Create an Organization
      operationId: Organizations_createNewOrganization
      description: >-
        This endpoint allows the client to create an organization with the
        provided parameters.
                It requires a token from a user with `admin` privileges.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Successful
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationsCreateNewOrganizationResponse
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationsCreateNewOrganization422Response
  /api/organizations/{id}:
    get:
      tags:
        - organizations
      summary: An organization (by id)
      operationId: Organizations_getById
      security: []
      description: >-
        This endpoint allows the client to retrieve a single organization by
        their id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An Organization
          content:
            application/json:
              example:
                summary: Lo-fi tattooed master single-origin coffee umami.
                type_of: organization
                id: 21
                username: org21
                name: Wehner, Skiles and Reinger
                twitter_username: org7509
                github_username: org9430
                url: http://haag-stark.io/fredrick.tillman
                location: null
                tech_stack: null
                tag_line: null
                story: null
                joined_at: '2023-12-15T00:15:37Z'
                profile_image: >-
                  /uploads/organization/profile_image/21/38405e52-b2b2-47d3-a55d-2e908713fe06.png
              schema:
                $ref: '#/components/schemas/OrganizationsGetByIdResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsGetById404Response'
    put:
      tags:
        - organizations
      summary: Update an organization by id
      operationId: Organizations_updateById
      description: This endpoint allows the client to update an existing organization.
      parameters:
        - description: The ID of the organization to update.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: An Organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsUpdateByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsUpdateById401Response'
        '404':
          description: organization Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsUpdateById404Response'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsUpdateById422Response'
    delete:
      tags:
        - organizations
      summary: Delete an Organization by id
      operationId: Organizations_deleteById
      description: >-
        This endpoint allows the client to delete a single organization,
        specified by id
      parameters:
        - description: The ID of the organization.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsDeleteByIdResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsDeleteById401Response'
  /api/pages:
    get:
      tags:
        - pages
      summary: show details for all pages
      operationId: Pages_listAllDetails
      security: []
      description: >-
        This endpoint allows the client to retrieve details for all Page
        objects.
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                - title: For Whom the Bell Tolls
                  description: Reprehenderit quia et voluptate.
                  id: 1
                  slug: onion-book
                  is_top_level_path: false
                  landing_page: false
                  body_html: null
                  body_json: null
                  body_markdown: Enim pariatur aut ea.
                  processed_html: |+
                    <p>Enim pariatur aut ea.</p>

                  social_image:
                    url: null
                  template: contained
              schema:
                $ref: '#/components/schemas/PagesListAllDetailsResponse'
    post:
      tags:
        - pages
      summary: pages
      operationId: Pages_createNewPage
      description: This endpoint allows the client to create a new page.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagesCreateNewPageRequest'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesCreateNewPageResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesCreateNewPage401Response'
        '422':
          description: unprocessable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesCreateNewPage422Response'
  /api/pages/{id}:
    get:
      tags:
        - pages
      summary: show details for a page
      operationId: Pages_getDetails
      security: []
      description: >-
        This endpoint allows the client to retrieve details for a single Page
        object, specified by ID.
      parameters:
        - description: The ID of the page.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                title: Dance Dance Dance
                description: Vitae eos corrupti explicabo.
                id: 6
                slug: cutting_deport
                is_top_level_path: false
                landing_page: false
                body_html: null
                body_json: null
                body_markdown: Atque aut qui nisi.
                processed_html: |+
                  <p>Atque aut qui nisi.</p>

                social_image:
                  url: null
                template: contained
              schema:
                $ref: '#/components/schemas/Page'
    put:
      tags:
        - pages
      summary: update details for a page
      operationId: Pages_updatePageDetails
      description: >-
        This endpoint allows the client to retrieve details for a single Page
        object, specified by ID.
      parameters:
        - description: The ID of the page.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                title: New Title
                description: Qui aspernatur illo aut.
                id: 7
                slug: distant_provision
                is_top_level_path: false
                landing_page: false
                body_html: null
                body_json: null
                body_markdown: Quia rerum officiis quod.
                processed_html: |+
                  <p>Quia rerum officiis quod.</p>

                social_image:
                  url: null
                template: contained
              schema:
                $ref: '#/components/schemas/Page'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesUpdatePageDetailsResponse'
        '422':
          description: unprocessable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesUpdatePageDetails422Response'
    delete:
      tags:
        - pages
      summary: remove a page
      operationId: Pages_removePageById
      description: >-
        This endpoint allows the client to delete a single Page object,
        specified by ID.
      parameters:
        - description: The ID of the page.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                title: After Many a Summer Dies the Swan
                description: Doloribus blanditiis delectus quibusdam.
                id: 10
                slug: exhibition_nursery
                is_top_level_path: false
                landing_page: false
                body_html: null
                body_json: null
                body_markdown: Laudantium sit quod blanditiis.
                processed_html: |+
                  <p>Laudantium sit quod blanditiis.</p>

                social_image:
                  url: null
                template: contained
              schema:
                $ref: '#/components/schemas/Page'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesRemovePageByIdResponse'
        '422':
          description: unprocessable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagesRemovePageById422Response'
  /api/podcast_episodes:
    get:
      tags:
        - podcast_episodes
      summary: Podcast Episodes
      operationId: Podcastepisodes_listByDescendingPublicationDate
      security: []
      description: |-
        This endpoint allows the client to retrieve a list of podcast episodes.
                "Podcast episodes" are episodes belonging to podcasts.
                It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.
                It supports pagination, each page will contain 30 articles by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
        - description: >-
            Using this parameter will retrieve episodes belonging to a specific
            podcast.
          name: username
          in: query
          required: false
          schema:
            type: string
          example: codenewbie
      responses:
        '200':
          description: A List of Podcast episodes filtered by username
          content:
            application/json:
              example:
                - title: '14'
                  type_of: podcast_episodes
                  class_name: PodcastEpisode
                  id: 2
                  path: /codenewbie/slug-2
                  image_url: >-
                    /uploads/podcast/image/2/74b69d3b-45d0-4dcc-82e8-aae16f3f3afb.jpeg
                  podcast:
                    title: Brooklyn Black
                    slug: codenewbie
                    image_url: >-
                      /uploads/podcast/image/2/74b69d3b-45d0-4dcc-82e8-aae16f3f3afb.jpeg
              schema:
                $ref: >-
                  #/components/schemas/PodcastepisodesListByDescendingPublicationDateResponse
        '404':
          description: Unknown Podcast username
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PodcastepisodesListByDescendingPublicationDate404Response
  /api/profile_images/{username}:
    get:
      tags:
        - profile images
      summary: A Users or organizations profile image
      operationId: ProfileImages_getByUsername
      description: >-
        This endpoint allows the client to retrieve a user or organization
        profile image information by its
                corresponding username.
      parameters:
        - description: >-
            The parameter is the username of the user or the username of the
            organization.
          name: username
          in: path
          required: true
          schema:
            type: string
          example: janedoe
      responses:
        '200':
          description: An object containing profile image details
          content:
            application/json:
              example:
                type_of: profile_image
                image_of: user
                profile_image: >-
                  /uploads/user/profile_image/1060/88048a31-60e1-41af-8d6d-5a5bd37a6767.jpeg
                profile_image_90: >-
                  /uploads/user/profile_image/1060/88048a31-60e1-41af-8d6d-5a5bd37a6767.jpeg
              schema:
                $ref: '#/components/schemas/ProfileImagesGetByUsernameResponse'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileImagesGetByUsername404Response'
  /api/reactions/toggle:
    post:
      tags:
        - reactions
      summary: toggle reaction
      operationId: Reactions_toggleUserReaction
      description: >-
        This endpoint allows the client to toggle the user's reaction to a
        specified reactable (eg, Article, Comment, or User). For examples:
                * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
                * "Like"ing that Article a second time will remove the "like" from the user
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
            enum:
              - like
              - unicorn
              - exploding_head
              - raised_hands
              - fire
        - name: reactable_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: reactable_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - Comment
              - Article
              - User
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsToggleUserReactionResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsToggleUserReaction401Response'
  /api/reactions:
    post:
      tags:
        - reactions
      summary: create reaction
      operationId: Reactions_createReaction
      description: >-
        This endpoint allows the client to create a reaction to a specified
        reactable (eg, Article, Comment, or User). For examples:
                * "Like"ing an Article will create a new "like" Reaction from the user for that Articles
                * "Like"ing that Article a second time will return the previous "like"
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
            enum:
              - like
              - unicorn
              - exploding_head
              - raised_hands
              - fire
        - name: reactable_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: reactable_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - Comment
              - Article
              - User
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsCreateReactionResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsCreateReaction401Response'
  /api/readinglist:
    get:
      tags:
        - readinglist
      summary: Readinglist
      operationId: Readinglist_getUserReadinglist
      description: >-
        This endpoint allows the client to retrieve a list of articles that were
        saved to a Users readinglist.
                It supports pagination, each page will contain `30` articles by default
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam30to1000'
      responses:
        '200':
          description: A list of articles in the users readinglist
          content:
            application/json:
              example: []
              schema:
                $ref: '#/components/schemas/ReadinglistGetUserReadinglistResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinglistGetUserReadinglist401Response'
  /api/tags:
    get:
      tags:
        - tags
      summary: Tags
      operationId: Tags_listByPopularity
      security: []
      description: >-
        This endpoint allows the client to retrieve a list of tags that can be
        used to tag articles.


        It will return tags ordered by popularity.


        It supports pagination, each page will contain 10 tags by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam10to1000'
      responses:
        '200':
          description: A List of all tags
          content:
            application/json:
              example:
                - id: 86
                  name: tag7
                  bg_color_hex: null
                  text_color_hex: null
                - id: 85
                  name: tag6
                  bg_color_hex: null
                  text_color_hex: null
                - id: 84
                  name: tag5
                  bg_color_hex: null
                  text_color_hex: null
              schema:
                $ref: '#/components/schemas/TagsListByPopularityResponse'
  /api/users/{id}/suspend:
    put:
      tags:
        - users
      summary: Suspend a User
      operationId: Users_suspendUser
      description: >-
        This endpoint allows the client to suspend a user.


        The user associated with the API key must have any 'admin' or
        'moderator' role.


        This specified user will be assigned the 'suspended' role. Suspending a
        user will stop the

        user from posting new posts and comments. It doesn't delete any of the
        user's content, just

        prevents them from creating new content while suspended. Users are not
        notified of their suspension

        in the UI, so if you want them to know about this, you must notify them.
      parameters:
        - description: The ID of the user to suspend.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: User successfully unpublished
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSuspendUserResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSuspendUser404Response'
  /api/users/{id}/limited:
    put:
      tags:
        - users
      summary: Add limited role for a User
      operationId: Users_addLimitedRole
      description: >-
        This endpoint allows the client to limit a user.


        The user associated with the API key must have any 'admin' or
        'moderator' role.


        This specified user will be assigned the 'limited' role. Limiting a user
        will limit notifications

        generated from new posts and comments. It doesn't delete any of the
        user's content or prevent them

        from generating new content while limited. Users are not notified of
        their limits

        in the UI, so if you want them to know about this, you must notify them.
      parameters:
        - description: The ID of the user to limit.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: User successfully limited
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAddLimitedRoleResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAddLimitedRole404Response'
    delete:
      tags:
        - users
      summary: Remove limited for a User
      operationId: Users_removeLimits
      description: >-
        This endpoint allows the client to remove limits for a user.


        The user associated with the API key must have any 'admin' or
        'moderator' role.


        This specified user will be restored to 'general' status. Users are not
        notified

        of limits in the UI, so if you want them to know about this, you must

        notify them.
      parameters:
        - description: The ID of the user to un-limit.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: User successfully un-limited
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveLimitsResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveLimits404Response'
  /api/users/{id}/spam:
    put:
      tags:
        - users
      summary: Add spam role for a User
      operationId: Users_assignSpamRole
      description: |-
        This endpoint allows the client to add the spam role to a user.

                  The user associated with the API key must have any 'admin' or 'moderator' role.

                  This specified user will be assigned the 'spam' role. Addding the spam role to a user will stop the
                  user from posting new posts and comments. It doesn't delete any of the user's content, just
                  prevents them from creating new content while having the spam role. Users are not notified of their spaminess
                  in the UI, so if you want them to know about this, you must notify them
      parameters:
        - description: The ID of the user to assign the spam role.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: Spam role assigned to the user successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAssignSpamRoleResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAssignSpamRole404Response'
    delete:
      tags:
        - users
      summary: Remove spam role from a User
      operationId: Users_removeSpamRole
      description: |-
        This endpoint allows the client to remove the spam role for a user.

                  The user associated with the API key must have any 'admin' or 'moderator' role.

                  This specified user will be restored to 'general' status. Users are not notified
                  of removing their spam role in the UI, so if you want them to know about this, you must
                  notify them.
      parameters:
        - description: The ID of the user to remove the spam role from.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: Successfully removed the spam role from a user
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveSpamRoleResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveSpamRole404Response'
  /api/users/{id}/trusted:
    put:
      tags:
        - users
      summary: Add trusted role for a User
      operationId: Users_addTrustedRole
      description: |-
        This endpoint allows the client to add the trusted role to a user.
                  The user associated with the API key must have an 'admin' or 'moderator' role.
                  The specified user will be assigned the 'trusted' role. Adding the trusted role to a user
                  allows them to upvote and downvote posts and flag content that needs investigating by admins.
                  Users are notified of this change in the UI, and by email.
      parameters:
        - description: The ID of the user to assign the trusted role.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: Trusted role assigned to the user successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAddTrustedRoleResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersAddTrustedRole404Response'
    delete:
      tags:
        - users
      summary: Remove trusted role from a User
      operationId: Users_removeTrustedRole
      description: |-
        This endpoint allows the client to remove the trusted role for a user.
                  The user associated with the API key must have an 'admin' or 'moderator' role.
                  The specified user will be restored to 'general' status. Users are not notified
                  of removing their trusted role in the UI, so if you want them to know about this, you must
                  notify them.
      parameters:
        - description: The ID of the user to remove the trusted role from.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: Successfully removed the trusted role from a user
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveTrustedRoleResponse'
        '404':
          description: Unknown User ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRemoveTrustedRole404Response'
  /api/users/me:
    get:
      tags:
        - users
      summary: The authenticated user
      operationId: Users_getInformation
      description: >-
        This endpoint allows the client to retrieve information about the
        authenticated user
      responses:
        '200':
          description: successful
          content:
            application/json:
              example:
                summary: null
                type_of: user
                id: 1110
                username: username230
                name: Erich "Ewa" \:/ Prohaska
                twitter_username: twitter230
                github_username: github230
                email: null
                location: null
                website_url: null
                joined_at: Dec 15, 2023
                profile_image: >-
                  /uploads/user/profile_image/1110/9f031b2e-e68a-445f-b577-f46210dc14cf.jpeg
                badge_ids: []
                followers_count: 0
              schema:
                $ref: '#/components/schemas/UsersGetInformationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetInformation401Response'
  /api/users/{id}:
    get:
      tags:
        - users
      summary: A User
      operationId: Users_getByIdOrUsername
      description: >-
        This endpoint allows the client to retrieve a single user, either by id

        or by the user's username.


        For complete documentation, see the v0 API docs:
        https://developers.forem.com/api/v0#tag/users/operation/getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetByIdOrUsernameResponse'
  /api/users/{id}/unpublish:
    put:
      tags:
        - users
      summary: Unpublish a User's Articles and Comments
      operationId: Users_unpublishUserArticlesAndComments
      description: >-
        This endpoint allows the client to unpublish all of the articles and

        comments created by a user.


        The user associated with the API key must have any 'admin' or
        'moderator' role.


        This specified user's articles and comments will be unpublished and will
        no longer be

        visible to the public. They will remain in the database and will set
        back to draft status

        on the specified user's  dashboard. Any notifications associated with
        the specified user's

        articles and comments will be deleted.


        Note this endpoint unpublishes articles and comments asychronously: it
        will return a 204 NO CONTENT

        status code immediately, but the articles and comments will not be
        unpublished until the

        request is completed on the server.
      parameters:
        - description: The ID of the user to unpublish.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: User's articles and comments successfully unpublished
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UsersUnpublishUserArticlesAndCommentsResponse
        '404':
          description: Unknown User ID (still accepted for async processing)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UsersUnpublishUserArticlesAndComments404Response
  /api/admin/users:
    post:
      tags:
        - users
      summary: Invite a User
      operationId: Users_inviteUser
      description: >-
        This endpoint allows the client to trigger an invitation to the provided
        email address.

                It requires a token from a user with `super_admin` privileges.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInviteParam'
      responses:
        '200':
          description: Successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInviteUserResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersInviteUser422Response'
  /api/videos:
    get:
      tags:
        - videos
        - articles
      summary: Articles with a video
      operationId: Videos_listByPopularity
      security: []
      description: >-
        This endpoint allows the client to retrieve a list of articles that are
        uploaded with a video.


        It will only return published video articles ordered by descending
        popularity.


        It supports pagination, each page will contain 24 articles by default.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam24to1000'
      responses:
        '200':
          description: A List of all articles with videos
          content:
            application/json:
              example:
                - title: Brandy of the Damned33
                  type_of: video_article
                  id: 34
                  path: /username244/brandy-of-the-damned33-2cbm
                  cloudinary_video_url: >-
                    https://dw71fyauz7yz9.cloudfront.net/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f/thumbs-video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f-00001.png
                  user_id: 1125
                  video_duration_in_minutes: '00:00'
                  video_source_url: >-
                    https://dw71fyauz7yz9.cloudfront.net/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f.m3u8
                  user:
                    name: Effie "Kieth" \:/ Weimann
                - title: O Pioneers!32
                  type_of: video_article
                  id: 33
                  path: /username243/o-pioneers32-1ejl
                  cloudinary_video_url: >-
                    https://dw71fyauz7yz9.cloudfront.net/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f/thumbs-video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f-00001.png
                  user_id: 1124
                  video_duration_in_minutes: '00:00'
                  video_source_url: >-
                    https://dw71fyauz7yz9.cloudfront.net/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f/video-upload__1e42eb0bab4abb3c63baeb5e8bdfe69f.m3u8
                  user:
                    name: Preston "Darius" \:/ Runolfsdottir
              schema:
                $ref: '#/components/schemas/VideosListByPopularityResponse'
components:
  parameters:
    pageParam:
      description: Pagination page
      in: query
      name: page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    perPageParam10to1000:
      description: >-
        Page size (the number of items to return per page). The default maximum
        value can be overridden by "API_PER_PAGE_MAX" environment variable.
      in: query
      name: per_page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 10
    perPageParam24to1000:
      description: >-
        Page size (the number of items to return per page). The default maximum
        value can be overridden by "API_PER_PAGE_MAX" environment variable.
      in: query
      name: per_page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 24
    perPageParam30to1000:
      description: >-
        Page size (the number of items to return per page). The default maximum
        value can be overridden by "API_PER_PAGE_MAX" environment variable.
      in: query
      name: per_page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 30
    perPageParam30to100:
      description: >-
        Page size (the number of items to return per page). The default maximum
        value can be overridden by "API_PER_PAGE_MAX" environment variable.
      in: query
      name: per_page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 30
    perPageParam80to1000:
      description: >-
        Page size (the number of items to return per page). The default maximum
        value can be overridden by "API_PER_PAGE_MAX" environment variable.
      in: query
      name: per_page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 80
    listingCategoryParam:
      description: |-
        Using this parameter will return listings belonging to the
                      requested category.
      name: category
      in: query
      schema:
        type: string
      example: cfp
  securitySchemes:
    api-key:
      description: >-
        API Key authentication.


        Authentication for some endpoints, like write operations on the

        Articles API require a DEV API key.


        All authenticated endpoints are CORS disabled, the API key is intended
        for non-browser scripts.


        ### Getting an API key


        To obtain one, please follow these steps:

          - visit https://dev.to/settings/extensions
          - in the "DEV API Keys" section create a new key by adding a
            description and clicking on "Generate API Key"

            ![obtain a DEV API Key](https://user-images.githubusercontent.com/37842/172718105-bd93664e-76e0-477d-99c4-265dda0b06c5.png)

          - You'll see the newly generated key in the same view
            ![generated DEV API Key](https://user-images.githubusercontent.com/37842/172718151-e7fe26a0-9937-42e8-96c6-333acdab9e49.png)
      type: apiKey
      name: api-key
      in: header
  schemas:
    ArticleFlareTag:
      description: Flare tag of the article
      type: object
      properties:
        name:
          type: string
        bg_color_hex:
          description: Background color (hexadecimal)
          type: string
          nullable: true
        text_color_hex:
          description: Text color (hexadecimal)
          type: string
          nullable: true
    ArticleIndex:
      description: Representation of an article or post returned in a list
      type: object
      properties:
        tags:
          type: string
        title:
          type: string
        description:
          type: string
        type_of:
          type: string
        id:
          type: integer
          format: int32
        cover_image:
          type: string
          format: url
          nullable: true
        readable_publish_date:
          type: string
        social_image:
          type: string
          format: url
        tag_list:
          type: array
          items:
            type: string
        slug:
          type: string
        path:
          type: string
          format: path
        url:
          type: string
          format: url
        canonical_url:
          type: string
          format: url
        positive_reactions_count:
          type: integer
          format: int32
        public_reactions_count:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        edited_at:
          type: string
          format: date-time
          nullable: true
        crossposted_at:
          type: string
          format: date-time
          nullable: true
        published_at:
          type: string
          format: date-time
        last_comment_at:
          type: string
          format: date-time
        published_timestamp:
          description: Crossposting or published date time
          type: string
          format: date-time
        reading_time_minutes:
          description: Reading time, in minutes
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/SharedUser'
        flare_tag:
          $ref: '#/components/schemas/ArticleFlareTag'
        organization:
          $ref: '#/components/schemas/SharedOrganization'
      required:
        - type_of
        - id
        - title
        - description
        - cover_image
        - readable_publish_date
        - social_image
        - tag_list
        - tags
        - slug
        - path
        - url
        - canonical_url
        - comments_count
        - positive_reactions_count
        - public_reactions_count
        - created_at
        - edited_at
        - crossposted_at
        - published_at
        - last_comment_at
        - published_timestamp
        - user
        - reading_time_minutes
    VideoArticle:
      description: Representation of an Article with video
      type: object
      properties:
        title:
          type: string
        type_of:
          type: string
        id:
          type: integer
          format: int64
        path:
          type: string
        cloudinary_video_url:
          type: string
        user_id:
          type: integer
          format: int64
        video_duration_in_minutes:
          type: string
        video_source_url:
          type: string
        user:
          description: Author of the article
          type: object
          properties:
            name:
              type: string
    Article:
      description: Representation of an Article to be created/updated
      type: object
      properties:
        article:
          type: object
          properties:
            tags:
              type: string
            title:
              type: string
            description:
              type: string
            body_markdown:
              type: string
            published:
              type: boolean
              default: false
            series:
              type: string
              nullable: true
            main_image:
              type: string
              nullable: true
            canonical_url:
              type: string
              nullable: true
            organization_id:
              type: integer
              nullable: true
    Organization:
      description: Representation of an Organization
      type: object
      properties:
        summary:
          type: string
        type_of:
          type: string
        username:
          type: string
        name:
          type: string
        twitter_username:
          type: string
        github_username:
          type: string
        url:
          type: string
        location:
          type: string
        joined_at:
          type: string
        tech_stack:
          type: string
        tag_line:
          type: string
          nullable: true
        story:
          type: string
          nullable: true
    FollowedTag:
      description: Representation of a followed tag
      type: object
      properties:
        id:
          description: Tag id
          type: integer
          format: int64
        name:
          type: string
        points:
          type: number
          format: float
      required:
        - id
        - name
        - points
    Tag:
      description: Representation of a tag
      type: object
      properties:
        id:
          description: Tag id
          type: integer
          format: int64
        name:
          type: string
        bg_color_hex:
          type: string
          nullable: true
        text_color_hex:
          type: string
          nullable: true
    Page:
      description: Representation of a page object
      type: object
      properties:
        title:
          description: Title of the page
          type: string
        description:
          description: For internal use, helps similar pages from one another
          type: string
        slug:
          description: Used to link to this page in URLs, must be unique and URL-safe
          type: string
        body_markdown:
          description: The text (in markdown) of the ad (required)
          type: string
          nullable: true
        body_json:
          description: For JSON pages, the JSON body
          type: string
          nullable: true
        is_top_level_path:
          description: >-
            If true, the page is available at '/{slug}' instead of
            '/page/{slug}', use with caution
          type: boolean
        social_image:
          type: object
          nullable: true
        template:
          description: Controls what kind of layout the page is rendered in
          type: string
          enum:
            - contained
            - full_within_layout
            - nav_bar_included
            - json
          default: contained
      required:
        - title
        - slug
        - description
        - template
    PodcastEpisodeIndex:
      description: Representation of a podcast episode returned in a list
      type: object
      properties:
        title:
          type: string
        type_of:
          type: string
        id:
          type: integer
          format: int32
        class_name:
          type: string
        path:
          type: string
          format: path
        image_url:
          description: Podcast episode image url or podcast image url
          type: string
          format: url
        podcast:
          $ref: '#/components/schemas/SharedPodcast'
      required:
        - type_of
        - class_name
        - id
        - path
        - title
        - image_url
        - podcast
    ProfileImage:
      description: A profile image object
      type: object
      properties:
        type_of:
          description: Return profile_image
          type: string
        image_of:
          description: >-
            Determines the type of the profile image owner (user or
            organization)
          type: string
        profile_image:
          description: Profile image (640x640)
          type: string
        profile_image_90:
          description: Profile image (90x90)
          type: string
    SharedUser:
      description: The resource creator
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        twitter_username:
          type: string
          nullable: true
        github_username:
          type: string
          nullable: true
        website_url:
          type: string
          format: url
          nullable: true
        profile_image:
          description: Profile image (640x640)
          type: string
        profile_image_90:
          description: Profile image (90x90)
          type: string
    SharedOrganization:
      description: The organization the resource belongs to
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        slug:
          type: string
        profile_image:
          description: Profile image (640x640)
          type: string
          format: url
        profile_image_90:
          description: Profile image (90x90)
          type: string
          format: url
    User:
      description: The representation of a user returned in a list
      type: object
      properties:
        summary:
          type: string
          nullable: true
        type_of:
          type: string
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        twitter_username:
          type: string
        github_username:
          type: string
        website_url:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        joined_at:
          type: string
        profile_image:
          type: string
    ExtendedUser:
      description: The representation of a user
      type: object
      properties:
        summary:
          type: string
          nullable: true
        type_of:
          type: string
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        twitter_username:
          type: string
        github_username:
          type: string
        email:
          description: Email (if user allows displaying email on their profile) or nil
          type: string
          nullable: true
        website_url:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        joined_at:
          type: string
        profile_image:
          type: string
        badge_ids:
          description: ids of the badges awarded to the user
          type: array
          items:
            type: integer
    MyUser:
      description: The representation of a user when accessed by themselves
      type: object
      properties:
        summary:
          type: string
          nullable: true
        type_of:
          type: string
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        twitter_username:
          type: string
        github_username:
          type: string
        email:
          description: Email (if user allows displaying email on their profile) or nil
          type: string
          nullable: true
        website_url:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        joined_at:
          type: string
        profile_image:
          type: string
        badge_ids:
          description: ids of the badges awarded to the user
          type: array
          items:
            type: integer
        followers_count:
          type: integer
    SharedPodcast:
      description: The podcast that the resource belongs to
      type: object
      properties:
        title:
          type: string
        slug:
          type: string
        image_url:
          description: Podcast image url
          type: string
          format: url
    Comment:
      description: A Comment on an Article or Podcast Episode
      type: object
      properties:
        type_of:
          type: string
        id_code:
          type: string
        created_at:
          type: string
          format: date-time
        image_url:
          description: Podcast image url
          type: string
          format: url
    UserInviteParam:
      description: User invite parameters
      type: object
      properties:
        email:
          type: string
        name:
          type: string
          nullable: true
    Billboard:
      description: Billboard, aka Widget, ex. Display Ad
      type: object
      properties:
        id:
          description: The ID of the Billboard
          type: integer
        name:
          description: For internal use, helps distinguish ads from one another
          type: string
        body_markdown:
          description: The text (in markdown) of the ad (required)
          type: string
        approved:
          description: Ad must be both published and approved to be in rotation
          type: boolean
        published:
          description: Ad must be both published and approved to be in rotation
          type: boolean
        organization_id:
          description: Identifies the organization to which the ad belongs
          type: integer
          nullable: true
        creator_id:
          description: Identifies the user who created the ad.
          type: integer
          nullable: true
        placement_area:
          description: Identifies which area of site layout the ad can appear in
          type: string
          enum:
            - sidebar_left
            - sidebar_left_2
            - sidebar_right
            - feed_first
            - feed_second
            - feed_third
            - home_hero
            - post_sidebar
            - post_comments
        tag_list:
          description: Tags on which this ad can be displayed (blank is all/any tags)
          type: string
        exclude_article_ids:
          description: >-
            Articles this ad should *not* appear on (blank means no articles are
            disallowed, and this ad can appear next to any/all articles).
            Comma-separated list of integer Article IDs
          type: string
          nullable: true
        audience_segment_id:
          description: Specifies a specific audience segment who will see this billboard
          type: integer
        audience_segment_type:
          description: >-
            Specifies a group of users who will see this billboard (must match
            audience_segment_id if both provided)
          type: string
          enum:
            - manual
            - trusted
            - posted
            - no_posts_yet
            - dark_theme
            - light_theme
            - no_experience
            - experience1
            - experience2
            - experience3
            - experience4
            - experience5
        target_geolocations:
          description: >-
            Locations to show this billboard in (blank means it will be shown in
            all locations). Specified as a comma-separated list or array of ISO
            3166-2 country and optionally region codes)
          type: array
          items:
            type: string
        display_to:
          description: Potentially limits visitors to whom the ad is visible
          type: string
          enum:
            - all
            - logged_in
            - logged_out
          default: all
        type_of:
          description: >
            Types of the billboards:

            in_house (created by admins),

            community (created by an entity, appears on entity's content),

            external ( created by an entity, or a non-entity, can appear
            everywhere)
          type: string
          enum:
            - in_house
            - community
            - external
          default: in_house
      required:
        - name
        - body_markdown
        - placement_area
    Segment:
      description: A manually managed audience segment
      type: object
      properties:
        id:
          description: The ID of the segment
          type: integer
        type_of:
          description: Marks the segment as manually managed (other types are internal)
          type: string
          enum:
            - manual
          default: manual
        user_count:
          description: The current number of users in the segment
          type: integer
    SegmentUserIds:
      type: object
      properties:
        user_ids:
          type: array
          items:
            type: integer
          maxItems: 10000
    BillboardsCreateNewBillboardRequest:
      type: object
      items:
        $ref: '#/components/schemas/Billboard'
    BillboardsUpdateByIdRequest:
      type: object
      items:
        $ref: '#/components/schemas/Billboard'
    PagesCreateNewPageRequest:
      type: object
      properties:
        title:
          description: Title of the page
          type: string
        description:
          description: For internal use, helps similar pages from one another
          type: string
        slug:
          description: Used to link to this page in URLs, must be unique and URL-safe
          type: string
        body_markdown:
          description: The text (in markdown) of the ad (required)
          type: string
        body_json:
          description: For JSON pages, the JSON body
          type: string
        is_top_level_path:
          description: >-
            If true, the page is available at '/{slug}' instead of
            '/page/{slug}', use with caution
          type: boolean
        template:
          description: Controls what kind of layout the page is rendered in
          type: string
          enum:
            - contained
            - full_within_layout
            - nav_bar_included
            - json
          default: contained
    ArticlesListPublishedArticlesResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesCreateNewArticleResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        title:
          type: string
          example: New article
        description:
          type: string
          example: New post example
        type_of:
          type: string
          example: article
        id:
          type: number
          example: 2
        readable_publish_date:
          type: string
          example: Dec 15
        slug:
          type: string
          example: new-article-2io1
        path:
          type: string
          example: /username2/new-article-2io1
        url:
          type: string
          example: http://forem.test/username2/new-article-2io1
        comments_count:
          type: number
          example: 0
        public_reactions_count:
          type: number
          example: 0
        collection_id:
          type: number
          example: 1
        published_timestamp:
          type: string
          example: '2023-12-15T00:15:27Z'
        positive_reactions_count:
          type: number
          example: 0
        cover_image:
          type: string
          example: https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg
        social_image:
          type: string
          example: https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg
        canonical_url:
          type: string
          example: >-
            https://dev.to/fdocr/headless-chrome-dual-mode-tests-for-ruby-on-rails-4p6g
        created_at:
          type: string
          example: '2023-12-15T00:15:27Z'
        edited_at:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        crossposted_at:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        published_at:
          type: string
          example: '2023-12-15T00:15:27Z'
        last_comment_at:
          type: string
          example: '2023-12-15T00:15:27Z'
        reading_time_minutes:
          type: number
          example: 1
        tag_list:
          type: string
          example: ''
        body_html:
          type: string
          example: |+
            <p><strong>New</strong> body for the article</p>

        body_markdown:
          type: string
          example: '**New** body for the article'
        user:
          type: object
          properties:
            name:
              type: string
              example: Carmen "Andre" \:/ Rodriguez
            username:
              type: string
              example: username2
            twitter_username:
              type: string
              example: twitter2
            github_username:
              type: string
              example: github2
            user_id:
              type: number
              example: 882
            website_url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
            profile_image:
              type: string
              example: >-
                /uploads/user/profile_image/882/a6c7c9f0-6c40-491e-a306-a03c926c6aac.jpeg
            profile_image_90:
              type: string
              example: >-
                /uploads/user/profile_image/882/a6c7c9f0-6c40-491e-a306-a03c926c6aac.jpeg
      example:
        tags: []
        title: New article
        description: New post example
        type_of: article
        id: 2
        readable_publish_date: Dec 15
        slug: new-article-2io1
        path: /username2/new-article-2io1
        url: http://forem.test/username2/new-article-2io1
        comments_count: 0
        public_reactions_count: 0
        collection_id: 1
        published_timestamp: '2023-12-15T00:15:27Z'
        positive_reactions_count: 0
        cover_image: https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg
        social_image: https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg
        canonical_url: >-
          https://dev.to/fdocr/headless-chrome-dual-mode-tests-for-ruby-on-rails-4p6g
        created_at: '2023-12-15T00:15:27Z'
        edited_at: null
        crossposted_at: null
        published_at: '2023-12-15T00:15:27Z'
        last_comment_at: '2023-12-15T00:15:27Z'
        reading_time_minutes: 1
        tag_list: ''
        body_html: |+
          <p><strong>New</strong> body for the article</p>

        body_markdown: '**New** body for the article'
        user:
          name: Carmen "Andre" \:/ Rodriguez
          username: username2
          twitter_username: twitter2
          github_username: github2
          user_id: 882
          website_url: null
          profile_image: >-
            /uploads/user/profile_image/882/a6c7c9f0-6c40-491e-a306-a03c926c6aac.jpeg
          profile_image_90: >-
            /uploads/user/profile_image/882/a6c7c9f0-6c40-491e-a306-a03c926c6aac.jpeg
    ArticlesCreateNewArticle401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesCreateNewArticle422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: article'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: article'
        status: 422
    ArticlesListLatestPublishedResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetByIdResponse:
      type: object
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    ArticlesUpdateByIdResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        title:
          type: string
          example: Recalled to Life9
        description:
          type: string
          example: >-
            Messenger bag kickstarter fingerstache. Green juice hammock
            taxidermy.  Gastropub pop-up godard put a...
        type_of:
          type: string
          example: article
        id:
          type: number
          example: 10
        readable_publish_date:
          type: string
          example: Dec 15
        slug:
          type: string
          example: recalled-to-life9-1990
        path:
          type: string
          example: /username11/recalled-to-life9-1990
        url:
          type: string
          example: http://forem.test/username11/recalled-to-life9-1990
        comments_count:
          type: number
          example: 0
        public_reactions_count:
          type: number
          example: 0
        collection_id:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        published_timestamp:
          type: string
          example: '2023-12-15T00:15:28Z'
        positive_reactions_count:
          type: number
          example: 0
        cover_image:
          type: string
          example: >-
            http://forem.test/assets/21-8c16e6ef44da175a1e51f1ba9d0cb55af8a920db6aacbf1e4b7a055afc1b3d30.png
        social_image:
          type: string
          example: >-
            http://forem.test/assets/21-8c16e6ef44da175a1e51f1ba9d0cb55af8a920db6aacbf1e4b7a055afc1b3d30.png
        canonical_url:
          type: string
          example: http://forem.test/username11/recalled-to-life9-1990
        created_at:
          type: string
          example: '2023-12-15T00:15:28Z'
        edited_at:
          type: string
          example: '2023-12-15T00:15:28Z'
        crossposted_at:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        published_at:
          type: string
          example: '2023-12-15T00:15:28Z'
        last_comment_at:
          type: string
          example: '2023-12-15T00:15:28Z'
        reading_time_minutes:
          type: number
          example: 1
        tag_list:
          type: string
          example: ''
        body_html:
          type: string
          example: |+
            <p><strong>New</strong> body for the article</p>

        body_markdown:
          type: string
          example: '**New** body for the article'
        user:
          type: object
          properties:
            name:
              type: string
              example: Danilo "Morton" \:/ Douglas
            username:
              type: string
              example: username11
            twitter_username:
              type: string
              example: twitter11
            github_username:
              type: string
              example: github11
            user_id:
              type: number
              example: 891
            website_url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
            profile_image:
              type: string
              example: >-
                /uploads/user/profile_image/891/e23f88f8-724f-4e6d-b6e1-1b3a9f04f39b.jpeg
            profile_image_90:
              type: string
              example: >-
                /uploads/user/profile_image/891/e23f88f8-724f-4e6d-b6e1-1b3a9f04f39b.jpeg
      example:
        tags: []
        title: Recalled to Life9
        description: >-
          Messenger bag kickstarter fingerstache. Green juice hammock
          taxidermy.  Gastropub pop-up godard put a...
        type_of: article
        id: 10
        readable_publish_date: Dec 15
        slug: recalled-to-life9-1990
        path: /username11/recalled-to-life9-1990
        url: http://forem.test/username11/recalled-to-life9-1990
        comments_count: 0
        public_reactions_count: 0
        collection_id: null
        published_timestamp: '2023-12-15T00:15:28Z'
        positive_reactions_count: 0
        cover_image: >-
          http://forem.test/assets/21-8c16e6ef44da175a1e51f1ba9d0cb55af8a920db6aacbf1e4b7a055afc1b3d30.png
        social_image: >-
          http://forem.test/assets/21-8c16e6ef44da175a1e51f1ba9d0cb55af8a920db6aacbf1e4b7a055afc1b3d30.png
        canonical_url: http://forem.test/username11/recalled-to-life9-1990
        created_at: '2023-12-15T00:15:28Z'
        edited_at: '2023-12-15T00:15:28Z'
        crossposted_at: null
        published_at: '2023-12-15T00:15:28Z'
        last_comment_at: '2023-12-15T00:15:28Z'
        reading_time_minutes: 1
        tag_list: ''
        body_html: |+
          <p><strong>New</strong> body for the article</p>

        body_markdown: '**New** body for the article'
        user:
          name: Danilo "Morton" \:/ Douglas
          username: username11
          twitter_username: twitter11
          github_username: github11
          user_id: 891
          website_url: null
          profile_image: >-
            /uploads/user/profile_image/891/e23f88f8-724f-4e6d-b6e1-1b3a9f04f39b.jpeg
          profile_image_90: >-
            /uploads/user/profile_image/891/e23f88f8-724f-4e6d-b6e1-1b3a9f04f39b.jpeg
    ArticlesUpdateById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesUpdateById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    ArticlesUpdateById422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: article'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: article'
        status: 422
    ArticlesGetByPathResponse:
      type: object
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetByPath404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    ArticlesGetPublishedListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetPublishedList401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesGetPublishedList200Response:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetUnpublishedListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetUnpublishedList401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesGetAllUserArticlesResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ArticlesGetAllUserArticles401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesUnpublishByIdResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ArticlesUnpublishById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsListAudienceSegmentsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Segment'
    SegmentsListAudienceSegments401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsCreateManuallyManagedSegmentResponse:
      type: object
      properties:
        id:
          type: number
          example: 3
        created_at:
          type: string
          example: '2023-12-15T11:15:30.723+11:00'
        type_of:
          type: string
          example: manual
        updated_at:
          type: string
          example: '2023-12-15T11:15:30.723+11:00'
      example:
        id: 3
        created_at: '2023-12-15T11:15:30.723+11:00'
        type_of: manual
        updated_at: '2023-12-15T11:15:30.723+11:00'
    SegmentsCreateManuallyManagedSegment401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsDeleteManuallyManagedSegmentResponse:
      type: object
      properties:
        id:
          type: number
          example: 8
        created_at:
          type: string
          example: '2023-12-15T11:15:31.351+11:00'
        type_of:
          type: string
          example: manual
        updated_at:
          type: string
          example: '2023-12-15T11:15:31.351+11:00'
      example:
        id: 8
        created_at: '2023-12-15T11:15:31.351+11:00'
        type_of: manual
        updated_at: '2023-12-15T11:15:31.351+11:00'
    SegmentsDeleteManuallyManagedSegment401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsDeleteManuallyManagedSegment404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsDeleteManuallyManagedSegment409Response:
      type: object
      properties:
        error:
          type: string
          example: Segments cannot be deleted while in use by any billboards
      example:
        error: Segments cannot be deleted while in use by any billboards
    SegmentsGetByIdResponse:
      type: object
      items:
        $ref: '#/components/schemas/Segment'
    SegmentsGetById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsGetById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsGetUserListInSegmentResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'
    SegmentsGetUserListInSegment401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsGetUserListInSegment404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsAddUsersToSegmentResponse:
      type: object
      properties:
        succeeded:
          type: array
          items:
            type: number
            example: 943
        failed:
          type: array
          items:
            type: string
      example:
        succeeded:
          - 943
          - 944
          - 945
        failed: []
    SegmentsAddUsersToSegment401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsAddUsersToSegment404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsAddUsersToSegment422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: user_ids'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: user_ids'
        status: 422
    SegmentsRemoveUsersFromSegmentResponse:
      type: object
      properties:
        succeeded:
          type: array
          items:
            type: number
            example: 962
        failed:
          type: array
          items:
            type: string
      example:
        succeeded:
          - 962
          - 963
          - 964
        failed: []
    SegmentsRemoveUsersFromSegment401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    SegmentsRemoveUsersFromSegment404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    SegmentsRemoveUsersFromSegment422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: user_ids'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: user_ids'
        status: 422
    BillboardsGetListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Billboard'
    BillboardsGetList401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    BillboardsCreateNewBillboardResponse:
      type: object
      items:
        $ref: '#/components/schemas/Billboard'
    BillboardsCreateNewBillboard401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    BillboardsCreateNewBillboard422Response:
      type: object
      properties:
        error:
          type: string
          example: 'Validation failed: Placement area is not included in the list'
        status:
          type: number
          example: 422
      example:
        error: 'Validation failed: Placement area is not included in the list'
        status: 422
    BillboardsGetByIdResponse:
      type: object
      properties:
        id:
          type: number
          example: 3
        approved:
          type: boolean
          example: false
        audience_segment_id:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_markdown:
          type: string
          example: Hello _hey_ Hey hey 2
        cached_tag_list:
          type: string
          example: ''
        clicks_count:
          type: number
          example: 0
        created_at:
          type: string
          example: '2023-12-15T11:15:34.492+11:00'
        creator_id:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        custom_display_label:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        display_to:
          type: string
          example: all
        exclude_article_ids:
          type: string
          example: ''
        impressions_count:
          type: number
          example: 0
        name:
          type: string
          example: Billboard 3
        organization_id:
          type: number
          example: 6
        placement_area:
          type: string
          example: sidebar_left
        priority:
          type: boolean
          example: false
        processed_html:
          type: string
          example: <p>Hello <em>hey</em> Hey hey 2</p>
        published:
          type: boolean
          example: false
        render_mode:
          type: string
          example: forem_markdown
        success_rate:
          type: number
          example: 0
        template:
          type: string
          example: authorship_box
        type_of:
          type: string
          example: in_house
        updated_at:
          type: string
          example: '2023-12-15T11:15:34.495+11:00'
        weight:
          type: number
          example: 1
        audience_segment_type:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        tag_list:
          type: string
          example: ''
        target_geolocations:
          type: array
          items:
            type: string
      example:
        id: 3
        approved: false
        audience_segment_id: null
        body_markdown: Hello _hey_ Hey hey 2
        cached_tag_list: ''
        clicks_count: 0
        created_at: '2023-12-15T11:15:34.492+11:00'
        creator_id: null
        custom_display_label: null
        display_to: all
        exclude_article_ids: ''
        impressions_count: 0
        name: Billboard 3
        organization_id: 6
        placement_area: sidebar_left
        priority: false
        processed_html: <p>Hello <em>hey</em> Hey hey 2</p>
        published: false
        render_mode: forem_markdown
        success_rate: 0
        template: authorship_box
        type_of: in_house
        updated_at: '2023-12-15T11:15:34.495+11:00'
        weight: 1
        audience_segment_type: null
        tag_list: ''
        target_geolocations: []
    BillboardsGetById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    BillboardsGetById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    BillboardsUpdateByIdResponse:
      type: object
      items:
        $ref: '#/components/schemas/Billboard'
    BillboardsUpdateById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    BillboardsUpdateById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    BillboardsUnpublishBillboardResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    BillboardsUnpublishBillboard404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    CommentsGetAllThreadedResponse:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    CommentsGetAllThreaded404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    CommentsGetThreadedCommentResponse:
      type: object
      properties:
        type_of:
          type: string
          example: comment
        id_code:
          type: string
          example: '3'
        created_at:
          type: string
          example: '2023-12-15T00:15:35Z'
        body_html:
          type: string
          example: >+
            <p>Food truck beard typewriter locavore. Lomo bushwick cardigan
            post-ironic vhs. Vinegar gluten-free swag tumblr helvetica listicle
            xoxo.</p>

        user:
          type: object
          properties:
            name:
              type: string
              example: Kennith "Rodney" \:/ Baumbach
            username:
              type: string
              example: username125
            twitter_username:
              type: string
              example: twitter125
            github_username:
              type: string
              example: github125
            user_id:
              type: number
              example: 1005
            website_url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
            profile_image:
              type: string
              example: >-
                /uploads/user/profile_image/1005/a2641bae-3a16-4238-952a-04f14ce74d1a.jpeg
            profile_image_90:
              type: string
              example: >-
                /uploads/user/profile_image/1005/a2641bae-3a16-4238-952a-04f14ce74d1a.jpeg
        children:
          type: array
          items:
            type: string
      example:
        type_of: comment
        id_code: '3'
        created_at: '2023-12-15T00:15:35Z'
        body_html: >+
          <p>Food truck beard typewriter locavore. Lomo bushwick cardigan
          post-ironic vhs. Vinegar gluten-free swag tumblr helvetica listicle
          xoxo.</p>

        user:
          name: Kennith "Rodney" \:/ Baumbach
          username: username125
          twitter_username: twitter125
          github_username: github125
          user_id: 1005
          website_url: null
          profile_image: >-
            /uploads/user/profile_image/1005/a2641bae-3a16-4238-952a-04f14ce74d1a.jpeg
          profile_image_90: >-
            /uploads/user/profile_image/1005/a2641bae-3a16-4238-952a-04f14ce74d1a.jpeg
        children: []
    CommentsGetThreadedComment404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    FollowedtagsGetTagListResponse:
      type: array
      items:
        $ref: '#/components/schemas/FollowedTag'
    FollowedtagsGetTagList401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    FollowersGetListResponse:
      type: array
      items:
        description: A follower
        type: object
        properties:
          type_of:
            description: user_follower by default
            type: string
          id:
            type: integer
            format: int32
          user_id:
            description: The follower's user id
            type: integer
            format: int32
          name:
            description: The follower's name
            type: string
          path:
            description: A path to the follower's profile
            type: string
          profile_image:
            description: Profile image (640x640)
            type: string
    FollowersGetList401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    OrganizationsGetByUsernameResponse:
      type: object
      items:
        $ref: '#/components/schemas/Organization'
    OrganizationsGetByUsername404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    OrganizationsListUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/User'
    OrganizationsListUsers404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    OrganizationsListArticlesResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    OrganizationsListArticles404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    OrganizationsListOfDevResponse:
      type: array
      items:
        $ref: '#/components/schemas/Organization'
    OrganizationsCreateNewOrganizationResponse:
      type: object
      properties:
        summary:
          type: string
          example: a newly created test org
        id:
          type: number
          example: 23
        name:
          type: string
          example: New Test Org
        profile_image:
          type: string
          example: uploads/organization/profile_image/1/400x400.jpg
        slug:
          type: string
          example: org10001
        tag_line:
          type: string
          example: a test org's tagline
        url:
          type: string
          example: https://testorg.io
      example:
        summary: a newly created test org
        id: 23
        name: New Test Org
        profile_image: uploads/organization/profile_image/1/400x400.jpg
        slug: org10001
        tag_line: a test org's tagline
        url: https://testorg.io
    OrganizationsCreateNewOrganization422Response:
      type: object
      properties:
        error:
          type: string
          example: >-
            Validation failed: Name can't be blank, Profile image can't be
            blank, Slug can't be blank
        status:
          type: number
          example: 422
      example:
        error: >-
          Validation failed: Name can't be blank, Profile image can't be blank,
          Slug can't be blank
        status: 422
    OrganizationsDeleteByIdResponse:
      type: object
      properties:
        message:
          type: string
          example: deletion scheduled for organization with ID 28
        status:
          type: number
          example: 200
      example:
        message: deletion scheduled for organization with ID 28
        status: 200
    OrganizationsDeleteById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    OrganizationsGetByIdResponse:
      type: object
      items:
        $ref: '#/components/schemas/Organization'
    OrganizationsGetById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    OrganizationsUpdateByIdResponse:
      type: object
      properties:
        summary:
          type: string
          example: An updated summary for the organization.
        id:
          type: number
          example: 24
        name:
          type: string
          example: Reinger, Gleichner and Rogahn
        profile_image:
          type: string
          example: >-
            /uploads/organization/profile_image/24/1b9f0d37-acb7-4b80-b950-d621f5c5463d.png
        slug:
          type: string
          example: org23
        tag_line:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        url:
          type: string
          example: http://kertzmann.io/clora.mcglynn
      example:
        summary: An updated summary for the organization.
        id: 24
        name: Reinger, Gleichner and Rogahn
        profile_image: >-
          /uploads/organization/profile_image/24/1b9f0d37-acb7-4b80-b950-d621f5c5463d.png
        slug: org23
        tag_line: null
        url: http://kertzmann.io/clora.mcglynn
    OrganizationsUpdateById401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    OrganizationsUpdateById404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    OrganizationsUpdateById422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: organization'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: organization'
        status: 422
    PagesListAllDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Page'
    PagesCreateNewPageResponse:
      type: object
      properties:
        title:
          type: string
          example: Example Page
        description:
          type: string
          example: a new page
        id:
          type: number
          example: 3
        slug:
          type: string
          example: example1
        is_top_level_path:
          type: boolean
          example: false
        landing_page:
          type: boolean
          example: false
        body_html:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_json:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_markdown:
          type: string
          example: |-
            # Hi, this is a New Page
            Yep, it's an a new page
        processed_html:
          type: string
          example: |+
            <h1>
              <a name="hi-this-is-a-new-page" href="#hi-this-is-a-new-page">
              </a>
              Hi, this is a New Page
            </h1>

            <p>Yep, it's an a new page</p>

        social_image:
          type: object
          properties:
            url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
        template:
          type: string
          example: contained
      example:
        title: Example Page
        description: a new page
        id: 3
        slug: example1
        is_top_level_path: false
        landing_page: false
        body_html: null
        body_json: null
        body_markdown: |-
          # Hi, this is a New Page
          Yep, it's an a new page
        processed_html: |+
          <h1>
            <a name="hi-this-is-a-new-page" href="#hi-this-is-a-new-page">
            </a>
            Hi, this is a New Page
          </h1>

          <p>Yep, it's an a new page</p>

        social_image:
          url: null
        template: contained
    PagesCreateNewPage401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    PagesCreateNewPage422Response:
      type: object
      properties:
        title:
          type: string
          example: Example Page
        description:
          type: string
          example: a new page
        id:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        slug:
          type: string
          example: example1
        is_top_level_path:
          type: boolean
          example: false
        landing_page:
          type: boolean
          example: false
        body_html:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_json:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_markdown:
          type: string
          example: |-
            # Hi, this is a New Page
            Yep, it's an a new page
        processed_html:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        social_image:
          type: object
          properties:
            url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
        template:
          type: string
          example: moon
      example:
        title: Example Page
        description: a new page
        id: null
        slug: example1
        is_top_level_path: false
        landing_page: false
        body_html: null
        body_json: null
        body_markdown: |-
          # Hi, this is a New Page
          Yep, it's an a new page
        processed_html: null
        social_image:
          url: null
        template: moon
    PagesRemovePageByIdResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    PagesRemovePageById422Response:
      type: object
      properties:
        doubled_module:
          type: object
          properties:
            const_name:
              type: string
              example: Page
            object:
              type: string
              example: Page
        __expired:
          type: boolean
          example: false
        name:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        __sending_message:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
      example:
        doubled_module:
          const_name: Page
          object: Page
        __expired: false
        name: null
        __sending_message: null
    PagesUpdatePageDetailsResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    PagesUpdatePageDetails422Response:
      type: object
      properties:
        title:
          type: string
          example: Behold the Man
        description:
          type: string
          example: Blanditiis sunt vel inventore.
        id:
          type: number
          example: 9
        slug:
          type: string
          example: kidnap-outside
        is_top_level_path:
          type: boolean
          example: false
        landing_page:
          type: boolean
          example: false
        body_html:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_json:
          type: string
          nullable: true
          x-konfig-null-placeholder: true
        body_markdown:
          type: string
          example: Voluptatum fugit quisquam occaecati.
        processed_html:
          type: string
          example: |+
            <p>Voluptatem beatae provident sed.</p>

        social_image:
          type: object
          properties:
            url:
              type: string
              nullable: true
              x-konfig-null-placeholder: true
        template:
          type: string
          example: moon
      example:
        title: Behold the Man
        description: Blanditiis sunt vel inventore.
        id: 9
        slug: kidnap-outside
        is_top_level_path: false
        landing_page: false
        body_html: null
        body_json: null
        body_markdown: Voluptatum fugit quisquam occaecati.
        processed_html: |+
          <p>Voluptatem beatae provident sed.</p>

        social_image:
          url: null
        template: moon
    PodcastepisodesListByDescendingPublicationDateResponse:
      type: array
      items:
        $ref: '#/components/schemas/PodcastEpisodeIndex'
    PodcastepisodesListByDescendingPublicationDate404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    ProfileImagesGetByUsernameResponse:
      type: object
      items:
        $ref: '#/components/schemas/ProfileImage'
    ProfileImagesGetByUsername404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    ReactionsToggleUserReactionResponse:
      type: object
      properties:
        result:
          type: string
          example: create
        category:
          type: string
          example: like
        id:
          type: number
          example: 1
        reactable_id:
          type: number
          example: 29
        reactable_type:
          type: string
          example: Article
      example:
        result: create
        category: like
        id: 1
        reactable_id: 29
        reactable_type: Article
    ReactionsToggleUserReaction401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ReactionsCreateReactionResponse:
      type: object
      properties:
        result:
          type: string
          example: none
        category:
          type: string
          example: like
        id:
          type: number
          example: 3
        reactable_id:
          type: number
          example: 31
        reactable_type:
          type: string
          example: Article
      example:
        result: none
        category: like
        id: 3
        reactable_id: 31
        reactable_type: Article
    ReactionsCreateReaction401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    ReadinglistGetUserReadinglistResponse:
      type: array
      items:
        $ref: '#/components/schemas/ArticleIndex'
    ReadinglistGetUserReadinglist401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    TagsListByPopularityResponse:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    UsersSuspendUserResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersSuspendUser404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersRemoveLimitsResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersRemoveLimits404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersAddLimitedRoleResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersAddLimitedRole404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersRemoveSpamRoleResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersRemoveSpamRole404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersAssignSpamRoleResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersAssignSpamRole404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersRemoveTrustedRoleResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersRemoveTrustedRole404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersAddTrustedRoleResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersAddTrustedRole404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersGetInformationResponse:
      type: object
      items:
        $ref: '#/components/schemas/MyUser'
    UsersGetInformation401Response:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersGetByIdOrUsernameResponse:
      type: object
      items:
        $ref: '#/components/schemas/ExtendedUser'
    UsersUnpublishUserArticlesAndCommentsResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersUnpublishUserArticlesAndComments404Response:
      type: object
      properties:
        error:
          type: string
          example: not found
        status:
          type: number
          example: 404
      example:
        error: not found
        status: 404
    UsersInviteUserResponse:
      type: object
      properties:
        error:
          type: string
          example: unauthorized
        status:
          type: number
          example: 401
      example:
        error: unauthorized
        status: 401
    UsersInviteUser422Response:
      type: object
      properties:
        error:
          type: string
          example: 'param is missing or the value is empty: email'
        status:
          type: number
          example: 422
      example:
        error: 'param is missing or the value is empty: email'
        status: 422
    VideosListByPopularityResponse:
      type: array
      items:
        $ref: '#/components/schemas/VideoArticle'
security:
  - api-key: []
