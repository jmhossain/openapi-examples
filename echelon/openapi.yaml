openapi: 3.0.3
info:
  title: Public API
  description: >-
    Echelon solutions simplify your payment process, and offer a wide range of
    features & services to help your business run smoothly.

    With our cutting edge technology, global coverage, our alternative solutions
    - we will connect your business with over 1 billion consumers across Asia.

    Echelon offers you an All-In-One API integration, giving your clients access
    to their preferred local payment method that's also available in their
    native language.

    Offering your business a wide range of services from payments, settlements
    that are both local and international, international remittance and more,
    Echelon is your one stop shop for all things payments.

    We are here to bring you one step closer to expanding your business in East
    and South Asia.
  version: '2.47'
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - description: Sandbox server (uses test data)
    url: https://api.sandbox.echelonpay.com
  - description: Live server (uses live data)
    url: https://api.echelonpay.com
tags:
  - description: Common methods that can be used for payin and payouts.
    name: Payments
  - description: >-
      Incoming payment (payin) is an operation where money is sent from the
      customer account to the merchant account.
    name: Incoming payments
  - description: >-
      Outgoing payment (payout) is an operation where money is sent from the
      merchant account to another account.
    name: Outgoing payments
  - description: Authentication and authorization.
    name: Auth
  - description: Accounts.
    name: Accounts
  - description: Merchant information.
    name: Merchant info
paths:
  /payins/!availablePaymentOptions:
    post:
      tags:
        - Incoming payments
      summary: Available payment options.
      operationId: IncomingPayments_getOptions
      security:
        - httpAuth: []
      description: >-
        Usually the first step when creating a new payment.


        Returns payment methods and payment operators available for the
        requested amount, currency and (optionally) the customer segment.


        The API documentation describes currently supported list of
        `paymentMethodCode`.

        Be aware that to return more items than described is classified as a
        backward-compatible change.

        The list of supported payment methods will grow in the future.

        New payment method is returned only when you have the method configured
        in your account.


        A complete payment flow description can be found in [Accept Incoming
        Payment](payin.html) section of our documentation.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: 'TODO: Add description of Id-Customer header'
          name: Id-Customer
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequested'
        required: true
      responses:
        '200':
          description: >-
            The list of possible payment options.

            The list always contains at least one payment option.

            If no available payment options are found, an HTTP 406 response is
            returned with the error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailablePayinOptionList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingPaymentsGetOptionsResponse'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payouts/!availablePaymentOptions:
    post:
      tags:
        - Outgoing payments
      summary: Available payment options.
      operationId: OutgoingPayments_getAvailablePaymentOptions
      security:
        - httpAuth: []
      description: >-
        Usually the first step when creating a new payment.


        Returns payment methods and payment operators available for the
        requested amount, currency and (optionally) the customer segment.


        The API documentation describes currently supported list of
        `paymentMethodCode`.

        Be aware that to return more items than described is classified as a
        backward-compatible change.

        The list of supported payment methods will grow in the future.

        New payment method is returned only when you have the method configured
        in your account.


        A complete payment flow description can be found in [Accept Outgoing
        Payment](payout.html) section of our documentation.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: 'TODO: Add description of Id-Customer header'
          name: Id-Customer
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequested'
        required: true
      responses:
        '200':
          description: >-
            The list of possible payment options.

            The list always contains at least one payment option.

            If no available payment options are found, an HTTP 406 response is
            returned with the error code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailablePayoutOptionList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OutgoingPaymentsGetAvailablePaymentOptionsResponse
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payins/{idPayin}:
    get:
      tags:
        - Incoming payments
      summary: Incoming payment detail.
      operationId: IncomingPayments_getDetails
      security:
        - httpAuth: []
      description: Payment details including payment status and all collected data.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayin'
      responses:
        '200':
          description: Detail of incoming payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinDetail'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingPaymentsGetDetailsResponse'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
    post:
      tags:
        - Incoming payments
      summary: Create payment.
      operationId: IncomingPayments_createPaymentRequest
      security:
        - httpAuth: []
      description: >-
        Create a new payment request (incoming payment - merchant will get money
        from other account).


        For getting list of the available payment options use [`POST
        /payins/!availablePaymentOptions`](https://developers.echelonpay.com)
        API.

        A complete payment flow description can be found in [Accept
        Payment](payorder.html) section.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: 'TODO: Add description of Id-Customer header'
          name: Id-Customer
          in: header
          required: false
          schema:
            type: string
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payin'
        required: true
      responses:
        '201':
          description: The payment has been accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinAcceptedResponse'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/IncomingPaymentsCreatePaymentRequestResponse
        '409':
          description: >-
            The provided Merchant Order ID is duplicated. The payment has not
            been accepted.

            For more info about request IDs concepts see our [Request
            IDs](general.html#request-ids) section of our documentation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
      callbacks:
        statusChange:
          '{$request.body#/callbackUrl}':
            post:
              operationId: createPayin_statusChange
              description: >
                Status of the given payment has changed.

                Use `GET /payins/{idPayin}` endpoint to obtain the detail
                information about the payment and its status.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        idEntity:
                          description: Unique payment id provided by merchant.
                          example: ddd013a5d146
                          type: string
                          minLength: 1
                          maxLength: 250
                          pattern: ^[A-Za-z0-9_-]+$
                      required:
                        - idEntity
              responses:
                '200':
                  description: >-
                    Expected merchant server response code. In case of other
                    response code, the callback will be repeated 4 times with 2
                    minutes interval.
  /payouts/{idPayout}:
    get:
      tags:
        - Outgoing payments
      summary: Outgoing payment detail.
      operationId: OutgoingPayments_getDetail
      security:
        - httpAuth: []
      description: Payment details including payment status and all collected data.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayout
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayout'
      responses:
        '200':
          description: Detail of outgoing payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutDetail'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutgoingPaymentsGetDetailResponse'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
    post:
      tags:
        - Outgoing payments
      summary: Create outgoing payment.
      operationId: OutgoingPayments_createRequest
      security:
        - httpAuth: []
      description: >-
        Create a new outgoing payment request (merchant send money to other
        account).


        A complete payment flow description can be found in [Outgoing
        Payment](payout.html) section.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: 'TODO: Add description of Id-Customer header'
          name: Id-Customer
          in: header
          required: false
          schema:
            type: string
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayout
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayout'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payout'
        required: true
      responses:
        '201':
          description: The outgoing payment has been accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutAccepted'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutgoingPaymentsCreateRequestResponse'
        '409':
          description: >-
            The provided Merchant Order ID is duplicated. The payment has not
            been accepted.

            For more info about request IDs concepts see our [Request
            IDs](general.html#request-ids) section of our documentation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
      callbacks:
        statusChange:
          '{$request.body#/callbackUrl}':
            post:
              operationId: createPayout_statusChange
              description: >
                Status of the given outgoing payment has changed.

                Use `GET /payouts/{idPayout}` endpoint to obtain the detail
                information about the outgoing payment status.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        idEntity:
                          description: Unique payment id provided by merchant.
                          example: ddd013a5d146
                          type: string
                          minLength: 1
                          maxLength: 250
                          pattern: ^[A-Za-z0-9_-]+$
                      required:
                        - idEntity
              responses:
                '200':
                  description: >-
                    Expected merchant server response code. In case of other
                    response code, the callback will be repeated 4 times with 2
                    minutes interval.
  /payins/{idPayin}/!setExternalReference:
    post:
      tags:
        - Incoming payments
      summary: Set external reference for the payment.
      operationId: payin_setExternalReference
      security:
        - httpAuth: []
      description: >-
        Set external reference for the payment. Usually offline payments methods
        require additional payment reference as last step of payment process,
        these references are provided manully by the customer when payment is
        completed.

        See list of our [supported payment methods](payin-methods.html) to check
        which of them require to set the external payment reference.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayin'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalReference'
        required: true
      responses:
        '204':
          description: External reference has been set.
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /balances:
    get:
      tags:
        - Accounts
      summary: Account balance.
      operationId: Accounts_getBalances
      security:
        - httpAuth: []
      description: >-
        Account balances for all selected currencies.

        If no currency is selected, all available are returned.

        If account in selected currency is not available, currency is ignored
        and no balance is returned.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - name: currencyCodes
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CommaSeparatedCurrencyCodes'
      responses:
        '200':
          description: Account balances for all selected currencies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetBalancesResponse'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payins/{idPayin}/accounts:
    get:
      tags:
        - Incoming payments
      summary: Incoming payment accounts details.
      operationId: payin_accounts
      security:
        - httpAuth: []
      description: >-
        Payment account details including data collected during the payment
        process.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Unique Merchant Order ID provided by merchant. See [Request
            IDs](general.html#request-ids).
          name: idPayin
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdPayin'
      responses:
        '200':
          description: Detail of incoming payment accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAccountDetail'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayinAccountsResponse'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /merchant-info:
    get:
      tags:
        - Merchant info
      summary: Merchant information.
      operationId: MerchantInfo_getInfo
      security:
        - httpAuth: []
      description: >-
        Return information about the merchant authorised by [JWT
        token](general.html#security).
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Merchant information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantInfo'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /currencies:
    get:
      tags:
        - Payments
      summary: Currencies.
      operationId: Payments_getCurrencies
      security:
        - httpAuth: []
      description: >-
        Return list of currencies available for the current merchant (according
        to content of the [JWT token](general.html#security)).


        New currency codes may be added without further notice and are
        considered as non breaking change and do not affect API version.


        Fiat currency codes are based on 3-letter ISO 4217. Crypto currency
        codes are based on commonly used codes.


        For available currencies please refer to section "available currencies"
        on merchant detail page in Merchant Back-office. To add new available
        currency please contact our support.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: List of available currencies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /segments:
    get:
      tags:
        - Payments
      summary: Segments.
      operationId: Payments_listSegments
      security:
        - httpAuth: []
      description: Return list of customer segments available in the system.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: List of available segments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payment-operators:
    get:
      tags:
        - Payments
      summary: Payment operators.
      operationId: Payments_getOperatorsList
      security:
        - httpAuth: []
      description: >-
        Return list of [payment
        operators](terminology.html#term-Payment-operator) available in the
        system.


        New payment operators codes may be added without further notice and are
        considered as non breaking change and do not affect API version.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: List of available payment operators.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOperatorList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payment-methods:
    get:
      tags:
        - Payments
      summary: Payment methods.
      operationId: Payments_listPaymentMethods
      security:
        - httpAuth: []
      description: >-
        Return list of [payment methods](terminology.html#term-Payment-method)
        available in the system.


        New payment method codes may be added without further notice and are
        considered as non breaking change and do not affect API version.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: List of available payment methods.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodsList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /payment-options:
    get:
      tags:
        - Payments
      summary: Payment options.
      operationId: Payments_getPaymentOptions
      security:
        - httpAuth: []
      description: >-

        Return [payment options](terminology.html#term-Payment-option)
        (combination of payment methods and corresponding payment operators)
        (possibly) available for the merchant specified in the authorization
        token, optionally filtered by the query parameters.


        The API documentation describes currently supported list of
        `paymentMethodCode`.

        Be aware that to return more items than described is classified as a
        backward-compatible change.

        The list of supported payment methods will grow in the future.

        New payment method is returned only when you have the method configured
        in your account.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
        - name: paymentTypeCode
          in: query
          required: false
          schema:
            description: Payment direction from the merchant's point of view.
            type: string
            enum:
              - PAYIN
              - PAYOUT
        - name: paymentMethodCodes
          in: query
          required: false
          schema:
            description: >-
              Comma separated list of requested payment method codes.

              See request body for `paymentMethodCode` description and [Query
              for multiple values](general.html#query-for-multiple-values)
              section.
            type: string
            example: OFFLINE,ONLINE
        - name: currencyCodes
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CommaSeparatedCurrencyCodes'
        - name: segmentCodes
          in: query
          required: false
          schema:
            description: >-
              Comma separated list of requested segment codes.

              See [`GET /segments`](https://developers.echelonpay.com) API and
              [Query for multiple
              values](general.html#query-for-multiple-values) section.
            type: string
        - name: paymentOperatorCodes
          in: query
          required: false
          schema:
            description: >-
              Comma separated list of payment operator codes.

              See request body for `paymentOperators` description and [Query for
              multiple values](general.html#query-for-multiple-values) section.
            type: string
            example: IDR_003,IDR_004
      responses:
        '200':
          description: List of (possibly) available payment options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptionsList'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '401':
          description: >-
            Request was not authenticated. Missing or wrong "authorization"
            token header.

            See [401 Unauthorized](responseCodes.html#term-401-Unauthorized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "authorization" token header does
            not have permission to process the request.

            See [Fine-grained privileges](general.html#fine-grained-privileges)
            description or general [403
            Forbidden](responseCodes.html#term-403-Forbidden) info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsGetPaymentOptionsResponse'
        '410':
          description: Entity not found. See [410 Gone](responseCodes.html#term-410-Gone).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '429':
          description: >-
            Too many requests. See [429 Too Many
            Requests](responseCodes.html#term-429-Too-Many-Requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /auth-tokens:
    post:
      tags:
        - Auth
      summary: Authorization token.
      operationId: Auth_issueJwt
      description: >

        Issues JSON Web Token (JWT) that can be used to call authorized payment
        API.


        Validates the secret and responds with a JWT allowing the given merchant
        access to the given endpoints.


        For more info about security concepts see the
        [Security](general.html#security) section.


        For more info about payment web app integration security see the
        [Payment Web App - Auth
        Token](payin-webapp.html#get-a-authorization-token) section.


        For more info about direct integration security see the [Direct
        integration - Authentication and Authorization](payin-common.html)
        section.
      parameters:
        - description: Required API version. See [Versioning](general.html#versioning)
          name: X-API-Version
          in: header
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      responses:
        '200':
          description: >-
            Auth token for required operations. The Auth token payload can be
            decoded at [JWT official webiste](https://jwt.io/).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          description: |-
            An error has been encountered while validating the input parameters.
            The request is not valid according to this OAS document.

            Some possible mistakes are:

             * wrong data type
             * required field is missing or empty
             * wrong value for field defined by enum
             * maximum length or other constraint violation

            See also [400 Bad Request](responseCodes.html#term-400-Bad-Request).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '403':
          description: >-
            Request was not authorized. Used "secret" body attribute does not
            have permission to process the request.

            See [403 Forbidden](responseCodes.html#term-403-Forbidden).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        '406':
          description: >-
            Input does not meet business validations. See [406 Not
            Acceptable](responseCodes.html#term-406-Not-Acceptable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthIssueJwtResponse'
        '500':
          description: >-
            Server error. See [5XX Internal Server
            Error](responseCodes.html#term-5XX-Internal-Server-Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
components:
  schemas:
    AccountCustomerResponseCapitecPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
          pattern: ^[0-9]*$
          minLength: 10
          maxLength: 10
    AccountCustomerResponseDuitNow:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
    AccountCustomerResponsePayMe:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
    AccountCustomerResponsePromptPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      required:
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
    AccountCustomerResponseQrPh:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
    AccountCustomerResponseVaPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment.
          type: string
    AccountPayinRequestCapitecPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. This account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
          pattern: ^[0-9]*$
          minLength: 10
          maxLength: 10
    AccountPayinRequestDuitNow:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. This account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestEWallet:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the wallet account
            which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
    AccountPayinRequestIMPS:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestNetBanking:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestOffline:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.


            If currency is CNY, JPY or KRW, then accountName field is required.
            Otherwise, it is optional.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.


            If currency is THB, then accountNumber field is required. Otherwise,
            it is optional.
          type: string
    AccountPayinRequestOnline:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestP2AV2:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.


            If currency is INR, then accountName field is required. Otherwise,
            it is optional.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestPayMe:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestPromptPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestQrPh:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. This account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestQrisPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestVaPay:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayinRequestVaPayVerif:
      description: >-
        Parameters of your customer's bank or wallet account which your customer
        sends funds from. These account parameters are used for the sender's
        account verification in processing of the payment.

        Which parameters are mandatory depends on the payment method and the
        currency your customer choose to pay.
      required:
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Account Name is the name of the person who holds the bank or wallet
            account which your customer sends funds from to make his payment.

            The name should be in the same format as the account holder name of
            the account. Must not contain numbers, allows some special
            characters and UNICODE symbols, see validation pattern.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Account Number is the number of your customer's bank account which
            your customer sends funds from to make his payment. Must contain
            only numbers.
          type: string
    AccountPayoutRequestBankTransfer:
      description: >-
        Parameters of a customer's bank account where your customer would like
        his funds to be transferred.

        The returned parameters are depended on the payout request currency.
      required:
        - accountName
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Name of a customer's bank account where your customer would like his
            funds to be transferred.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Number of a customer's bank account where your customer would like
            his funds to be transferred.
          type: string
        accountType:
          description: >-
            Account type of the receiving bank account.


            * If payout currency is JPY, then accountType field is required and
            requested value has to be "savings", "checking", "private",
            "corporate", "general" or "current".

            * If payout currency is ZAR, then accountType field is required and
            requested value has to be "savings", "current", "cheque",
            "transmission".


            Otherwise, accountType is optional.
          type: string
        bankCode:
          description: >-
            Bank code of the bank where your customer would like his funds to be
            transferred.


            If currency is INR, then bankCode field is required and requested
            value has to be an Indian Financial System Code (IFSC bank code).
            Otherwise, it is optional.
          type: string
          minLength: 1
        bankName:
          description: >-
            Name of the bank where your customer would like his funds to be
            transferred.
          type: string
          minLength: 1
        bankBranch:
          description: >-
            Branch name of the bank where your customer would like his funds to
            be transferred.


            If payouts currency is JPY, then bankBranch field is required.
            Otherwise, it is optional.
          type: string
          minLength: 1
        bankCity:
          description: >-
            City of the bank where your customer would like his funds to be
            transferred.
          type: string
          minLength: 1
        bankProvince:
          description: >-
            Province of the bank where your customer would like his funds to be
            transferred.
          type: string
          minLength: 1
    AccountPayoutRequestCryptoTransfer:
      description: >-
        Parameters of a customer's crypto wallet information where your customer
        would like his funds to be transferred.
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: >-
            Address of a customer's crypto wallet where your customer would like
            his funds to be transferred.
          type: string
          pattern: ^[a-zA-Z0-9]*$
          minLength: 1
          maxLength: 62
    AccountPayoutRequestWalletTransfer:
      description: >-
        Parameters of a customer's wallet information where your customer would
        like his funds to be transferred.
      type: object
      properties:
        accountName:
          description: >-
            Name of a person who holds a wallet where your customer would like
            his funds to be transferred.


            If currency is INR, then accountName field is required. Otherwise,
            it is optional.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Address of customer's wallet where your customer would like his
            funds to be transferred.
          type: string
          example: 123456789@paytm
          pattern: ^[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9_\.]+$
          minLength: 1
          maxLength: 100
    AccountResponseCryptoOffline:
      description: >-
        Parameters of a crypto wallet where we expect that your customer send
        funds to make a payment. These parameters has to be provided to your
        customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          description: >-
            Address of the crypto wallet where we expect that your customer
            sends funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
    AccountResponseDetail:
      type: object
      properties:
        accountName:
          description: Name of the bank account.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: Number of the bank account.
          type: string
        accountType:
          description: Type of the bank account.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        bankCode:
          description: Bank code of the bank.
          type: string
          minLength: 1
        paymentOperator:
          description: Payment operator code.
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        bankName:
          description: Name of the bank.
          type: string
          minLength: 1
        bankBranch:
          description: Branch name of the bank.
          type: string
          minLength: 1
        bankCity:
          description: City of the bank.
          type: string
          minLength: 1
        bankProvince:
          description: Province of the bank.
          type: string
          minLength: 1
    AccountResponseOffline:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      required:
        - accountName
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Name of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Number of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
        accountType:
          description: >-
            Account type of the receiving bank account e.g. Normal / Current. It
            is used for payments in JPY currency.
          type: string
        bankCode:
          description: >-
            Bank code of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankName:
          description: >-
            Name of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankBranch:
          description: >-
            Branch name of the bank where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankCity:
          description: >-
            City of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankProvince:
          description: >-
            Province of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
    AccountResponseOnlyWithBank:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      type: object
      properties:
        accountName:
          type: string
          deprecated: true
        accountNumber:
          type: string
          deprecated: true
        bankCode:
          description: >-
            Bank code of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankName:
          description: >-
            Name of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankBranch:
          description: >-
            Branch name of the bank where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankCity:
          description: >-
            City of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankProvince:
          description: >-
            Province of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
      deprecated: true
    AccountResponseP2AV2:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Name of the bank account where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Number of the bank account where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
        bankCode:
          description: >-
            Bank code of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankName:
          description: >-
            Name of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankBranch:
          description: >-
            Branch name of the bank where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankCity:
          description: >-
            City of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
        bankProvince:
          description: >-
            Province of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          deprecated: true
          minLength: 1
      deprecated: true
    AccountResponsePayMe:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      type: object
      properties:
        accountName:
          description: >-
            Name of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
    AccountResponseQrPh:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      required:
        - accountName
      type: object
      properties:
        accountName:
          description: >-
            Name of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
    AccountResponseWithBank:
      description: >-
        Parameters of a bank account where we expect that your customer send
        funds to make a payment. These account parameters has to be provided to
        your customer in form of an payment instructions.

        The returned parameters are depended on the payment method and currency
        your customer choose to pay.
      required:
        - accountName
        - accountNumber
      type: object
      properties:
        accountName:
          description: >-
            Name of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
          pattern: ^(\p{L}\p{M}*?|[, ;:_'"!%=@#&\-\.\?\$\(\)\+\*\|])*$
          minLength: 1
          maxLength: 64
        accountNumber:
          description: >-
            Number of the bank account where we expect that your customer sends
            funds to make a payment.

            This parameter is to be shown to your customer in the payment
            instructions.
          type: string
        bankCode:
          description: >-
            Bank code of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankName:
          description: >-
            Name of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankBranch:
          description: >-
            Branch name of the bank where we expect that your customer sends
            funds to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankCity:
          description: >-
            City of the bank where we expect that your customer sends funds to
            make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
        bankProvince:
          description: >-
            Province of the bank where we expect that your customer sends funds
            to make a payment.

            If this parameter contains any value then show it to your customer
            in the payment instructions.
          type: string
          minLength: 1
    AuthTokenRequest:
      required:
        - merchantCode
        - secret
      type: object
      properties:
        merchantCode:
          description: >-
            Your Merchant ID. This Merchant ID is obtained upon [Merchant
            enrollment process](sandbox.html#sandbox-account-registration).
          type: string
          example: YOUR_MERCHANT_ID
          minLength: 1
        secret:
          description: See [Merchant Secret Key](terminology.html#term-Merchant-secret).
          type: string
          example: YOUR_MERCHANT_SECRET_KEY
          minLength: 1
          maxLength: 1000
        validitySecs:
          description: >-
            Validity of the token in seconds. Maximum value 3600, default value
            1800 (30 minutes).
          type: integer
          format: int32
          example: 600
          minimum: 60
          maximum: 3600
        operations:
          description: >-
            Endpoints that can be called with the issued token. See
            [Fine-grained privileges](general.html#fine-grained-privileges)
            description.
          type: array
          items:
            description: Allowed endpoint, format "METHOD url".
            type: string
            example: |-
              ```
              [
                "POST /payins/!availablePaymentOptions",
                "POST /payins/TST-112233",
                "GET /payins/TST-112233"
              ]
              ```
            pattern: ^(POST|GET|PATCH|PUT|DELETE) /[^ ]+
            minLength: 1
            maxLength: 1000
          minItems: 1
        money:
          $ref: '#/components/schemas/MoneyAuthRequest'
    AuthTokenResponse:
      description: >-
        Auth token for required operations. The Auth token payload can be
        decoded at [JWT official webiste](https://jwt.io/).
      required:
        - token
      type: object
      properties:
        token:
          description: >-
            The JWT, its content can be [decoded at jwt.io](https://jwt.io/).
            See also [token content explanation](https://jwt.io/introduction).


            Example content


            ```

            {
              "operations": [
                "POST /payins/123"
              ],
              "exp": 1619518389,
              "jti": "53ee5f14-5ca5-4034-815e-815de85b96c5",
              "iat": 1619514789,
              "sub": "YOUR_MERCHANT_ID"
            }

            ```


            The token contains the following data
             - operations - allowed endpoints, see [Fine-grained privileges](general.html#fine-grained-privileges) for details.
             - exp - expiration time as number of seconds from 1970-01-01T00:00:00Z UTC
             - jti - JWT id
             - iat - issued at, time when the token was created as number of seconds from 1970-01-01T00:00:00Z UTC
             - sub - subject, the [merchant code](terminology.html#term-Merchant-code)
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcGVyYXRpb25zIjpbIlBPU1QgL3BheW1lbnRzLzEyMyJdLCJleHAiOjE2MTk1MTgzODksImp0aSI6IjUzZWU1ZjE0LTVjYTUtNDAzNC04MTVlLTgxNWRlODViOTZjNSIsImlhdCI6MTYxOTUxNDc4OSwic3ViIjoiWU9VUl9NRVJDSEFOVF9DT0RFIn0.BpeTH0t9eLRKEsuukq8d9o1XTaQhuqfHOpmdTUqGRW0
          minLength: 1
    AvailablePayinOption:
      required:
        - paymentMethodCode
      type: object
      properties:
        paymentMethodCode:
          $ref: '#/components/schemas/PayinMethodCode'
        paymentOperators:
          type: array
          items:
            description: >-
              PaymentOperator is a financial institution that manages
              transactions in your customer's account (such as banks, card
              payment processors, mobile wallets and so on).

              The payment operators are assigned to the payment methods
              according to your account configuration.


              For supported payment operators please refer to [`GET
              /payment-operators`](https://developers.echelonpay.com).
            $ref: '#/components/schemas/PaymentOperatorIncoming'
        segmentCode:
          $ref: '#/components/schemas/SegmentCode'
    AvailablePayinOptionList:
      description: >-
        The list of possible payment options.

        The list always contains at least one payment option.

        If no available payment options are found, an HTTP 406 response is
        returned with the error code.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AvailablePayinOption'
        dataVariantCurrencies:
          type: array
          items:
            $ref: '#/components/schemas/AvailablePayinOptionVariantCurrency'
    AvailablePayinOptionVariantCurrency:
      required:
        - paymentMethodCode
        - money
      type: object
      properties:
        paymentMethodCode:
          $ref: '#/components/schemas/PayinMethodCode'
        paymentOperators:
          type: array
          items:
            description: >-
              PaymentOperator is a financial institution that manages
              transactions in your customer's account (such as banks, card
              payment processors, mobile wallets and so on).

              The payment operators are assigned to the payment methods
              according to your account configuration.


              For supported payment operators please refer to [`GET
              /payment-operators`](https://developers.echelonpay.com).
            $ref: '#/components/schemas/PaymentOperatorIncoming'
        segmentCode:
          $ref: '#/components/schemas/SegmentCode'
        money:
          $ref: '#/components/schemas/Money'
    AvailablePayoutOption:
      required:
        - paymentMethodCode
      type: object
      properties:
        paymentMethodCode:
          $ref: '#/components/schemas/PayoutMethodCode'
        paymentOperators:
          type: array
          items:
            $ref: '#/components/schemas/PaymentOperatorOutgoing'
        segmentCode:
          $ref: '#/components/schemas/SegmentCode'
    AvailablePayoutOptionList:
      description: >-
        The list of possible payment options.

        The list always contains at least one payment option.

        If no available payment options are found, an HTTP 406 response is
        returned with the error code.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AvailablePayoutOption'
    Balance:
      required:
        - currencyCode
        - balance
        - availableBalance
        - pendingSettlementAmount
        - pendingPayoutAmount
        - lastBalanceMovement
      type: object
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        balance:
          description: Current balance, may include pending payouts or settlements.
          type: number
        availableBalance:
          description: >-
            Available balance, ready to use for payouts, settlements or other
            movements. It is calculated as balance - (pendingSettlementAmount +
            pendingPayoutAmount).
          type: number
        pendingSettlementAmount:
          description: Amount of settlements waiting to be processed.
          type: number
        pendingPayoutAmount:
          description: Amount of payouts waiting to be processed.
          type: number
        lastBalanceMovement:
          description: >-
            Date and time of last update of balance or available balance on this
            account.
          type: string
          format: date-time
    BalanceList:
      description: The list of account balances by currency.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    BankTransferMethod:
      title: BANK_TRANSFER
      description: >-
        Payment method for sending funds from your account to external bank
        account using a country specific payment system to process bank
        transfers.

        It required customer to provide a receiving bank account details which
        are required by local payment system to process bank transfers.
      required:
        - account
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayoutRequestBankTransfer'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        remark:
          type: string
        paymentMethodCode:
          type: string
          enum:
            - BANK_TRANSFER
    BankTransferMethodResponse:
      title: BANK_TRANSFER
      required:
        - idPayout
        - idPayment
        - paymentMethodCode
        - reference
      type: object
      properties:
        idPayout:
          $ref: '#/components/schemas/IdPayout'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        paymentMethodCode:
          type: string
          enum:
            - BANK_TRANSFER
        reference:
          description: Reference number of transaction.
          type: string
    BasicError:
      type: object
      properties:
        description:
          type: string
    CapitecPayMethod:
      title: CAPITEC_PAY
      description: >-
        Capitec Pay is an easy, fast and safe way to pay without having to enter
        the bank card details or share banking login information. The customer
        can choose the account he wants to pay from and authenticate the payment
        safely in the banking app.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestCapitecPay'
        phoneNumber:
          description: Your customer mobile phone number.
          type: string
          example: '0888777666'
          minLength: 10
          maxLength: 10
        said:
          type: string
          pattern: ^[0-9]*$
          minLength: 13
          maxLength: 13
        paymentMethodCode:
          type: string
          enum:
            - CAPITEC_PAY
    CapitecPayMethodResponse:
      title: CAPITEC_PAY
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponseCapitecPay'
        phoneNumber:
          description: Your customer mobile phone number.
          type: string
          example: '0888777666'
          minLength: 10
          maxLength: 10
        said:
          type: string
          pattern: ^[0-9]*$
          minLength: 13
          maxLength: 13
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - CAPITEC_PAY
    ChannelInfo:
      description: >-
        Merchant information which is supposed to be displayed to a customer
        during payment process in the [Payment Web App](payin-webapp.html) or
        your UI supporting payment flow.

        Merchant information setup is available in the Merchant BackOffice
        portal.
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: YOUR_MERCHANT_CHANNEL_NAME
          minLength: 1
          maxLength: 1000
    CommaSeparatedCurrencyCodes:
      description: >-
        List of requested currencies.


        How to send multiple values please refer to  [Query for multiple
        values](general.html#query-for-multiple-values) section.


        For supported currencies please refer to [`GET
        /currencies`](https://developers.echelonpay.com).
      type: string
      example: EUR,USD
    CryptoOfflineMethod:
      title: CRYPTO_OFFLINE
      description: >-
        Crypto Offline is a payment method that allows customers to pay by
        crypto currency from they crypto wallet to an address that they are
        provided.
      required:
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - CRYPTO_OFFLINE
    CryptoOfflineMethodResponse:
      title: CRYPTO_OFFLINE
      required:
        - idPayin
        - idPayment
        - account
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - paymentOperator
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseCryptoOffline'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - CRYPTO_OFFLINE
    CryptoTransferMethod:
      title: CRYPTO_TRANSFER
      description: >-
        Payment method for sending funds from your crypto wallet to external
        crypto wallet.

        It requires customer to provide a receiving crypto wallet details in
        format related to chosen blockchain protocol.
      required:
        - account
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayoutRequestCryptoTransfer'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        remark:
          type: string
        paymentMethodCode:
          type: string
          enum:
            - CRYPTO_TRANSFER
    CryptoTransferMethodResponse:
      title: CRYPTO_TRANSFER
      required:
        - idPayout
        - idPayment
        - paymentMethodCode
        - reference
      type: object
      properties:
        idPayout:
          $ref: '#/components/schemas/IdPayout'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        paymentMethodCode:
          type: string
          enum:
            - CRYPTO_TRANSFER
        reference:
          description: Reference number of transaction.
          type: string
    Currency:
      required:
        - code
      type: object
      properties:
        code:
          $ref: '#/components/schemas/CurrencyCode'
    CurrencyCode:
      description: >-
        For supported currencies please refer to [`GET
        /currencies`](https://developers.echelonpay.com).
      type: string
      example: USD
      minLength: 1
    CurrencyList:
      description: List of available currencies.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
    CustomerTransactionFee:
      description: >-
        Additional fee for customer not included in transaction amount. E.g. gas
        fee for crypto transactions.
      type: object
      properties:
        minFee:
          $ref: '#/components/schemas/Money'
        maxFee:
          $ref: '#/components/schemas/Money'
    DuitNowMethod:
      title: DUITNOW
      description: >-
        Payment method which requires customer to scan QR code from the Payment
        application by Customer's Payment service application right after the
        payment is submitted.
      required:
        - account
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestDuitNow'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - DUITNOW
    DuitNowPayMethodResponse:
      title: DUITNOW
      required:
        - idPayin
        - idPayment
        - accountCustomer
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponseDuitNow'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - DUITNOW
    EWalletMethod:
      title: EWALLET
      description: >-
        E-Wallet is a payment option on Indonesian market that allows customers
        to use major Indonesian wallets for payments. Customer is either
        automatically redirected to a chosen wallet with all payment details
        pre-populated to finalize the payment or directly receives push
        notification to authorize the payment in case of OVO wallet.
      required:
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestEWallet'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.


            If payment operator code is ID_OVO, then phoneNumber field is
            required. Otherwise, it is optional.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        paymentMethodCode:
          type: string
          enum:
            - EWALLET
    EWalletMethodResponse:
      title: EWALLET
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - EWALLET
    ExternalReference:
      description: >-
        External payment / transaction reference is a unique identifier assigned
        to a financial transaction. Customers can usually find it in their
        banking service such as mobile wallets, internet banking services or
        bank slips. Example of such refrence is UTR (unique transaction
        reference) in Indian market.
      required:
        - reference
      type: object
      properties:
        reference:
          type: string
          minLength: 1
          maxLength: 512
    FailureReasonCode:
      description: |2
         * `SYSTEM` - Internal error. Contact support for more info.
         * `PAYMENT_PROCESS_ERROR` - There has been error in payment process. Contact support for more info.
         * `ENTITY_EXPIRED` - When entity (incoming payment, outgoing payment) has expired.
         * `DIFFERENT_AMOUNT_CONFIRMED` - Customer sent different amount then requested.
         * `CURRENCY_NOT_SUPPORTED` - The selected currency is not supported by merchant.
         * `CURRENCY_PRECISION_EXCEEDED` - The provided payment amount exceeds the smallest fractional unit allowed for the specified currency.
         * `PAYMENT_METHOD_NOT_FOUND` - No payment method has been found for seleceted payment criteria. Verify your product configuration and contact support for further details.
         * `PAYMENT_METHOD_ERROR` - A processing error has been encountered for payment. An unexpected scenario with required operator intervention, contact support for further details.
         * `PAYMENT_OPERATOR_NOT_FOUND` - The payment operator has not been found.
         * `PAYMENT_OPERATOR_INVALID` - The selected payment operator is not supported for a used payment method.
         * `PAYMENT_OPERATOR_UNAVAILABLE` - The selected payment operator is not available for a used payment method.
         * `PAYMENT_CHANNEL_NO_ACTIVE_FOUND`- No active payment channel that can accept the payment has been found.
         * `PAYMENT_CHANNEL_NO_OPENED_FOUND` - No opened payment channel that can accept the payment has been found.
         * `PAYMENT_CHANNEL_NO_SEGMENT_FOUND` - No payment channel that can accept the payment with the specified segment has been found.
         * `PAYMENT_CHANNEL_AMOUNT_LIMITS` - No payment channel with amount limits suitable for the payment amount has been found.  Limits can be found with [`GET /payment-options`](https://developers.echelonpay.com) API.
         * `PAYMENT_CHANNEL_DAILY_LIMITS` - All the suitable channels reached their daily limits on payment amount. Select different payment method or contact support for limits adjustments.
         * `IP_DENIED` - The provided IP address is denied. It is either found in the blacklist or is not found in the whitelist.
         * `BALANCE_INSUFFICIENT` - The balance is not sufficient for payout.
         * `INVALID_ACCOUNT_NUMBER` - Account number is invalid or does not exist.
         * `INVALID_ACCOUNT_NAME` - Account name provided in the payment does not match the name assigned to the account.
         * `INCORRECT_CURRENCY` - Paid in different currency than payorder currency.
      type: string
      enum:
        - SYSTEM
        - PAYMENT_PROCESS_ERROR
        - ENTITY_EXPIRED
        - DIFFERENT_AMOUNT_CONFIRMED
        - CURRENCY_NOT_SUPPORTED
        - CURRENCY_PRECISION_EXCEEDED
        - PAYMENT_METHOD_NOT_FOUND
        - PAYMENT_METHOD_ERROR
        - PAYMENT_OPERATOR_NOT_FOUND
        - PAYMENT_OPERATOR_INVALID
        - PAYMENT_OPERATOR_UNAVAILABLE
        - PAYMENT_CHANNEL_NO_ACTIVE_FOUND
        - PAYMENT_CHANNEL_NO_OPENED_FOUND
        - PAYMENT_CHANNEL_NO_SEGMENT_FOUND
        - PAYMENT_CHANNEL_AMOUNT_LIMITS
        - PAYMENT_CHANNEL_DAILY_LIMITS
        - IP_DENIED
        - BALANCE_INSUFFICIENT
        - INVALID_ACCOUNT_NUMBER
        - INVALID_ACCOUNT_NAME
        - INCORRECT_CURRENCY
    FailureReasons:
      required:
        - failedAt
        - failureReasonCode
      type: object
      properties:
        failedAt:
          description: Date and time of the payment failure.
          type: string
          format: date-time
        failureReasonCode:
          $ref: '#/components/schemas/FailureReasonCode'
        message:
          description: Additional description of the failure reason.
          type: string
    GetPayinError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |

            Business validation error codes:
             - MERCHANT_INACTIVE - The merchant must be activated to get payment detail.
          type: string
          enum:
            - MERCHANT_INACTIVE
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    GetPaymentOptionsError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |-
            Business validation error codes:

             - MERCHANT_INACTIVE - The merchant must be activated to get available payment options.
             - PAYMENT_OPERATOR_CODE_INVALID - Invalid filter payment operator code.
             - SEGMENT_CODE_INVALID - Invalid filter segment code.
             - PAYMENT_METHOD_CODE_INVALID - Invalid filter payment method code.
          type: string
          enum:
            - MERCHANT_INACTIVE
            - PAYMENT_OPERATOR_CODE_INVALID
            - SEGMENT_CODE_INVALID
            - PAYMENT_METHOD_CODE_INVALID
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    GetPayoutError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |

            Business validation error codes:
             - MERCHANT_INACTIVE - The merchant must be activated to get payment detail.
          type: string
          enum:
            - MERCHANT_INACTIVE
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    IMPSMethod:
      title: IMPS
      description: >-
        It is India market version of the Offline Bank Transfer which differs in
        the data which need to be collected and used during a Payment process.
      required:
        - account
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestIMPS'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - IMPS
    IMPSMethodResponse:
      title: IMPS
      description: >-
        The account parameters for this payment method are used to show payment
        instructions to the customer.
      required:
        - idPayin
        - idPayment
        - account
        - money
        - merchantName
        - reference
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseWithBank'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrCode:
          type: string
          deprecated: true
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - IMPS
    IdPayin:
      description: >-
        Unique Merchant Order ID provided by merchant. See [Request
        IDs](general.html#request-ids).
      type: string
      pattern: ^[A-Za-z0-9_-]+$
      maxLength: 250
    IdPayment:
      description: >-
        The Unique reference ID of the Order generated by platform. It is
        alphanumeric and max length is 250 characters.
      type: string
      pattern: ^[A-Za-z0-9_-]+$
      maxLength: 250
    IdPayout:
      description: >-
        Unique Merchant Order ID provided by merchant. See [Request
        IDs](general.html#request-ids).
      type: string
      pattern: ^[A-Za-z0-9_-]+$
      maxLength: 250
    IntervalNumberTo:
      type: object
      properties:
        from:
          type: number
          minimum: 0
        to:
          type: number
          example: 100
          minimum: 0
    MerchantInfo:
      description: Merchant information.
      required:
        - channelInfo
      type: object
      properties:
        channelInfo:
          $ref: '#/components/schemas/ChannelInfo'
    MobileMoneyMethod:
      title: MOBILE_MONEY
      description: >-
        Mobile Money is a payment method which allows customers to simply
        complete a payment from their mobile money wallet.
      required:
        - paymentMethodCode
      type: object
      properties:
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        paymentMethodCode:
          type: string
          enum:
            - MOBILE_MONEY
    MobileMoneyMethodResponse:
      title: MOBILE_MONEY
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - MOBILE_MONEY
    Money:
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          description: >-
            Amount is accepted in the smallest currency unit. For fiat
            currencies the smallest currency unit are based on ISO 4217 (e.g.
            for USD two decimal places are available so amount can be accepted
            as 12.34).

            The exceptions are IDR and INR currencies: zero amount in decimal
            places are allowed for them (e.g. 42.05 is not allowed, while 42 or
            42.00 or 43 or 43.00 are allowed).


            If more decimal places than supported is provided request will fail
            on HTTP 406 error (e.g. for USD the amount 12.345 will not be
            accepted).
          type: number
          example: 42.05
          exclusiveMinimum: 0
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    MoneyAuthRequest:
      description: >-
        If set, you can use the issued token to create a payment with the
        currency and amount exactly as specified in `money`.
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          description: >-
            Amount is accepted in the smallest currency unit. For fiat
            currencies the smallest currency unit are based on ISO 4217 (e.g.
            for USD two decimal places are available so amount can be accepted
            as 12.34).

            The exceptions are IDR and INR currencies: zero amount in decimal
            places are allowed for them (e.g. 42.05 is not allowed, while 42 or
            42.00 or 43 or 43.00 are allowed).


            If more decimal places than supported is provided request will fail
            on HTTP 406 error (e.g. for USD the amount 12.345 will not be
            accepted).
          type: number
          example: 42.05
          exclusiveMinimum: 0
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    MoneyFee:
      description: Fees charged for this payment.
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          description: >-
            Amount is accepted in the smallest currency unit. For fiat
            currencies the smallest currency unit are based on ISO 4217 (e.g.
            for USD two decimal places are available so amount can be accepted
            as 12.34).

            The exceptions are IDR and INR currencies: zero amount in decimal
            places are allowed for them (e.g. 42.05 is not allowed, while 42 or
            42.00 or 43 or 43.00 are allowed).


            If more decimal places than supported is provided request will fail
            on HTTP 406 error (e.g. for USD the amount 12.345 will not be
            accepted).
          type: number
          example: 42.05
          exclusiveMinimum: 0
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    MoneyRequired:
      description: >-
        Amount of funds which needs to paid by your customer to successfully
        process the payment. If it is not empty then We expect to receive this
        amount from your customer to process the payment order instead of the
        payment request amount however full payment request amount is added to
        your account balance.
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          description: >-
            Amount is accepted in the smallest currency unit. For fiat
            currencies the smallest currency unit are based on ISO 4217 (e.g.
            for USD two decimal places are available so amount can be accepted
            as 12.34).

            The exceptions are IDR and INR currencies: zero amount in decimal
            places are allowed for them (e.g. 42.05 is not allowed, while 42 or
            42.00 or 43 or 43.00 are allowed).


            If more decimal places than supported is provided request will fail
            on HTTP 406 error (e.g. for USD the amount 12.345 will not be
            accepted).
          type: number
          example: 42.05
          exclusiveMinimum: 0
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    MoneyVat:
      description: >-
        Amount of Value-Added Tax is returned in case it's levied on a payment
        order.
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          description: >-
            Amount is accepted in the smallest currency unit. For fiat
            currencies the smallest currency unit are based on ISO 4217 (e.g.
            for USD two decimal places are available so amount can be accepted
            as 12.34).

            The exceptions are IDR and INR currencies: zero amount in decimal
            places are allowed for them (e.g. 42.05 is not allowed, while 42 or
            42.00 or 43 or 43.00 are allowed).


            If more decimal places than supported is provided request will fail
            on HTTP 406 error (e.g. for USD the amount 12.345 will not be
            accepted).
          type: number
          example: 42.05
          exclusiveMinimum: 0
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    NetBankingMethod:
      title: NETBANKING
      description: >-
        Netbanking, also known as online banking or Net Banking is a payment
        option offered by banks and financial institutions on Indian market that
        allow customers to use banking services over the internet. In our case,
        we take advantage of the Netbanking services to offer your customer UPI
        Payment method to pay funds directly from your customer Net Banking
        account.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestNetBanking'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        paymentMethodCode:
          type: string
          enum:
            - NETBANKING
    NetBankingMethodResponse:
      title: NETBANKING
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        upiId:
          description: >-
            Virtual payment address where we expect that your customer sends
            funds to make a payment. This parameter is to be shown to your
            customer.
          type: string
          example: 123456789@paytm
          pattern: '[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9_\.]+'
          maxLength: 100
        deepLink:
          description: >-
            It can be used as deep link button target (what is typically known
            as an intent trigger)

            or to generate a QR code that can be scanned with any UPI enabled
            app.
          type: string
          example: >-
            upi://pay?cu=INR&pa=7304154205@idfcfirst&pn=APEX
            ENTERPRISES&tn=ECLP04211&am=10.00
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - NETBANKING
    OfflineMethod:
      title: OFFLINE
      description: >-
        Offline Bank Transfer. Payment method which requires customer to copy
        Payment instruction from the Payment application right after the
        incoming payment is submitted and create the Payment transfer using the
        instructions within customer's own payment service such as Internet or
        mobile banking or wallet.


        As the Payment relies on the customer offline Payment transfer
        processing it can take minutes for Payment to be confirmed and also
        number of Payment expiration ratio can be higher.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestOffline'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.


            If currency is JPY, then emailAddress field is required. Otherwise,
            it is optional.
          type: string
          example: yourcustomer@domain.com
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        productId:
          description: >-
            Identification of a product related to a payment order. This field
            is returned only if it is provided in a payment order request.
          type: string
          pattern: ^[A-Za-z0-9_-]+$
          maxLength: 30
        paymentMethodCode:
          type: string
          enum:
            - OFFLINE
    OfflineMethodResponse:
      title: OFFLINE
      description: >-
        The account parameters for this payment method are used to show payment
        instructions to the customer.
      required:
        - idPayin
        - idPayment
        - account
        - money
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseOffline'
        money:
          $ref: '#/components/schemas/Money'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        reference:
          description: Reference number of transaction.
          type: string
        processor:
          $ref: '#/components/schemas/PaymentProcessor'
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.


            This parameter is returned only for the VND currency.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        productId:
          description: >-
            Identification of a product related to a payment order. This field
            is returned only if it is provided in a payment order request.
          type: string
          pattern: ^[A-Za-z0-9_-]+$
          maxLength: 30
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - OFFLINE
    OnlineMethod:
      title: ONLINE
      description: >-
        Online Bank Transfer. Payment method where Customer is redirected to his
        own preferred Payment service application right after the payment is
        submitted and create the Payment transfer with pre-filled Payment
        instruction.


        For ZAR currency, the system validates the transaction using customer's
        account name sent on the request versus the name on the bank. If the
        comparison reached above the threshold, transaction will go through,
        otherwise, it will be rejected. If no accountName was sent, transaction
        will be processed as normal.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestOnline'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - ONLINE
    OnlineMethodResponse:
      title: ONLINE
      required:
        - idPayin
        - idPayment
        - account
        - money
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseOnlyWithBank'
        money:
          $ref: '#/components/schemas/Money'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - ONLINE
    P2AV2Method:
      title: P2A_V2
      description: >

        Phone to Account. Payment method which requires customer to scan QR code
        from the Payment application by Customer's Payment service application
        right after the payment is submitted.


        Supported Payment service applications are UPI and GooglePay both on
        India market.
      required:
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestP2AV2'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - P2A_V2
    P2AV2MethodResponse:
      title: P2A_V2
      description: >-
        The account parameters for this payment method are used to show payment
        instructions to the customer.
      required:
        - idPayin
        - idPayment
        - account
        - money
        - merchantName
        - paymentAddress
        - qrName
        - qrCode
        - reference
        - returnUrl
        - paymentOperator
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseP2AV2'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        paymentAddress:
          $ref: '#/components/schemas/PaymentAddress'
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        reference:
          description: Reference number of transaction.
          type: string
        externalReference:
          $ref: '#/components/schemas/ExternalReference'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - P2A_V2
    PayMeMethod:
      title: PAY_ME
      description: >-
        Pay Me is payment method intended for South Africa market which allows
        customers to send payments by scanning QR codes from supported banks and
        e-wallets.
      required:
        - account
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestPayMe'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        paymentMethodCode:
          type: string
          enum:
            - PAY_ME
    PayMeMethodResponse:
      title: PAY_ME
      required:
        - idPayin
        - idPayment
        - account
        - accountCustomer
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponsePayMe'
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponsePayMe'
        money:
          $ref: '#/components/schemas/Money'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        payMeDeepLink:
          description: >-
            It can be used as deep link button target (what is typically known
            as an intent trigger)

            or to generate a QR code that can be scanned with any UPI enabled
            app.
          type: string
          example: >-
            upi://pay?cu=INR&pa=7304154205@idfcfirst&pn=APEX
            ENTERPRISES&tn=ECLP04211&am=10.00
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - PAY_ME
    Payin:
      description: >-
        For every payment method there is appropriate payment specific request
        object in `paymentMethod` attribute.


        If you have used the [`POST
        /payins/!availablePaymentOptions`](https://developers.echelonpay.com)
        API to get the list of the available payment options, then it is
        expected that you use the same input data here to make sure that the
        payment will be accepted.
      required:
        - paymentRequested
        - paymentMethod
        - returnUrl
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        paymentMethod:
          $ref: '#/components/schemas/PayinMethod'
        callbackUrl:
          description: >-
            This is the URL where the system will send the transaction final
            status after payment has been completed.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com/order-status-change
          maxLength: 1000
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        customerIp:
          description: >-
            The IP address of the customer making the payment in either the IPv4
            or IPv6 format.


            The IP address is used for validating against the IP address
            whitelists and blacklists from the merchant settings.
          type: string
          example: 172.16.254.1
    PayinAcceptedMethodResponse:
      title: MethodResponse
      description: >-
        For every payment method there is appropriate payment specific response
        object in `paymentMethodResponse` attribute.


        Use data from `paymentMethodResponse` for payment completion (for
        example show to the customer).
      required:
        - paymentRequested
        - paymentMethodResponse
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        paymentMethodResponse:
          $ref: '#/components/schemas/PayinMethodResponse'
    PayinAcceptedRedirectResponse:
      title: RedirectResponse
      description: >-
        Customer should be redirected to specified URL for the next payment
        process step.
      required:
        - paymentRequested
        - redirectTo
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        redirectTo:
          $ref: '#/components/schemas/Redirection'
    PayinAcceptedResponse:
      oneOf:
        - $ref: '#/components/schemas/PayinAcceptedMethodResponse'
        - $ref: '#/components/schemas/PayinAcceptedRedirectResponse'
    PayinDetail:
      required:
        - paymentRequested
        - process
        - fee
        - paymentMethodResponse
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        process:
          $ref: '#/components/schemas/PaymentProcess'
        fee:
          $ref: '#/components/schemas/MoneyFee'
        paymentMethodResponse:
          $ref: '#/components/schemas/PayinMethodResponse'
    PayinMethod:
      description: >-
        Payment method is a payment instrument that your customers use (such as
        online bank transfers, VA payments, UPI and so on).

        Select a payment method from the list of the methods that you have
        configured in your account.


        The `paymentMethodCode` represents payment method available for payin
        payment.
      oneOf:
        - $ref: '#/components/schemas/CapitecPayMethod'
        - $ref: '#/components/schemas/CryptoOfflineMethod'
        - $ref: '#/components/schemas/DuitNowMethod'
        - $ref: '#/components/schemas/EWalletMethod'
        - $ref: '#/components/schemas/IMPSMethod'
        - $ref: '#/components/schemas/MobileMoneyMethod'
        - $ref: '#/components/schemas/NetBankingMethod'
        - $ref: '#/components/schemas/OfflineMethod'
        - $ref: '#/components/schemas/OnlineMethod'
        - $ref: '#/components/schemas/P2AV2Method'
        - $ref: '#/components/schemas/PayMeMethod'
        - $ref: '#/components/schemas/PromptPayMethod'
        - $ref: '#/components/schemas/QrPhMethod'
        - $ref: '#/components/schemas/QrisPayMethod'
        - $ref: '#/components/schemas/UpiIdMethod'
        - $ref: '#/components/schemas/UpiQRMethod'
        - $ref: '#/components/schemas/VaPayMethod'
        - $ref: '#/components/schemas/VaPayVerifMethod'
        - $ref: '#/components/schemas/VietQRMethod'
      discriminator:
        propertyName: paymentMethodCode
        mapping:
          CAPITEC_PAY: '#/components/schemas/CapitecPayMethod'
          CRYPTO_OFFLINE: '#/components/schemas/CryptoOfflineMethod'
          DUITNOW: '#/components/schemas/DuitNowMethod'
          EWALLET: '#/components/schemas/EWalletMethod'
          IMPS: '#/components/schemas/IMPSMethod'
          MOBILE_MONEY: '#/components/schemas/MobileMoneyMethod'
          NETBANKING: '#/components/schemas/NetBankingMethod'
          OFFLINE: '#/components/schemas/OfflineMethod'
          ONLINE: '#/components/schemas/OnlineMethod'
          P2A_V2: '#/components/schemas/P2AV2Method'
          PAY_ME: '#/components/schemas/PayMeMethod'
          PROMPTPAY: '#/components/schemas/PromptPayMethod'
          QRISPAY: '#/components/schemas/QrisPayMethod'
          QRPH: '#/components/schemas/QrPhMethod'
          UPIID: '#/components/schemas/UpiIdMethod'
          UPIQR: '#/components/schemas/UpiQRMethod'
          VAPAY: '#/components/schemas/VaPayMethod'
          VAPAY_VERIF: '#/components/schemas/VaPayVerifMethod'
          VIETQR: '#/components/schemas/VietQRMethod'
    PayinMethodCode:
      description: >-
        Payment method is a payment instrument that your customers use (such as
        online bank transfers, VA payments, UPI and so on).

        Select a payment method from the list of the methods that you have
        configured in your account.

        The `PaymentMethodCode` represents payment method available for a
        payment.

         - OFFLINE - Offline Bank Transfer. Payment method which requires customer to copy Payment instruction from the Payment application right after the incoming payment is submitted and create the Payment transfer using the instructions within customer's own payment service such as Internet or mobile banking or wallet.

           As the Payment relies on the customer offline Payment transfer processing it can take minutes for Payment to be confirmed and also number of Payment expiration ratio can be higher.
         - ONLINE - Online Bank Transfer. Payment method where Customer is redirected to his own preferred Payment service application right after the payment is submitted and create the Payment transfer with pre-filled Payment instruction.
         - VAPAY - Virtual Accounts. Payment method which requires customer to copy Payment instruction with generated Virtual Account from the Payment application right after the payment is submitted and create the Payment transfer using the instructions within customer's own payment service such as Internet or mobile banking, wallet or ATM.

           One Virtual account cannot be used for sending funds repeatedly.
         - P2A_V2 - Phone to Account. Payment method which requires customer to scan QR code from the Payment application by Customer's Payment service application right after the payment is submitted.

           Supported Payment service applications are UPI and GooglePay both on India market.
         - IMPS - Is an India market version of the Offline Bank Transfer which differs in the data which need to be collected and used during a Payment process.
         - PROMPTPAY - A payment method which requires customer to scan QR code from the Payment application by Customer's Payment service application right after the payment is submitted.
         - QRISPAY - QRIS is a payment method intended for the Indonesian market which allows users to pay using scanning QR codes by theirs Payment application.
         - NETBANKING - Netbanking, also known as online banking or Net Banking is a payment option offered by banks and financial institutions on Indian market that allow customers to use banking services over the internet. In our case, we take advantage of the Netbanking services to offer your customer UPI Payment method to pay funds directly from your customer Net Banking account.
         - DUITNOW - A payment method which requires customer to scan QR code from the Payment application by Customer's Payment service application right after the payment is submitted.
         - CRYPTO_OFFLINE - Crypto Offline is a payment method that allows customers to pay by crypto currency from they crypto wallet to an address that they are provided.
         - UPIID - UPI (Unified Payment Method) is a method of fund transfers in India. The mechanism allows two parties to exchange funds using a UPI ID without having to share the banking information with the other party.
      type: string
      example: ONLINE
      minLength: 1
    PayinMethodResponse:
      oneOf:
        - $ref: '#/components/schemas/CapitecPayMethodResponse'
        - $ref: '#/components/schemas/CryptoOfflineMethodResponse'
        - $ref: '#/components/schemas/DuitNowPayMethodResponse'
        - $ref: '#/components/schemas/EWalletMethodResponse'
        - $ref: '#/components/schemas/IMPSMethodResponse'
        - $ref: '#/components/schemas/MobileMoneyMethodResponse'
        - $ref: '#/components/schemas/NetBankingMethodResponse'
        - $ref: '#/components/schemas/OfflineMethodResponse'
        - $ref: '#/components/schemas/OnlineMethodResponse'
        - $ref: '#/components/schemas/P2AV2MethodResponse'
        - $ref: '#/components/schemas/PayMeMethodResponse'
        - $ref: '#/components/schemas/PromptPayMethodResponse'
        - $ref: '#/components/schemas/QrPhMethodResponse'
        - $ref: '#/components/schemas/QrisPayMethodResponse'
        - $ref: '#/components/schemas/UpiIdMethodResponse'
        - $ref: '#/components/schemas/UpiQRMethodResponse'
        - $ref: '#/components/schemas/VaPayMethodResponse'
        - $ref: '#/components/schemas/VietQRMethodResponse'
      discriminator:
        propertyName: paymentMethodCode
        mapping:
          CAPITEC_PAY: '#/components/schemas/CapitecPayMethodResponse'
          CRYPTO_OFFLINE: '#/components/schemas/CryptoOfflineMethodResponse'
          DUITNOW: '#/components/schemas/DuitNowPayMethodResponse'
          EWALLET: '#/components/schemas/EWalletMethodResponse'
          IMPS: '#/components/schemas/IMPSMethodResponse'
          MOBILE_MONEY: '#/components/schemas/MobileMoneyMethodResponse'
          NETBANKING: '#/components/schemas/NetBankingMethodResponse'
          OFFLINE: '#/components/schemas/OfflineMethodResponse'
          ONLINE: '#/components/schemas/OnlineMethodResponse'
          P2A_V2: '#/components/schemas/P2AV2MethodResponse'
          PAY_ME: '#/components/schemas/PayMeMethodResponse'
          PROMPTPAY: '#/components/schemas/PromptPayMethodResponse'
          QRISPAY: '#/components/schemas/QrisPayMethodResponse'
          QRPH: '#/components/schemas/QrPhMethodResponse'
          UPIID: '#/components/schemas/UpiIdMethodResponse'
          UPIQR: '#/components/schemas/UpiQRMethodResponse'
          VAPAY: '#/components/schemas/VaPayMethodResponse'
          VIETQR: '#/components/schemas/VietQRMethodResponse'
    PaymentAccountDetail:
      required:
        - customerAccountRequest
        - customerAccountProcess
      type: object
      properties:
        customerAccountRequest:
          description: Details of customer's account collected in payment request.
          $ref: '#/components/schemas/AccountResponseDetail'
        customerAccountProcess:
          description: Details of customer's account collected during payment process.
          $ref: '#/components/schemas/AccountResponseDetail'
    PaymentAddress:
      description: >-
        Specifies the payment address (e.g. in UPI payment system) where
        customer can send the payment using theirs wallets or others banking
        services.
      required:
        - name
        - idAddress
      type: object
      properties:
        name:
          description: The name of the payment address ID e.g. UPI ID/VPA or GPAY ID.
          type: string
        idAddress:
          description: The payment address ID where customer can send the payment.
          type: string
    PaymentInstruction:
      description: >-
        If not empty then it specifies special instructions for different
        banking services your customers has to follow when entering payment in
        their banking service.
      required:
        - bankingService
        - companyCode
      type: object
      properties:
        bankingService:
          description: >-
            It specifies your customer banking service to which companyCode
            belongs. e.g. ATM-MANDIRI - Mandiri Bank ATM banking service.
          type: string
          example: ATM-MANDIRI
        companyCode:
          description: >-
            It informs your customers that companyCode has to be used in their
            banking service together with Virtual Account Number from
            accountNumber parameter e.g. 82017 + 12903437820 for particular
            bankingService  provided that it is specified.
          type: string
          example: 82017
    PaymentMethod:
      required:
        - code
      type: object
      properties:
        code:
          type: string
          example: ONLINE
          minLength: 1
          maxLength: 50
    PaymentMethodsList:
      description: List of available payment methods.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
    PaymentOperatorIncoming:
      required:
        - code
        - name
      type: object
      properties:
        code:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        name:
          type: string
          example: Bank Danamon
          minLength: 1
          maxLength: 1000
    PaymentOperatorList:
      description: List of available payment operators.
      type: object
      properties:
        data:
          type: array
          items:
            description: >-
              PaymentOperator is a financial institution that manages
              transactions in your customer's account (such as banks, card
              payment processors, mobile wallets and so on).

              The payment operators are assigned to the payment methods
              according to your account configuration.


              For supported payment operators please refer to [`GET
              /payment-operators`](https://developers.echelonpay.com).
            $ref: '#/components/schemas/PaymentOperatorIncoming'
    PaymentOperatorOption:
      required:
        - code
        - isAvailable
        - transactionAmountLimit
      type: object
      properties:
        code:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        name:
          type: string
          example: Bank Danamon
          minLength: 1
          maxLength: 1000
        isAvailable:
          description: >-
            If set to false, the payment operator is not actually available,
            please contact merchant support to solve this problem.
          type: boolean
        transactionAmountLimit:
          description: >-
            Interval of transaction amounts this payment operator can be used
            for.
          $ref: '#/components/schemas/IntervalNumberTo'
    PaymentOperatorOutgoing:
      description: >-
        PaymentOperator is a financial institution that manages transactions in
        your customer's account (such as banks, card payment processors, mobile
        wallets and so on).

        The payment operators are assigned to the payment methods according to
        your account configuration.


        For supported payment operators please refer to [`GET
        /payment-operators`](https://developers.echelonpay.com).
      required:
        - code
        - name
      type: object
      properties:
        code:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        name:
          type: string
          example: Bank Danamon
          minLength: 1
          maxLength: 1000
        customerTransactionFee:
          $ref: '#/components/schemas/CustomerTransactionFee'
    PaymentOption:
      required:
        - paymentTypeCode
        - paymentMethodCode
        - currencyCode
        - transactionAmountLimit
        - isAvailable
      type: object
      properties:
        paymentTypeCode:
          description: Payment direction from the merchant's point of view.
          type: string
          enum:
            - PAYIN
            - PAYOUT
        paymentMethodCode:
          $ref: '#/components/schemas/PayinMethodCode'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        segmentCode:
          $ref: '#/components/schemas/SegmentCode'
        transactionAmountLimit:
          description: Interval of transaction amounts this payment option can be used for.
          $ref: '#/components/schemas/IntervalNumberTo'
        isAvailable:
          description: >-
            If set to false, the option is not currently available and must be
            activated in administration.
          type: boolean
        paymentOperators:
          description: >-
            Payment operators that can be used for paying via this payment
            option.
          type: array
          items:
            $ref: '#/components/schemas/PaymentOperatorOption'
    PaymentOptionsList:
      description: List of (possibly) available payment options.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentOption'
    PaymentProcess:
      required:
        - status
        - createdAt
        - isTest
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
        failureReasons:
          $ref: '#/components/schemas/FailureReasons'
        createdAt:
          description: Date and time when payment was accepted by platform.
          type: string
          format: date-time
        processedAt:
          description: Date and time when payment was processed by platform.
          type: string
          format: date-time
        isTest:
          description: >-
            This flag is set to `true` when payment was done with testing
            merchant or testing channel.
          type: boolean
        processorStatus:
          $ref: '#/components/schemas/ProcessorStatus'
    PaymentProcessor:
      description: >-
        The external processor of the payment. This field is returned only if an
        external processor is used.

         Possible values:
         * `POC` - PO Coins processor
      type: string
      example: POC
      enum:
        - POC
    PaymentRequested:
      description: The requested payment.
      required:
        - money
      type: object
      properties:
        money:
          $ref: '#/components/schemas/Money'
        segmentCode:
          $ref: '#/components/schemas/SegmentCode'
        exchangedToCurrency:
          $ref: '#/components/schemas/CurrencyCode'
    PaymentStatus:
      description: >-
        * `PROCESSING` - payment process is not finished yet. Success or failure
        of payment cannot be determined at this time.

        * `SUCCESS` - payment has been successfully processed.

        * `FAILED` - payment has been accepted by platform and failed during
        processing. Details can be found in `failureReasons` attribute.

        * `REFUSED` - payment has not been accepted by platform for processing.
        Details can be found in `failureReasons` attribute.


        For every status change new callback `payment.statusChange` is sent. See
        more info about [callbacks](general.html#callbacks).
      type: string
      example: SUCCESS
      enum:
        - PROCESSING
        - SUCCESS
        - FAILED
        - REFUSED
    Payout:
      description: >-
        For every payment method there is appropriate payment specific request
        object in `paymentMethod` attribute.


        If you have used the [`POST
        /payins/!availablePaymentOptions`](https://developers.echelonpay.com)
        API to get the list of the available payment options, then it is
        expected that you use the same input data here to make sure that the
        payment will be accepted.
      required:
        - paymentRequested
        - paymentMethod
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        paymentMethod:
          $ref: '#/components/schemas/PayoutMethod'
        callbackUrl:
          description: >-
            This is the URL where the system will send the transaction final
            status after payment has been completed.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com/order-status-change
          maxLength: 1000
        customerIp:
          description: >-
            The IP address of the customer making the payment in either the IPv4
            or IPv6 format.


            The IP address is used for validating against the IP address
            whitelists and blacklists from the merchant settings.
          type: string
          example: 172.16.254.1
    PayoutAccepted:
      description: The outgoing payment has been accepted for processing.
      required:
        - paymentRequested
        - paymentMethodResponse
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        paymentMethodResponse:
          $ref: '#/components/schemas/PayoutMethodResponse'
    PayoutDetail:
      required:
        - paymentRequested
        - process
        - fee
        - paymentMethodResponse
      type: object
      properties:
        paymentRequested:
          $ref: '#/components/schemas/PaymentRequested'
        process:
          $ref: '#/components/schemas/PaymentProcess'
        fee:
          $ref: '#/components/schemas/MoneyFee'
        paymentMethodResponse:
          $ref: '#/components/schemas/PayoutMethodResponse'
    PayoutMethod:
      description: >-
        Payment method is a payment instrument that your customers use (such as
        online bank transfers, VA payments, UPI and so on).

        Select a payment method from the list of the methods that you have
        configured in your account.


        The `paymentMethodCode` represents payment method available for payout
        payment.
      oneOf:
        - $ref: '#/components/schemas/BankTransferMethod'
        - $ref: '#/components/schemas/CryptoTransferMethod'
        - $ref: '#/components/schemas/WalletTransferMethod'
      discriminator:
        propertyName: paymentMethodCode
        mapping:
          BANK_TRANSFER: '#/components/schemas/BankTransferMethod'
          CRYPTO_TRANSFER: '#/components/schemas/CryptoTransferMethod'
          WALLET_TRANSFER: '#/components/schemas/WalletTransferMethod'
    PayoutMethodCode:
      description: >-
        Payment method is a payment instrument that your customers use (such as
        online bank transfers, VA payments, UPI and so on).

        Select a payment method from the list of the methods that you have
        configured in your account.

        The `PaymentMethodCode` represents payment method available for a
        payment.

         - BANK_TRANSFER - A payment method for sending funds from your account to external bank account using a country specific payment system to process bank transfers. It requires customer to provide a receiving bank account details which are required by local payment system to process bank transfers.
         - CRYPTO_TRANSFER - A payment method for sending funds from your crypto wallet to external crypto wallet. It requires customer to provide a receiving crypto wallet details in format related to a chosen blockchain protocol.
         - WALLET_TRANSFER - A payment method for sending funds from your account to external wallet. It requires customer to provide a receiving wallet details in format related to the provider of a wallet.
      type: string
      example: BANK_TRANSFER
      minLength: 1
    PayoutMethodResponse:
      oneOf:
        - $ref: '#/components/schemas/BankTransferMethodResponse'
        - $ref: '#/components/schemas/CryptoTransferMethodResponse'
        - $ref: '#/components/schemas/WalletTransferMethodResponse'
      discriminator:
        propertyName: paymentMethodCode
        mapping:
          BANK_TRANSFER: '#/components/schemas/BankTransferMethodResponse'
          CRYPTO_TRANSFER: '#/components/schemas/CryptoTransferMethodResponse'
          WALLET_TRANSFER: '#/components/schemas/WalletTransferMethodResponse'
    PostAuthTokensError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |-
            Business validation error codes:

             - MERCHANT_NOT_FOUND - The merchant code seems to be invalid, please contact merchant support.
             - OPERATION_INVALID - Invalid required operation format.
             - MERCHANT_INACTIVE - The merchant must be activated to get the token.
          type: string
          enum:
            - MERCHANT_NOT_FOUND
            - OPERATION_INVALID
            - MERCHANT_INACTIVE
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    PostAvailablePayinOptionsError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |-
            Possible error codes:

             * CURRENCY_NOT_SUPPORTED - The selected currency is not supported by merchant.
             * CURRENCY_PRECISION_EXCEEDED - The provided payment amount exceeds the smallest fractional unit allowed for the specified currency.
             * PAYMENT_METHOD_NOT_FOUND - No payment method has been found for selected payment criteria. Verify your product configuration and contact support for further details.
             * PAYMENT_METHOD_ERROR - A processing error has been encountered for payment. An unexpected scenario with required operator intervention, contact support for further details.
             * PAYMENT_CHANNEL_NO_ACTIVE_FOUND - No active payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_OPENED_FOUND - No opened payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_SEGMENT_FOUND - No payment channel that can accept the payment with the specified segment has been found.
             * PAYMENT_CHANNEL_AMOUNT_LIMITS - No payment channel with amount limits suitable for the payment amount has been found.  Limits can be found with [`GET /payment-options`](https://developers.echelonpay.com) API.
             * PAYMENT_CHANNEL_DAILY_LIMITS - All the suitable channels reached their daily limits on payment amount. Select different payment method or contact support for limits adjustments.
          type: string
          enum:
            - CURRENCY_NOT_SUPPORTED
            - CURRENCY_PRECISION_EXCEEDED
            - PAYMENT_METHOD_NOT_FOUND
            - PAYMENT_METHOD_ERROR
            - PAYMENT_CHANNEL_NO_ACTIVE_FOUND
            - PAYMENT_CHANNEL_NO_OPENED_FOUND
            - PAYMENT_CHANNEL_NO_SEGMENT_FOUND
            - PAYMENT_CHANNEL_AMOUNT_LIMITS
            - PAYMENT_CHANNEL_DAILY_LIMITS
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    PostAvailablePayoutOptionsError:
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |-
            Possible error codes:

             * CURRENCY_NOT_SUPPORTED - The selected currency is not supported by merchant.
             * CURRENCY_PRECISION_EXCEEDED - The provided payment amount exceeds the smallest fractional unit allowed for the specified currency.
             * PAYMENT_METHOD_NOT_FOUND - No payment method has been found for selected payment criteria. Verify your product configuration and contact support for further details.
             * PAYMENT_METHOD_ERROR - A processing error has been encountered for payment. An unexpected scenario with required operator intervention, contact support for further details.
             * PAYMENT_CHANNEL_NO_ACTIVE_FOUND - No active payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_OPENED_FOUND - No opened payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_SEGMENT_FOUND - No payment channel that can accept the payment with the specified segment has been found.
             * PAYMENT_CHANNEL_AMOUNT_LIMITS - No payment channel with amount limits suitable for the payment amount has been found.  Limits can be found with [`GET /payment-options`](https://developers.echelonpay.com) API.
             * PAYMENT_CHANNEL_DAILY_LIMITS - All the suitable channels reached their daily limits on payment amount. Select different payment method or contact support for limits adjustments.
          type: string
          enum:
            - CURRENCY_NOT_SUPPORTED
            - CURRENCY_PRECISION_EXCEEDED
            - PAYMENT_METHOD_NOT_FOUND
            - PAYMENT_METHOD_ERROR
            - PAYMENT_CHANNEL_NO_ACTIVE_FOUND
            - PAYMENT_CHANNEL_NO_OPENED_FOUND
            - PAYMENT_CHANNEL_NO_SEGMENT_FOUND
            - PAYMENT_CHANNEL_AMOUNT_LIMITS
            - PAYMENT_CHANNEL_DAILY_LIMITS
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    PostPayinsError:
      description: >-
        Input does not meet business validations. The payment has not been
        accepted. See [406 Not
        Acceptable](responseCodes.html#term-406-Not-Acceptable)
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: |-
            Possible error codes:

             * CURRENCY_NOT_SUPPORTED - The selected currency is not supported by merchant.
             * CURRENCY_PRECISION_EXCEEDED - The provided payment amount exceeds the smallest fractional unit allowed for the specified currency.
             * PAYMENT_METHOD_NOT_FOUND - No payment method has been found for selected payment criteria. Verify your product configuration and contact support for further details.
             * PAYMENT_METHOD_ERROR - A processing error has been encountered for payment. An unexpected scenario with required operator intervention, contact support for further details.
             * PAYMENT_OPERATOR_NOT_FOUND - The payment operator has not been found.
             * PAYMENT_OPERATOR_INVALID - The selected payment operator is not supported by a used payment method.
             * PAYMENT_OPERATOR_REQUIRED - The selected payment method required a payment operator to be provided.
             * PAYMENT_OPERATOR_UNAVAILABLE - The payment operator is not available.
             * PAYMENT_CHANNEL_NO_ACTIVE_FOUND - No active payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_OPENED_FOUND - No opened payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_SEGMENT_FOUND - No payment channel that can accept the payment with the specified segment has been found.
             * PAYMENT_CHANNEL_AMOUNT_LIMITS - No payment channel with amount limits suitable for the payment amount has been found.  Limits can be found with [`GET /payment-options`](https://developers.echelonpay.com) API.
             * PAYMENT_CHANNEL_DAILY_LIMITS - All the suitable channels reached their daily limits on payment amount. Select different payment method or contact support for limits adjustments.
             * EMAIL_INVALID - The provided e-mail address is in the wrong format.
             * IP_DENIED - The provided IP address is denied. It is either found in the blacklist or is not found in the whitelist.
             * CLIENT_IP_INVALID - The provided IP address is in the wrong format.
             * SEGMENT_CODE_INVALID - The provided segment code is unknown.
             * PAYMENT_METHOD_CODE_INVALID - The provided payment method is unknown.
          type: string
          enum:
            - CURRENCY_NOT_SUPPORTED
            - CURRENCY_PRECISION_EXCEEDED
            - PAYMENT_METHOD_NOT_FOUND
            - PAYMENT_METHOD_ERROR
            - PAYMENT_OPERATOR_NOT_FOUND
            - PAYMENT_OPERATOR_INVALID
            - PAYMENT_OPERATOR_REQUIRED
            - PAYMENT_OPERATOR_UNAVAILABLE
            - PAYMENT_CHANNEL_NO_ACTIVE_FOUND
            - PAYMENT_CHANNEL_NO_OPENED_FOUND
            - PAYMENT_CHANNEL_NO_SEGMENT_FOUND
            - PAYMENT_CHANNEL_AMOUNT_LIMITS
            - PAYMENT_CHANNEL_DAILY_LIMITS
            - EMAIL_INVALID
            - IP_DENIED
            - CLIENT_IP_INVALID
            - SEGMENT_CODE_INVALID
            - PAYMENT_METHOD_CODE_INVALID
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    PostPayoutsError:
      description: >-
        Input does not meet business validations. The payment has not been
        accepted. See [406 Not
        Acceptable](responseCodes.html#term-406-Not-Acceptable)
      required:
        - code
      type: object
      properties:
        description:
          description: Optional error description.
          type: string
        code:
          description: >-
            A business validation or processing error has been encountered while
            processing the payment. The payment has not been accepted. Contact
            Support.


            Possible error codes:

             * CURRENCY_NOT_SUPPORTED - The selected currency is not supported by merchant.
             * CURRENCY_PRECISION_EXCEEDED - The provided payment amount exceeds the smallest fractional unit allowed for the specified currency.
             * PAYMENT_METHOD_NOT_FOUND - No payment method has been found for seleceted payment criteria. Verify your product configuration and contact support for further details.
             * PAYMENT_METHOD_ERROR - A processing error has been encountered for payment. An unexpected scenario with required operator intervention, contact support for further details.
             * PAYMENT_OPERATOR_NOT_FOUND - The payment operator has not been found.
             * PAYMENT_OPERATOR_INVALID - The selected payment operator is not supported by a used payment method.
             * PAYMENT_OPERATOR_REQUIRED - The selected payment method required a payment operator to be provided.
             * PAYMENT_OPERATOR_UNAVAILABLE - The payment operator is not available.
             * PAYMENT_CHANNEL_NO_ACTIVE_FOUND - No active payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_OPENED_FOUND - No opened payment channel that can accept the payment has been found.
             * PAYMENT_CHANNEL_NO_SEGMENT_FOUND - No payment channel that can accept the payment with the specified segment has been found.
             * PAYMENT_CHANNEL_AMOUNT_LIMITS - No payment channel with amount limits suitable for the payment amount has been found.  Limits can be found with [`GET /payment-options`](https://developers.echelonpay.com) API.
             * PAYMENT_CHANNEL_DAILY_LIMITS - All the suitable channels reached their daily limits on payment amount. Select different payment method or contact support for limits adjustments.
             * IP_DENIED - The provided IP address is denied. It is either found in the blacklist or is not found in the whitelist.
             * CLIENT_IP_INVALID - The provided IP address is in the wrong format.
             * BALANCE_INSUFFICIENT - The balance is not sufficient for payout.
             * BANK_CODE_REQUIRED - A bank code is required for the selected payout method and currency.
          type: string
          enum:
            - CURRENCY_NOT_SUPPORTED
            - CURRENCY_PRECISION_EXCEEDED
            - PAYMENT_METHOD_NOT_FOUND
            - PAYMENT_METHOD_ERROR
            - PAYMENT_OPERATOR_NOT_FOUND
            - PAYMENT_OPERATOR_INVALID
            - PAYMENT_OPERATOR_REQUIRED
            - PAYMENT_OPERATOR_UNAVAILABLE
            - PAYMENT_CHANNEL_NO_ACTIVE_FOUND
            - PAYMENT_CHANNEL_NO_OPENED_FOUND
            - PAYMENT_CHANNEL_NO_SEGMENT_FOUND
            - PAYMENT_CHANNEL_AMOUNT_LIMITS
            - PAYMENT_CHANNEL_DAILY_LIMITS
            - IP_DENIED
            - CLIENT_IP_INVALID
            - BALANCE_INSUFFICIENT
            - BANK_CODE_REQUIRED
        attrCode:
          description: >-
            Optional identification of the request attribute name that caused
            the error.
          type: string
    ProcessorStatus:
      description: >-
        If present, this field specifies the status of the payment processing by
        an external processor.


        Possible values:
         * `ACCEPTED` - The payment was accepted by the processor.
         * `PROCESSED` - The payment has been processed. For the result of the processing, check the "status" field in the response.
      type: string
      example: ACCEPTED
      enum:
        - ACCEPTED
        - PROCESSED
    PromptPayMethod:
      title: PROMPTPAY
      description: >-
        Payment method which requires customer to scan QR code from the Payment
        application by Customer's Payment service application right after the
        payment is submitted.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestPromptPay'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - PROMPTPAY
    PromptPayMethodResponse:
      title: PROMPTPAY
      required:
        - idPayin
        - idPayment
        - accountCustomer
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponsePromptPay'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - PROMPTPAY
    QrPhMethod:
      title: QRPH
      description: >-
        QR Ph is payment method intended for Philippine market which allows
        customers to send payments by scanning QR codes from supported banks and
        e-wallets.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestQrPh'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        paymentMethodCode:
          type: string
          enum:
            - QRPH
    QrPhMethodResponse:
      title: QRPH
      required:
        - idPayin
        - idPayment
        - account
        - accountCustomer
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseQrPh'
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponseQrPh'
        money:
          $ref: '#/components/schemas/Money'
        moneyRequired:
          $ref: '#/components/schemas/MoneyRequired'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - QRPH
    QrisPayMethod:
      title: QRISPAY
      description: >-
        QRIS is payment method intended for the Indonesian market which allows
        users to pay using scanning QR codes by theirs Payment application.
      required:
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestQrisPay'
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - QRISPAY
    QrisPayMethodResponse:
      title: QRISPAY
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - QRISPAY
    Redirection:
      required:
        - method
        - url
      type: object
      properties:
        method:
          description: The HTTP method that should be used for redirection.
          type: string
          enum:
            - GET
            - POST
        url:
          description: The destination URL for redirect to.
          type: string
          example: https://example.com
        data:
          description: >-
            The optional data in the `application/x-www-form-urlencoded` format
            that should be used for redirection when POST method is used.
          type: string
          example: id=123&token=112233
    Segment:
      required:
        - code
      type: object
      properties:
        code:
          $ref: '#/components/schemas/SegmentCode'
    SegmentCode:
      description: >-
        A customer segment which allows you to divide your customers into groups
        that reflect similarity among customers in each group.


        The goal of segmenting customers is to decide which payment options and
        limitation you would like to apply to customers in each segment in order
        to follow your internal business rules.


        This parameter is applied only when you have configured the segmentation
        in your account setting.


        For supported segments please refer to [`GET
        /segments`](https://developers.echelonpay.com) API.
      type: string
      example: VIP
      minLength: 1
    SegmentList:
      description: List of available segments.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    UpiIdMethod:
      title: UPIID
      description: >-
        UPI (Unified Payment Method) is a method of fund transfers in India. The
        mechanism allows two parties to exchange funds using a UPI ID without
        having to share the banking information with the other party.
      required:
        - upiId
        - paymentMethodCode
      type: object
      properties:
        upiId:
          description: >-
            Virtual payment address of the customer on UPI (Unified Payment
            Interface)
          type: string
          example: 123456789@paytm
          pattern: '[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9_\.]+'
          maxLength: 100
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - UPIID
    UpiIdMethodResponse:
      title: UPIID
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - UPIID
    UpiQRMethod:
      title: UPIQR
      description: >-
        UPI QR is payment method intended for the Indian market. This payment
        method requires customers to scan QR code by Customer's Payment service
        application compatible with UPI payment schema.
      required:
        - paymentMethodCode
      type: object
      properties:
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        paymentMethodCode:
          type: string
          enum:
            - UPIQR
    UpiQRMethodResponse:
      title: UPIQR
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        externalReference:
          $ref: '#/components/schemas/ExternalReference'
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        upiQrDeepLink:
          description: >-
            It can be used as deep link button target (what is typically known
            as an intent trigger)

            or to generate a QR code that can be scanned with any UPI enabled
            app.
          type: string
          example: >-
            upi://pay?cu=INR&pa=7304154205@idfcfirst&pn=APEX
            ENTERPRISES&tn=ECLP04211&am=10.00
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        upiId:
          description: >-
            Virtual payment address where we expect that your customer sends
            funds to make a payment. This parameter is to be shown to your
            customer.
          type: string
          example: 123456789@paytm
          pattern: '[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9_\.]+'
          maxLength: 100
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - UPIQR
    VaPayMethod:
      title: VAPAY
      description: >-
        Virtual Accounts. Payment method which requires customer to copy Payment
        instruction with generated Virtual Account from the Payment application
        right after the payment is submitted and create the Payment transfer
        using the instructions within customer's own payment service such as
        Internet or mobile banking, wallet or ATM.


        One Virtual account cannot be used for sending funds repeatedly.
      required:
        - account
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestVaPay'
        paymentOperatorCode:
          description: >
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.


            If currency is KRW, then paymentOperatorCode field is optional.
            Otherwise, it is required.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - VAPAY
    VaPayMethodResponse:
      title: VAPAY
      description: >-
        The account parameters for this payment method are used to show payment
        instructions to the customer.
      required:
        - idPayin
        - idPayment
        - account
        - accountCustomer
        - money
        - reference
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        account:
          $ref: '#/components/schemas/AccountResponseWithBank'
        accountCustomer:
          $ref: '#/components/schemas/AccountCustomerResponseVaPay'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        reference:
          description: Reference number of transaction.
          type: string
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        paymentOperator:
          description: >
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.


            This field is returned only if paymentOperatorCode was provided in
            the API call.
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentInstructionList:
          type: array
          items:
            $ref: '#/components/schemas/PaymentInstruction'
        paymentMethodCode:
          type: string
          enum:
            - VAPAY
    VaPayVerifMethod:
      title: VAPAY_VERIF
      description: >-
        Virtual Accounts With Verified Bank Account. Payment method which
        requires customer to copy Payment instruction with assigned Virtual
        Account from the Payment application right after the payment is
        submitted and create the Payment transfer using the instructions within
        customer's own payment service such as Internet or mobile banking,
        wallet or ATM.


        Each virtual account is assigned to one and only one customers bank
        account and is used for sending funds repeatedly.
      required:
        - account
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayinRequestVaPayVerif'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - VAPAY_VERIF
    VietQRMethod:
      title: VIETQR
      description: >-
        Viet QR is a payment method intended for the Vietnamese market which
        allows users to pay using scanning QR codes by theirs payment
        application or internet banking.
      required:
        - paymentOperatorCode
        - paymentMethodCode
      type: object
      properties:
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        emailAddress:
          description: >-
            Your customer e-mail address in RFC 5322 format that is used for
            identification of the customer's payins.
          type: string
          example: yourcustomer@domain.com
        paymentMethodCode:
          type: string
          enum:
            - VIETQR
    VietQRMethodResponse:
      title: VIETQR
      required:
        - idPayin
        - idPayment
        - money
        - merchantName
        - reference
        - qrName
        - qrCode
        - returnUrl
        - acceptedAt
        - expireAt
        - paymentMethodCode
      type: object
      properties:
        idPayin:
          $ref: '#/components/schemas/IdPayin'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        money:
          $ref: '#/components/schemas/Money'
        vat:
          $ref: '#/components/schemas/MoneyVat'
        merchantName:
          type: string
        reference:
          description: Reference number of transaction.
          type: string
        qrName:
          description: >-
            The name of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code of the
            image can be labeled by qrName to increase the clarity of the
            payment instruction.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
        qrCode:
          description: >-
            The URL of the QR code image to be scanned by a wallet or payment
            service compatible with this payment method. The QR code encodes the
            instructions how make a payment.

            If this parameter contains any value, include it in the payment
            instructions for your customer.
          type: string
          example: https://domain/CAR/1/GPAY_QR
        paymentOperator:
          description: >-
            PaymentOperator is a financial institution that manages transactions
            in your customer's account (such as banks, card payment processors,
            mobile wallets and so on).

            The payment operators are assigned to the payment methods according
            to your account configuration.


            For supported payment operators please refer to [`GET
            /payment-operators`](https://developers.echelonpay.com).
          $ref: '#/components/schemas/PaymentOperatorIncoming'
        returnUrl:
          description: >-
            This is the URL where the customers will be redirected after
            completing a payment.


            The URL must be either IP or domain-based.
          type: string
          example: https://example.com?id=123
          maxLength: 1000
        acceptedAt:
          description: Date and time when payment was accepted.
          type: string
          format: date-time
        expireAt:
          description: >-
            Date and time of payment expiration. If no money has been
            transferred to this time, payment is considered failed and callback
            with status change event will shortly follow.
          type: string
          format: date-time
        paymentMethodCode:
          type: string
          enum:
            - VIETQR
    WalletTransferMethod:
      title: WALLET_TRANSFER
      description: Payment method for sending funds from your account to external wallet.
      required:
        - account
        - paymentMethodCode
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountPayoutRequestWalletTransfer'
        paymentOperatorCode:
          description: >-
            One of following can serve as Payment Operator:

             * Financial or other institution (such as bank, card payment processor, ...) that manages transactions for your customers
             * Mobile wallet
             * Blockchain protocol for crypto currency payments

            Customer is informed with the payment instructions where funds have
            to be transferred efficiently based on the selected Payment
            operator.

            For getting list of the available payment options for payins use
            [POST
            /payins/!availablePaymentOptions](https://developers.echelonpay.com)
            API, for payouts use [POST
            /payouts/!availablePaymentOptions](https://developers.echelonpay.com)
            API.
          type: string
          example: IDR_003
          pattern: ^[A-Za-z0-9_-]+$
          minLength: 1
          maxLength: 30
        phoneNumber:
          description: >-
            Your customer mobile phone number in full international telephone
            number format, including country code.
          type: string
          example: '+628113912103'
          pattern: ^\+?[0-9]+$
          minLength: 7
          maxLength: 16
        remark:
          type: string
        paymentMethodCode:
          type: string
          enum:
            - WALLET_TRANSFER
    WalletTransferMethodResponse:
      title: WALLET_TRANSFER
      required:
        - idPayout
        - idPayment
        - paymentMethodCode
        - reference
      type: object
      properties:
        idPayout:
          $ref: '#/components/schemas/IdPayout'
        idPayment:
          $ref: '#/components/schemas/IdPayment'
        paymentMethodCode:
          type: string
          enum:
            - WALLET_TRANSFER
        reference:
          description: Reference number of transaction.
          type: string
    IncomingPaymentsGetOptionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/PostAvailablePayinOptionsError'
    OutgoingPaymentsGetAvailablePaymentOptionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/PostAvailablePayoutOptionsError'
    IncomingPaymentsGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetPayinError'
    IncomingPaymentsCreatePaymentRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/PostPayinsError'
    OutgoingPaymentsGetDetailResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetPayoutError'
    OutgoingPaymentsCreateRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/PostPayoutsError'
    AccountsGetBalancesResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetPayoutError'
    PayinAccountsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetPayinError'
    PaymentsGetPaymentOptionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetPaymentOptionsError'
    AuthIssueJwtResponse:
      type: array
      items:
        $ref: '#/components/schemas/PostAuthTokensError'
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
