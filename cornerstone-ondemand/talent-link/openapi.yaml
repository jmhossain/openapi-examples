openapi: 3.0.0
info:
  title: Talentlink REST API Documentation
  description: >-
    This is a live documentation of Talentlink RESTful services.


    You will find detailed descriptions on how to use the TalentLink Exchange
    API to build your integrations in Developers Guide.


    To use this documentation and call first go to green <span
    class="bold-span">"Authorize"</span> button and provide your credentials.
    Once you do this you will be able to call the API directly from this page.
    However, if you only wish to check the syntax or list the filters then
    credentials are not mandatory.


    To write a query, go to any method, expand it and press <span
    class="bold-span">"Try it out"</span> button. It will display the method
    details window where in case of GET methods you will be able to write the
    query and check the filters.


    You will also notice some of the methods have more specific details in their
    descriptions.


    <span class="bold-span">QuickTip:</span> when writing the GraphQL query you
    can use CTRL + SPACE to see suggestions of the available schemas/tags.
  version: 23.5-SNAPSHOT
  x-api-status-urls: false
servers:
  - url: https://apiproxy.shared.lumessetalentlink.com/tlk/rest
tags:
  - description: '- set of methods for advanced candidate management'
    name: Candidate API
  - description: '- provides methods to manage Talentlink users.'
    name: User API
  - description: >-
      - allows complete management of the contracts for temporary and permanent
      employees. This includes setting the rates, timesheets, mid period
      changes, cost centres and Timesheet approvers
    name: Contract API
  - description: >-
      - provides methods to build career websites based on adverts posted from
      Talentlink.
    name: Published Advert API
  - description: >-
      - Provides method that allow to perform basic operations on selection
      steps for a given candidate
    name: Selection Process API
  - description: >-
      - allows managing the organization chart from another external system.
      Administrators can create unlimited levels of organization, edit their
      properties, move, deactivate and delete them if required.
    name: Department API
  - description: '- Provides methods to manage Configurable Field (LOV) values'
    name: LOV API - Configurable LOV
  - description: '- Provides methods to manage Free Form Field LOV values'
    name: LOV API - Free Form Field LOV
  - description: '- Provides methods to manage values of User Data LOVs'
    name: LOV API - User data
  - description: '- methods to manage Positions'
    name: Position API
  - description: >-
      - Global operations on queues: deleting elements from queue, list of all
      queues, import & export of queues etc. 
    name: Queues API
  - description: >-
      - Provides methods for Assessment Providers & Background checking. Queues
      API are also required.
    name: Assessment Provider API
  - description: '- provides methods for developers to manage interview locations.'
    name: Interview Location API
  - description: >-
      - Provides methods to manage Timesheets for a given candidate (submit,
      approve, reject, retrieve details)
    name: Timesheet API
  - description: '- allows fetching applications of candidates.'
    name: Application API
  - description: '- provides methods for developers to manage job locations.'
    name: Location API
  - description: '- provides methods for developers to manage search agent.'
    name: Search Agent API
  - description: '- allows managing, creating, editing and assignment of Candidate Pools'
    name: Candidate Pools
  - description: '- allows managing TalentLink internal messages and notifications.'
    name: Internal Message API
  - description: '- Provides methods to manage values of Standard LOVs'
    name: LOV API - Standard Fields
  - description: '- allows to get Talentlink roles. '
    name: Role API
  - description: >-
      - allows fetching Adverts which are not yet published for a given job and
      to generate Preview Tokens.
    name: Advertisements API
  - description: '- provides methods to manage personal job templates.'
    name: Personal job template API
  - description: '- Allows to fetch Application details from queue'
    name: Queues API - Application
  - description: '- Methods to fetch data of archived candidates from queue'
    name: Queues API - Archived Candidate
  - description: '- Allows to fetch Candidate  details from queue'
    name: Queues API - Candidates
  - description: '- Allows to fetch Contract details from queue'
    name: Queues API - Contract
  - description: >-
      - Allows to fetch External Assessment Providers Requests details from
      queue
    name: Queues API - External System Request
  - description: '- Allows to fetch Position / Requisition details from queue'
    name: Queues API - Position (Requisitions)
  - description: '- Allows to fetch Advert details from queue'
    name: Queues API - Posting (Adverts)
  - description: '- Allows to fetch details of Selection Steps from the queue'
    name: Queues API - Selection Step
  - description: '- Allows to fetch details of candidates Timesheets from the queue'
    name: Queues API - Timesheets
  - description: '- allows to fetch details of Users from the queue'
    name: Queues API - Users
  - description: '- provides methods for developers to manage campaigns'
    name: Campaign API
  - description: '- Allows to fetch details of all types of LOVs'
    name: LOV API
  - description: '- provides method to read password rules.'
    name: Password Rule API
paths:
  /advertisement/generate-token:
    post:
      tags:
        - Advertisements API
      summary: >-
        Allows to generate token to preview the advert which is not yet
        published
      operationId: AdvertisementsApi_generateToken
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to generate a token which then can be used to
        preview the advert (https://developer.lumesse-talenthub.com) which is
        not yet published.</p>
      responses:
        '200':
          description: Token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisementsApiGenerateTokenResponse'
  /advertisement/postings/{jobNumber}:
    get:
      tags:
        - Advertisements API
      summary: Allows to fetch details of adverts created for a given requisition
      operationId: AdvertisementsApi_getAdvertsForRequisition
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: <p>Returns the list of created adverts for a requisition</p>
      parameters:
        - description: jobNumber
          name: jobNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of postings
  /agency:
    get:
      tags:
        - Contract API
      summary: List of agencies
      operationId: ContractApi_listAgencies
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of agencies. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { agencies(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {agencyId_gt: 0}) { agencyId } }
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentGraphQlWrapperDto'
  /application:
    get:
      tags:
        - Application API
      summary: List of applications
      operationId: ApplicationApi_listApplications
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of applications. DTO structure depends on a GraphQL
        query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { applications(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGraphQlWrapperDto'
  /application/available-statuses:
    get:
      tags:
        - Application API
      summary: retrieves application statuses
      operationId: ApplicationApi_getStatuses
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to retrieve all application statuses for a given
        language. Method returns a list from operation.
      parameters:
        - name: langCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: Application statuses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableApplicationStatusesDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to retrieve application statuses
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /application/status:
    put:
      tags:
        - Application API
      summary: Updates application status
      operationId: ApplicationApi_updateStatusById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update application status for a given application
        ID. It works in the same way as manual change of appliciation status in
        Talentlink BO. Method returns a report from operation.
      requestBody:
        description: statuses
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationsStatusDto'
        required: true
      responses:
        '200':
          description: Application status update processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsStatusReportDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to change application status
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /application/{applicationId}/update-application-context:
    get:
      tags:
        - Application API
      summary: >-
        Generates JWT token to be used in Apply API for updating an existing
        general application in TLK
      operationId: ApplicationApi_generateJwtToken
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update an existing general application record
        (referenced by Application ID) instead of creating a new record or
        relying on a merge rules configured in TalentLink. JWT token returned by
        this endpoint should be used while calling Apply API. Please refer to
        Apply API documentation (Submissions endpoint) for further details.
      parameters:
        - description: Application ID
          name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Application update possible for given Application ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsStatusReportDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /assessment-provider/results-template/{systemName}:
    get:
      tags:
        - Assessment Provider API
      summary: Method returns the structure of a form to be used for uploading results
      operationId: AssessmentProviderApi_getResultsTemplate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>In the configuration of the External System Provider there is a
        dedicated form assigned.That form is used to upload the results and in
        some cases scoring. This method returns the structure of the configured
        form.System Name is to be provided (which is the name which is setup in
        the External System configuration).This structure can then be used in
        <b>submitResults</b> method.</p>
      parameters:
        - description: systemName
          name: systemName
          in: path
          required: true
          schema:
            type: string
        - description: showLocalizedValue
          name: showLocalizedValue
          in: query
          required: false
          schema:
            type: boolean
        - description: localizedValueLangCode
          name: localizedValueLangCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: Results template structure successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredDocumentDto'
  /assessment-provider/submit-report:
    post:
      tags:
        - Assessment Provider API
      summary: >-
        Allows an assessment provider to submit a physical file containing a
        report of the candidate's assessment.
      operationId: AssessmentProviderApi_submitReport
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Method allows an assessment provider to submit a physical file
        containing a report of the candidate's assessment. Such file usually
        contains more descriptive information about the results. Uploaded file
        is visible in TalentLink and is linked to Selection Step which was used
        to trigger the assessment. <b>RequestID</b> contains the unique
        correlation ID which is generated by TalentLink (it is visible in the
        Queue and also on the Selection Step</p>
      requestBody:
        description: submitReportRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReportRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResultDto'
        '201':
          description: Report submitted
  /assessment-provider/submit-resource:
    post:
      tags:
        - Assessment Provider API
      summary: Allows to pass the assessment URL to TalentLink
      operationId: AssessmentProviderApi_submitResource
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>The Assessment Provider API needs to be used with Queues
        API.</p></br><p><b>Work Flow</b></p><p>A typical work flow would
        be:</p><ul><li><p>A recruiter starts the candidate's selection step
        which is linked to an assessment.</p></li><li><p>The request is added to
        a Queue which usually is monitored by the assessment provider.
        Optionally queues are also able to send out notifications to the
        specified endpoint.</p></li><li><p>The assessment provider calls the
        Queue web service to retrieve details of the request (especially the
        <b>RequestID</b> which identifies the selection step which was
        used).</p></li><li><p>Provider registers candidate.</p></li><li><p>The
        assessment provider calls the Queue web service to remove the request
        from the queue.</p></li><li><p>Provider calls <b>submitResource</b>
        method to pass the URL for the candidate to take the
        assessment.</p></li><li><p>Once the URL is provided an email containing
        the URL is sent to the candidate by TalentLink.</p></li><li><p>Candidate
        takes assessment.</p></li><li><p>Provider sends results back either as a
        report (<b>submitReport</b>)or as a TalentLink defined form
        (<b>submitResults</b>).</p></li><li><p>Provider use <b>submitStatus</b>
        method  to send 'Completed' value as status.  This action closes the
        selection step and automatically proceeds or reject Candidate to next
        selection step based on auto-scoring rules set-up within the dedicated
        form in TalentLink.</p></li></ul>
      requestBody:
        description: submitResourceRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResourceRequest'
        required: true
      responses:
        '200':
          description: Resource submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResultDto'
  /assessment-provider/submit-results:
    post:
      tags:
        - Assessment Provider API
      summary: >-
        Allows an assessment provider to submit a structured document (form)
        containing results.
      operationId: AssessmentProviderApi_submitResultsForm
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>After using <b>getResultsTemplate</b> method and fetching the
        structure of the form configured in the External System settings the
        obtained structure should be used to upload the results and scoring.</p>
      requestBody:
        description: submitResultsRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResultsRequest'
        required: true
      responses:
        '200':
          description: Result submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResultDto'
  /assessment-provider/submit-status:
    post:
      tags:
        - Assessment Provider API
      summary: >-
        Allows an assessment provider to update the status of a candidate's
        assessment & selection step.
      operationId: AssessmentProviderApi_updateAssessmentStatus
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to send the status of the assessment and close the
        selection step, which allows for the next steps to be started (or
        candidate to be rejected) based on the scoring.
      requestBody:
        description: submitStatusRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitStatusRequest'
        required: true
      responses:
        '200':
          description: Status submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResultDto'
  /campaign/type:
    put:
      tags:
        - Campaign API
      summary: Assign campaign types to candidates
      operationId: CampaignApi_assignCampaignTypesToCandidates
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: campaign type assignment data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignTypeAssignmentDto'
        required: true
      responses:
        '200':
          description: Campaign types successfully assigned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate:
    get:
      tags:
        - Candidate API
      summary: List of candidates
      operationId: CandidateApi_listCandidates
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of candidates. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { candidates(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateGraphQlWrapperDto'
    post:
      tags:
        - Candidate API
      summary: Creates Candidate
      operationId: CandidateApi_createCandidateRecord
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to create candidates in Talentlink. Please note it
        creates a basic candidate record based on a set of standard
        fields.</p><p>Before creating the candidate: If you wish to know the
        structure of the fields in Candidate Summary for a given department (and
        also indication of required fields) please call below method:</br> GET
        candidate/summary/{templateType} - where a template type needs to be
        provided on entry and the response contains the fields structure for a
        given template and candidate type (i.e. internal, external, temporary,
        contractor).</p><p>Please note that candidate in Talentlink must have a
        context (Position or Candidate Pool).Therefore when creating the
        candidate one of the below parameters must be used:</br>"openingId" - ID
        of the position (job/requisition).

        </br>"poolId" - ID of the candidate Pool.

        </p><p>NOTE: One of them must be used  (both parameters can also be
        used).</p><p>If you wish to add LOVS, FFF or any custom fields after you
        create the basic record then you need to run below method:</br>PUT:
        /candidate/{candidateId}/summary - Update Candidate
        Summary</p></br><p>List of possible consent statuses:</p><ul> 
        <li><b>GRANTED</b></li>   <li><b>REVOKED_BY_USER</b></li>   
        <li><b>NOT_REQUESTED</b></li>  </ul>
      requestBody:
        description: new candidate data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicCandidateDto'
        required: true
      responses:
        '201':
          description: Candidate successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/application/score:
    put:
      tags:
        - Candidate API
      summary: Update Candidate Application Score
      operationId: CandidateApi_updateApplicationScore
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: new candidate sumary data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationScoreDto'
        required: true
      responses:
        '204':
          description: Candidate application score successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/archive/mark:
    patch:
      tags:
        - Candidate API
      summary: Mark candidates for archiving
      operationId: CandidateApi_markForArchiving
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/CandidateListDto'
      responses:
        '200':
          description: >-
            Eligible candidates were marked for archiving. There is returned
            structure with list of all input candidates and their archiving
            statuses. If a candidate cannot be marked for archiving then this
            information is returned in a response structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivingSummariesDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/archive/unmark:
    patch:
      tags:
        - Candidate API
      summary: Unmark candidates from archiving
      operationId: CandidateApi_unmarkFromArchiving
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/CandidateListDto'
      responses:
        '200':
          description: >-
            Eligible candidates were unmarked from archiving. There is returned
            structure with list of all input candidates and their archiving
            statuses. If a candidate cannot be unmarked from archiving then this
            information is returned in a response structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivingSummariesDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/attachment/{documentId}:
    get:
      tags:
        - Candidate API
      summary: Download candidate attachment file
      operationId: CandidateApi_downloadAttachment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to fetch all documents that were uploaded
        manually, as attachments linked to specific candidate.</br>Such
        documents can include Resumes, Cover Letters, Emails etc. Usually they
        are uploaded after the candidate is created via API or manually in
        Talentlink by the user.</p><p>List of all types of attachment
        types:<ul><li>RESUME,</li><li>COVER_LETTER,</li><li>MAIL,</li><li>OFFER_LETTER,</li><li>OTHER.</li></ul></p><p>NOTE:
        This method returns ONLY attachments.</br> For the list of structured
        documents that are part of Application or Selection processes please
        call GET/candidate/documents/{documentId} endpoint.</p>
      parameters:
        - description: Id of attachment document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this document
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/consent:
    get:
      tags:
        - Candidate API
      summary: List of consents
      operationId: CandidateApi_getConsents
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of consents. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { consents (first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
      responses:
        '200':
          description: Candidate consent successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentGraphQlWrapperDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to candidate consent
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/document/{documentId}:
    get:
      tags:
        - Candidate API
      summary: Download candidate document
      operationId: CandidateApi_downloadDocument
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to fetch all structured documents of the
        candidate. </br>Structured documents are pre defined in Talentlink as
        templates and are usually used & created as part of theapplication
        process (typically Questionnaires, PIF etc.) or as part of Selection
        process (Feedback Forms etc.).</br>List of all types of the documents
        that can appear in the response can be found
        POSSIBLE_DOCUMENT_TYPE_VALUES_PLACEHOLDER.</p><p>NOTE: This method
        returns ONLY structured documents.</br>For the list of documents
        uploaded by the user during creation of the candidate manually (CREATE
        method)please call GET/candidate/attachment/{documentId} endpoint.</p>
      parameters:
        - description: Id of attachment document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this document
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/email-document/attachment/{attachmentId}:
    get:
      tags:
        - Candidate API
      summary: Fetch complete email documents (base64)
      operationId: CandidateApi_getCompleteEmailDocument
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Each email is saved as a document in Talentlink. The global method GET
        allows to fetch it as attachment. However it is not returning all of the
        information strictly related to email (like subject, sender etc.) as it
        only returns the email body.

        This particular method allows to fetch complete email documents with all
        the additional, email related information.
      parameters:
        - description: Id of attachment
          name: attachmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Attachment found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this attachment
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/email-document/{documentId}:
    get:
      tags:
        - Candidate API
      summary: Get details about candidate email document for provided ID
      operationId: CandidateApi_getEmailDocumentDetails
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of email document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this document
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/form-document/{documentId}:
    get:
      tags:
        - Candidate API
      summary: Get answers from candidate documents
      operationId: CandidateApi_getDocumentAnswers
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this document
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/structured-document/{documentId}:
    get:
      tags:
        - Candidate API
      summary: Get document with answer for specified id
      operationId: CandidateApi_getDocumentAnswerById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: showLocalizedValues
          in: query
          required: false
          schema:
            type: boolean
        - name: langCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have access to this document
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/summary/{templateType}:
    get:
      tags:
        - Candidate API
      summary: >-
        Fetch Candidate summary structure for a given template type or candidate
        type
      operationId: CandidateApi_getSummaryStructure
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to fetch Candidate summary structure for a given
        template type or candidate type before creation of a candidate. In
        Talentlink there can be deifferent Candidate Summary structures
        depending on the candidate type (internal/external) and employee type
        (permanent / contractor). Therefore it is sometimes necessary to fetch
        the correct structure of the fields.
      parameters:
        - description: ' it can accept following values: candidate, employee, externalContractor, internalContractor.'
          name: templateType
          in: path
          required: true
          schema:
            type: string
        - description: ' language parameter'
          name: localizedValueLangCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
        - description: ' this parameters controls whether the field values display localized or unlocalized values. Possible values: true, false.'
          name: showLocalizedValue
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Candidate summary definition successfully returned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to Candidate Summary
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Template not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}:
    delete:
      tags:
        - Candidate API
      summary: Delete candidate
      operationId: CandidateApi_removeById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of the candidate
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: >-
            Candidate was deleted completely (response field
            'candidateDeletedCompletely' set to true) or partially (response
            field 'candidateDeletedCompletely' set to false). Candidate deletion
            depends on API user rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDeletionStatusDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}/consent:
    put:
      tags:
        - Candidate API
      summary: Update the candidate consent
      operationId: CandidateApi_updateConsent
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of the candidate
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: new candidate consent data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsentDto'
        required: true
      responses:
        '200':
          description: Consent updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update consent
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}/linktojob:
    put:
      tags:
        - Candidate API
      summary: Link candidate to one or more jobs
      operationId: CandidateApi_linkToJob
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of candidate which will be linked to job/s
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: linkToJobsDto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkToJobsDto'
        required: true
      responses:
        '200':
          description: Candidate linked
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to link candidate
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}/referral/{referralId}:
    put:
      tags:
        - Candidate API
      summary: Update Referral Info
      operationId: CandidateApi_updateReferralInfo
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>After creating the candidate you may wish to change Referral
        information.</p><p>Before calling this method you may want to use
        GET/candidate method to fetch the structure of the Referral</p>
      parameters:
        - description: Id of candidate whom Referrer data will be updated
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Id of Referral to be updated
          name: referralId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: new Referrer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferrerDto'
        required: true
      responses:
        '204':
          description: Referral data successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update candidate summary
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}/summary:
    get:
      tags:
        - Candidate API
      summary: Fetch candidate summary for a given Candidate.
      operationId: CandidateApi_getSummaryById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of candidate whom candidate summary is requested
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Language of localized values
          name: langCode
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Candidate summary successfully returned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to candidate summary of candidate
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    put:
      tags:
        - Candidate API
      summary: Update Candidate Summary
      operationId: CandidateApi_updateSummary
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>After creating the candidate you may wish to add extra fields defined
        in the summary.</p><p>Before calling this method you may want to use
        GET/candidate/{candidateId}/summary/definition method to fetch the
        structure of the form</p>
      parameters:
        - description: Id of candidate whom candidate summary will be updated
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: new candidate sumary data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnsweredDto'
        required: true
      responses:
        '204':
          description: Candidate summary successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update candidate summary
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{candidateId}/summary/definition:
    get:
      tags:
        - Candidate API
      summary: >-
        Fetch empty Candidate Summary structure for existing candidate. Useful
        for updating candidate
      operationId: CandidateApi_getEmptySummaryDefinition
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method returns the empty structure of the candidate summary
        along with all the possible values for a given candidateID.</p><p>Main
        template for the summary can be edited, while existing candidate may
        have older version of the form.</p><p>With this method user can view the
        exact structure of the existing candidate summary along with the
        possible values</p>
      parameters:
        - description: Id of candidate whom candidate summary is requested
          name: candidateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Candidate summary definition successfully returned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to Candidate Summary Definition
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{id}/tag:
    post:
      tags:
        - Candidate API
      summary: Add tag to candidate
      operationId: CandidateApi_addTagToCandidate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: candidate id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTagAssignmentDto'
        required: true
      responses:
        '204':
          description: Tag added to candidate.
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{id}/tag/{tagId}:
    delete:
      tags:
        - Candidate API
      summary: Remove tag from candidate
      operationId: CandidateApi_removeTag
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: candidate id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: document
          name: tagId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Tag removed from candidate.
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidate/{id}/upload/document:
    post:
      tags:
        - Candidate API
      summary: Upload candidate document
      operationId: CandidateApi_uploadDocument
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: candidate id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateDocumentDto'
        required: true
      responses:
        '200':
          description: File uploaded.
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidatepool:
    get:
      tags:
        - Candidate Pools
      summary: Returns the list of shared candidate pools available to the user
      operationId: CandidatePools_getList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Candidate Pools allow to group candidates in specific sets.
        <br/>These sets can be then used for filtering purposes and to build a
        potential Talent base for future job opprtunities.<br/>Pools can be used
        to group candidates by skills, particular positions etc.<br/>there are
        two types of Pools in Talentlink:<br/>- users's private Pool (each user
        has one by default) - contents of this Pooll cannot be shared with other
        users.<br/>- shared Pool which is assigned to a specific Department.
        Users with access to candidates from this department are be able to see
        & add/remove candidates to/from this pool.</p><br/><p>This method
        returns all the details of existing Candidate Pool(s) that are available
        to view by the user.<br/>It is possible to filter the response based on
        the GrapQL logic and to get one or more pool details.</p>
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { candidatePools(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePoolGraphQlWrapperDto'
    post:
      tags:
        - Candidate Pools
      summary: Method to create a new, shared Candidate Pool
      operationId: CandidatePools_createNewShared
      security:
        - username: []
        - password: []
        - apiKey: []
      description: >-
        This method allows the user to create a new Shared pool. 

        Please note, that the Pool needs to be assigned to a specific Department
        of the company so that users of this department could view the contents
        of it. 
      requestBody:
        $ref: '#/components/requestBodies/CandidatePoolCreationDto'
      responses:
        '201':
          description: Candidate Pool was successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: >-
            User has no right Can Manage Candidate Pools via Rest API (1019) for
            the given department
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /candidatepool/{poolId}:
    put:
      tags:
        - Candidate Pools
      summary: allows to update or delete existing pool
      operationId: CandidatePools_updateExistingPool
      security:
        - username: []
        - password: []
        - apiKey: []
      description: |-
        This method allows the user to update or delete existing pool. 
        User needs to provide the ID  of the Pool he wish to modify. 
      parameters:
        - description: candidatepool id
          name: poolId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/CandidatePoolCreationDto'
      responses:
        '204':
          description: Candidate Pool was successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: >-
            User has no right Can Manage Candidate Pools via Rest API (1019) for
            the given department
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Candidate Pool not found
  /contract:
    get:
      tags:
        - Contract API
      summary: List of contracts
      operationId: ContractApi_listContracts
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of contracts. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { contracts(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractGraphQlWrapperDto'
    post:
      tags:
        - Contract API
      summary: Creates a new contract
      operationId: ContractApi_createNewContract
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to create a contract for the candidate. Contract
        contents are separately configured in Talentlink.Therefore before you
        create a contract you may want to use below methods to fetch the
        configuration first: </br>Method:
        GET/department/{departmentId}/contractorcontract/config - Fetch
        configuration of the Temporary contract </br>Method:
        GET/department/{departmentId}/permanentcontract/config - Fetch
        configuration of the Permanent contract</p><p>Please also note that each
        position has a defined Selection Process assigned. So for the contract
        to be created via API all of the restrictions of Selection Process need
        to be fulfilled first (all the necessary steps need to be closed).
        Otherwise it will be impossible to create the contract</p><p>Optionally
        there can be a dedicated Selection Process created where there are no
        restrictions before hiring. In both cases however please be aware that
        the PreScreening step is always mandatory in Talentlink.</p><p>It is
        possible to close the PreScreening step using the dedicated method in
        Selection Process
        API:<br>PUT/selection-process/application/{applicationId}/completePrescreening</p>
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '409':
          description: Contract for given application already exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be created
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /contract/rateset:
    get:
      tags:
        - Contract API
      summary: List of rate formula set
      operationId: ContractApi_listRateSets
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of rate formula set. DTO structure depends on a GraphQL
        query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { ratesFormulas(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateFormulaSetGraphQlWrapperDto'
  /contract/{contractId}:
    delete:
      tags:
        - Contract API
      summary: Delete a Contract Extension
      operationId: ContractApi_deleteContractExtension
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to delete an accepted Extension of the existing
        contract. To delete it you need to provide the ID of the accepted
        contract extension which is to be deleted.</p>
      parameters:
        - description: Id of the contract's extension to delete
          name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Contract extension successfully deleted
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /contract/{contractId}/extension:
    post:
      tags:
        - Contract API
      summary: Create a new Contract Extension
      operationId: ContractApi_createExtension
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to create an Extension of the existing temporary
        contract. To create it you need to provide the ID of the contract which
        is to be extended.</p><p>NOTE: Extension start / end dates should not
        overlap with already existing contacts or extensions.</p>
      parameters:
        - description: Id of the contract's current version
          name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be extended
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - Contract API
      summary: >-
        Create a new Contract Extension based on contract values, using PATCH
        logic (provide only elements that are changing)
      operationId: ContractApi_createExtension
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to create an Extension of the existing temporary
        contract. To create it you need to provide the ID of the contract which
        is to be extended.</p><p>NOTE: Extension start / end dates should not
        overlap with already existing contacts or extensions.</br>If you wish to
        delete a value you need to use POST method.</p>
      parameters:
        - description: Id of the contract's current version
          name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be extended
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /contract/{contractId}/update:
    post:
      tags:
        - Contract API
      summary: >-
        Update existing contract (creates new contract version) - entire
        structure is required
      operationId: ContractApi_updateContractEntireStructure
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to update the existing extension using POST
        logic.</p><p>It means that you need to provide all contract details even
        for the fields you do not wish to change. Therefore it is advised to
        call GET/contract first and cache the information and only then use the
        POST method.</p><p>This type of update is faster in terms of response as
        the system does not need to cache any data.</p><p>Please note:  if you
        use an empty tag in this method it means you wish to set it to  "null"
        value.</p>
      parameters:
        - description: Id of the contract's current version
          name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '409':
          description: Contract for given id is not the current version
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be updated
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - Contract API
      summary: >-
        Update contract using PATCH logic (provide only elements that are
        changing)
      operationId: ContractApi_updateContractUsingPatch
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to update the existing contract using PATCH logic.
        It means that you do not need to provide all contract details (like when
        using POST). Instead you can only use the elements which you wish to
        update. All other unused tags will be copied from the previous contract
        and remain unchanged.</p><p>Please note:  if you wish to delete a value
        you need to use POST method</p>
      parameters:
        - description: Id of the contract's current version
          name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '409':
          description: Contract for given id is not the current version
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be updated
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /contract/{extensionId}/extension/update:
    post:
      tags:
        - Contract API
      summary: >-
        Update existing extension (creates new extension version) - entire
        structure is required
      operationId: ContractApi_updateExtension
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to update the existing extension using POST
        logic.</p><p>It means that you need to provide all contract details even
        for the fields you do not wish to change. Therefore it is advised to
        call GET/contract first and cache the information and only then use the
        POST method.</p><p>This type of update is faster in terms of response as
        the system does not need to cache any data.</p><p>Please note:  if you
        use an empty tag in this method it means you wish to set it to  "null"
        value.</p>
      parameters:
        - description: Id of the contract's extension
          name: extensionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be extended
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - Contract API
      summary: >-
        Update extension using PATCH logic (provide only elements that are
        changing)
      operationId: ContractApi_updateExtensionUsingPatch
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Details: This method allows to update the existing extension using
        PATCH logic. It means that you do not need to provide all contract
        details (like when using POST). Instead you can only use the elements
        which you wish to update. All other unused tags will be copied from the
        previous contract and remain unchanged.</p><p>Please note:  if you wish
        to delete a value you need to use POST method</p>
      parameters:
        - description: Id of the contract's extension
          name: extensionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicContractDto'
      responses:
        '201':
          description: Contract successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Contract with given id does not exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '412':
          description: Contract for given application cannot be extended
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department:
    get:
      tags:
        - Department API
      summary: List of departments
      operationId: DepartmentApi_getList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of departments. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { departments(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentGraphQlWrapperDto'
    post:
      tags:
        - Department API
      summary: Creates a new department
      operationId: DepartmentApi_createNewDepartment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/BasicDepartmentDto'
      responses:
        '201':
          description: Department successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}:
    put:
      tags:
        - Department API
      summary: Updates an existing department
      operationId: DepartmentApi_updateDepartment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: department id to be updated
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/BasicDepartmentDto'
      responses:
        '201':
          description: Department successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Department with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - Department API
      summary: Deletes a department with the given id
      operationId: DepartmentApi_deleteDepartmentById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: department id to be deleted
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Entity not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}/activate:
    put:
      tags:
        - Department API
      summary: Activates a department with the given id
      operationId: DepartmentApi_activateDepartmentById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: department to be activated with a given id
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Entity not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}/contractorcontract/config:
    get:
      tags:
        - Contract API
      summary: Fetch configuration of the Temporary contract
      operationId: ContractApi_getTemporaryContractConfig
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Contract content is separately configured in Talentlink. This method
        allows to fetch the list of fields for Temporary contracts.</p>
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: userType
          name: userType
          in: query
          required: true
          schema:
            type: string
            enum:
              - ADVANCED
              - MSS
              - CANDIDATE
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferTermsDto'
  /department/{departmentId}/deactivate:
    put:
      tags:
        - Department API
      summary: Deactivates a department with the given id
      operationId: DepartmentApi_deactivateDepartment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: department to be deactivated with a given id
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Entity not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}/job-template/config:
    get:
      tags:
        - Personal job template API
      summary: Fetch Job template configuration for a given Department.
      operationId: PersonalJobTemplateApi_getConfiguration
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Department id
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Recruitment context
          name: recruitmentContext
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONTRACTOR
              - PERMANENT
        - description: 'User type: ADVANCED, MSS'
          name: userType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ADVANCED
              - MSS
        - description: Language
          name: language
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: Personal job template configuration successfully returned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Job template not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}/move:
    put:
      tags:
        - Department API
      summary: >-
        Moves a department with the given id to another parent with a
        destination id
      operationId: DepartmentApi_moveDepartmentToNewParent
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: department to be moved with a given id
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: 'department id of the new parent: destination id: '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDepartmentParentIdDto'
        required: true
      responses:
        '204':
          description: No content
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Entity not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /department/{departmentId}/permanentcontract/config:
    get:
      tags:
        - Contract API
      summary: Fetch configuration of the Permanent contract
      operationId: ContractApi_getPermanentContractConfig
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Contract content is separately configured in Talentlink. This method
        allows to fetch the list of fields for Permanent contracts.</p>
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: userType
          name: userType
          in: query
          required: true
          schema:
            type: string
            enum:
              - ADVANCED
              - MSS
              - CANDIDATE
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferTermsDto'
  /department/{userId}/job-template:
    put:
      tags:
        - Personal job template API
      summary: Assign or Update a job template for a given User.
      operationId: PersonalJobTemplateApi_assignOrUpdateJobTemplate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: User id
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Job Template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalJobTemplateBasicDto'
        required: true
      responses:
        '200':
          description: Personal job template successfully updated
        '201':
          description: Personal job template successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Job template not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /internal-message:
    get:
      tags:
        - Internal Message API
      summary: List of internal messages
      operationId: InternalMessageApi_getMessageList
      security:
        - username: []
        - password: []
        - apiKey: []
      description: >-
        Returns a list of internal messages. DTO structure depends on a GraphQL
        query
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { internalMessages(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {receiverUser_eq: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalMessageGraphQlWrapperDto'
    post:
      tags:
        - Internal Message API
      summary: Send new message
      operationId: InternalMessageApi_sendNewMessage
      security:
        - username: []
        - password: []
        - apiKey: []
      description: Sends new internal message based on provided parameters
      requestBody:
        description: sendInternalMessageRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendInternalMessageRequest'
        required: true
      responses:
        '201':
          description: Internal message successfully sent
        '400':
          description: Internal message parameters are invalid
  /internal-message/archive:
    post:
      tags:
        - Internal Message API
      summary: Archive internal message
      operationId: InternalMessageApi_archiveMessageById
      security:
        - username: []
        - password: []
        - apiKey: []
      description: This method allows to archive internal message based on id
      parameters:
        - description: archiveInternalMessage
          name: internalMessageIds
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '201':
          description: Internal message successfully archived
        '400':
          description: Internal message parameters are invalid
  /interview/location:
    get:
      tags:
        - Interview Location API
      summary: List of interview locations
      operationId: InterviewLocationApi_getList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of interview locations. DTO structure depends on a
        GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { locations(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewLocationGraphQlWrapperDto'
    post:
      tags:
        - Interview Location API
      summary: Creates Location
      operationId: InterviewLocationApi_createNewLocation
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to CREATE new Interview location. Some of the
        fields are mandatory (e.g. Timezone).</br>Please note that Countries are
        connected to Timezones in Talentlink. </br>Full list of Countries and
        assigned Timezones can be found
        POSSIBLE_COUNTRY_TIME_ZONE_VALUES_PLACEHOLDER.</p>
      requestBody:
        $ref: '#/components/requestBodies/InterviewLocationBasicDto'
      responses:
        '201':
          description: Location successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Credentials not provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create a interview location
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /interview/location/timezones:
    get:
      tags:
        - Interview Location API
      summary: List of available timezones
      operationId: InterviewLocationApi_listTimezones
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of available timezones. DTO structure depends on a
        GraphQL query. 'First' and 'after' operations are not supported.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { timezones (where: { name_like: "Europe", name_notLike:
              "Europe/Warsaw" }) { name } }
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeZoneGraphQlWrapperDto'
  /interview/location/{id}:
    put:
      tags:
        - Interview Location API
      summary: Update Location
      operationId: InterviewLocationApi_updateById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/InterviewLocationBasicDto'
      responses:
        '204':
          description: Location successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Credentials not provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update a interview location
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - Interview Location API
      summary: Delete location
      operationId: InterviewLocationApi_deleteById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: location successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /location:
    get:
      tags:
        - Location API
      summary: List of Locations
      operationId: LocationApi_listLocations
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of Locations. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { locations(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGraphQlWrapperDto'
    post:
      tags:
        - Location API
      summary: Creates Location
      operationId: LocationApi_createLocation
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationBasicDto'
        required: true
      responses:
        '201':
          description: Location successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Credentials not provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create a job location
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '409':
          description: Location with provided name already exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /location/{id}:
    put:
      tags:
        - Location API
      summary: Updates Location
      operationId: LocationApi_updateLocationRequest
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDto'
        required: true
      responses:
        '204':
          description: Location successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Credentials not provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update a job location
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '409':
          description: Another location with provided name already exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - Location API
      summary: Delete location
      operationId: LocationApi_removeById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: location successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov:
    get:
      tags:
        - LOV API
      summary: List of standard fields
      operationId: LovApi_getStandardFields
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method retrieves the list of Standard Fields along with all their
        properties and translations.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { lovs(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovGraphQLWrapperDto'
  /lov/configurable:
    post:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to create a new Configurable Fields with entries
      operationId: LovApiConfigurableLov_createConfigurableFieldWithEntries
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Configurable Fields are the most commonly used type of fields in
        TalentLink. Usually they are part of Requisitions and Adverts. This
        method allows to create a new Configurable Field along with entries.
      requestBody:
        description: New Configurable LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLovWithDataTypeDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiConfigurableLovCreateConfigurableFieldWithEntriesResponse
        '204':
          description: LOV successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/configurable/{lovId}:
    patch:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to update a Configurable Field.
      operationId: LovApiConfigurableLov_updateField
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update a Configurable Field (main name). To modify
        particular entries use separate dedicated method.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update Configurable LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicLovDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiConfigurableLovUpdateFieldResponse'
        '204':
          description: LOV successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/configurable/{lovId}/deactivate:
    put:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to deactivate entire Configurable Field (with entries).
      operationId: LovApiConfigurableLov_deactivateConfigField
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: This method allows to deactivate Configurable Field.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiConfigurableLovDeactivateConfigFieldResponse
        '204':
          description: Config LOV successfully deactivated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update LOV properties
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/configurable/{lovId}/entry:
    delete:
      tags:
        - LOV API - Configurable LOV
      summary: >-
        Allows to delete one or more entries from an existing Configurable
        Field.
      operationId: LovApiConfigurableLov_deleteEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to delete an entry from Configurable LOV. You need to
        provide the ID of the parent LOV and then the list of entry IDs to be
        deleted.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: entriesIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LovApiConfigurableLovDeleteEntryResponse'
        '204':
          description: LOV entries successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to delete entry from LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/configurable/{lovId}/properties:
    patch:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to update properties of the Configurable Field
      operationId: LovApiConfigurableLov_updateProperties
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Each Configurable Field has a set of properties which determine where
        the field should appear, whether it should be sent along with Posting
        Extract etc. The same properties can be set in TalentLink UI.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UpdateLovPropertiesDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiConfigurableLovUpdatePropertiesResponse
        '204':
          description: LOV properties successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update LOV properties
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/configurable/{parentId}/entry:
    post:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to create a new Configurable Field entries
      operationId: LovApiConfigurableLov_createEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to create one or more new entries in an existing
        Configurable Field. You need to provide the ID of the parent LOV and
        then the array of new entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: New Configurable LOV entries
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLovEntriesWithDataValueDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiConfigurableLovCreateEntryResponse'
        '204':
          description: LOV entry successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - LOV API - Configurable LOV
      summary: Allows to update one or more entries in an Configurable LOV
      operationId: LovApiConfigurableLov_updateEntries
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update one or more entries in an existing
        Configurable Field. You need to provide the ID of the parent LOV and
        then the array of new values for existing entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update Configurable LOV entries
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLovEntriesWithDataValueDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiConfigurableLovUpdateEntriesResponse
        '204':
          description: LOV entries successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field:
    post:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to create a new Free Form Field with entries
      operationId: LovApiFreeFormFieldLov_createNewLovWithEntries
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Free Form Fields LOVs are the second most commonly used type of fields
        in TalentLink. They work in the same way as Configurable Fields. Usually
        they are part of Requisitions and Adverts. This method allows to create
        new LOV along with entries.
      requestBody:
        description: New Free Form Field LOV
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/CreateLovWithEntriesWithDataFormatAndRequiredDto
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiFreeFormFieldLovCreateNewLovWithEntriesResponse
        '204':
          description: LOV successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field/{lovId}:
    patch:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to update a Free Form Field LOV
      operationId: LovApiFreeFormFieldLov_updateEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update a Free Form Field (main name). To modify
        particular entries use separate dedicated method.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update Free Form Field LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicLovDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiFreeFormFieldLovUpdateEntryResponse'
        '204':
          description: LOV successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field/{lovId}/deactivate:
    put:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to deactivate Free Form Field
      operationId: LovApiFreeFormFieldLov_deactivateField
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Allows to deactivate entire Free Form Field (with entries).
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiFreeFormFieldLovDeactivateFieldResponse
        '204':
          description: Free Form Field LOV successfully deactivated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update LOV properties
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field/{lovId}/entry:
    delete:
      tags:
        - LOV API - Free Form Field LOV
      summary: >-
        Allows to delete one or more entries from an existing Free Form Field
        LOV
      operationId: LovApiFreeFormFieldLov_deleteEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to delete one or more entries from Configurable LOV.
        You need to provide the ID of the parent LOV and then the list of entry
        IDs to be deleted.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: entriesIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LovApiFreeFormFieldLovDeleteEntryResponse'
        '204':
          description: FreeFormField LOV entries successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to delete entry from FreeFormField LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field/{lovId}/properties:
    patch:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to update properties of the Free Form Field
      operationId: LovApiFreeFormFieldLov_updateProperties
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Each Free Form Field has a set of properties which determine where the
        field should appear, whether it should be sent along with Posting
        Extract etc. The same properties can be set in TalentLink UI.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UpdateLovPropertiesDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiFreeFormFieldLovUpdatePropertiesResponse
        '204':
          description: LOV properties successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to update LOV properties
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/free-form-field/{parentId}/entry:
    post:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to create a new Free Form Field entries.
      operationId: LovApiFreeFormFieldLov_createNewEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to create one or more new entries in an existing Free
        Form Field. You need to provide the ID of the parent LOV and then the
        array of new entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: New Free Form Field LOV entries
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/CreateLovEntriesWithDataFormatAndRequiredDto
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiFreeFormFieldLovCreateNewEntryResponse
        '204':
          description: LOV entry successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - LOV API - Free Form Field LOV
      summary: Allows to update one or more entries in an Free Form Field
      operationId: LovApiFreeFormFieldLov_updateEntries
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update one or more entries in an existing Free
        Form Field. You need to provide the ID of the parent LOV and then the
        array of new values for existing entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update Free Form Field entries
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/UpdateLovEntriesWithDataFormatAndRequiredDto
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiFreeFormFieldLovUpdateEntriesResponse
        '204':
          description: LOV entries successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/standard-fields:
    post:
      tags:
        - LOV API - Standard Fields
      summary: Allows to create a new entry within an existing Standard Field
      operationId: LovApiStandardFields_createNewEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>Standard Fields are pre-defined fields in TalentLink which cannot be
        edited. However you are able to create/modify entries within those
        fields.</p></br><p>This method allows to create a new entry within an
        existing Standard Field. To create a new entry (a child field) you need
        to provide the parent ID (main Standard Field ID) along with the value
        and the language so that value is assigned for the proper
        translation.</p>
      requestBody:
        description: New LOV Entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLovEntryDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/LovApiStandardFieldsCreateNewEntryResponse
        '204':
          description: Lov entry successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - LOV API - Standard Fields
      summary: Allows to update an entry within a Standard Field using PATCH logic.
      operationId: LovApiStandardFields_updateEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows you to update an entry within a Standard
        Field.</p></br><p>You can update one or more translations for a given
        field with this method.</p></br><p><b>Please note</b> PATCH logic is
        used here therefore you need to provide  only the values for
        translations that you wish to update. Values of the translations which
        are not used in the request will be copied from the existing values
        (unchanged).</p>
      requestBody:
        description: Update LOV labels
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLovLabelsDto'
      responses:
        '204':
          description: Lov labels successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to deactivate LOV entry
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/standard-fields/deactivate:
    put:
      tags:
        - LOV API - Standard Fields
      summary: Method to deactivate an existing entry in the Standard Field.
      operationId: LovApiStandardFields_deactivateEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows you to deactivate one or more entries (child fields)
        within a Standard Field. Method accepts the list of IDs separated by
        commas.
      requestBody:
        description: List of entries' IDs to be deactivated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateLovDto'
      responses:
        '204':
          description: Lov entry successfully deactivated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to deactivate LOV entry
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/user-data:
    post:
      tags:
        - LOV API - User data
      summary: Allows to create a new User Data LOV with entries
      operationId: LovApiUserData_createNewField
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        User Data LOVs are the type of fields which are then used on the User
        details page. Very often they contain TLK User address information,
        telephone numbers etc. In general such fields expand the information
        abiout the TLK User and later can be used in reporting or user
        signatures.  This method allows to create a new User Data LOV field.
      requestBody:
        description: New User Data LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLovDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiUserDataCreateNewFieldResponse'
        '204':
          description: LOV successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/user-data/{lovId}:
    delete:
      tags:
        - LOV API - User data
      summary: Allows to delete entire User Data LOV field and its entries
      operationId: LovApiUserData_deleteEntireField
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: This method allows to delete entire User Data LOV and all its entries.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LovApiUserDataDeleteEntireFieldResponse'
        '204':
          description: LOV and its entries successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - LOV API - User data
      summary: Allows to update an User Data LOV
      operationId: LovApiUserData_updateUserDataLov
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update a User Data LOV (main name). To modify a
        particular entries use separate dedicated method.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update User Data LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicLovDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiUserDataUpdateUserDataLovResponse'
        '204':
          description: LOV successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/user-data/{lovId}/entry:
    delete:
      tags:
        - LOV API - User data
      summary: Allows to delete one or more entries from an existing User Data LOV.
      operationId: LovApiUserData_deleteEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to delete a particular entry from User Data LOV. You
        need to provide the ID of the parent LOV and then the list of  entry IDs
        to be deleted.
      parameters:
        - name: lovId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: entriesIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LovApiUserDataDeleteEntryResponse'
        '204':
          description: LOV entries successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to delete entry from LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /lov/user-data/{parentId}/entry:
    post:
      tags:
        - LOV API - User data
      summary: Allows to create a new User Data LOV entries
      operationId: LovApiUserData_createNewEntry
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to create one or more new entries in an existing User
        Data LOV. You need to provide the ID of the parent LOV and then the
        array of new entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: New User Data LOV
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLovEntriesDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiUserDataCreateNewEntryResponse'
        '204':
          description: LOV entry successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - LOV API - User data
      summary: Allows to update one or more entries in an User Data LOV.
      operationId: LovApiUserData_updateUserEntries
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to update one or more entries in an existing User
        Data LOV. You need to provide the ID of the parent LOV and then the
        array of new values for existing entries.
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update User Data LOV entries
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLovEntriesDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LovApiUserDataUpdateUserEntriesResponse'
        '204':
          description: LOV entries successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create entry in LOV
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /passwordRule:
    get:
      tags:
        - Password Rule API
      summary: List of password rules
      operationId: PasswordRuleApi_listPasswordRules
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of password rules. DTO structure depends on a GraphQL
        query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { passwordRule(first: 7, after: 1) {
              backOffice{userHasToChangePassword} } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordRuleGraphQlWrapperDto'
  /position:
    get:
      tags:
        - Position API
      summary: List of positions
      operationId: PositionApi_listPositions
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of positions. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { positions(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionGraphQlWrapperDto'
    post:
      tags:
        - Position API
      summary: Creates Position
      operationId: PositionApi_createPositionRequest
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to create a position.</p><p>Please note that each
        department can have a different configuration of the contents of a
        Position. Therefore you may wish to fetch the structure of a Position
        for a given Department by
        using:</br>GET/position/structure/{departmentId}</p>
      requestBody:
        description: opening
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningBasicDto'
        required: true
      responses:
        '201':
          description: Position successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to user preferences
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /position/structure/{departmentId}:
    get:
      tags:
        - Position API
      summary: Position structure for a given department
      operationId: PositionApi_getStructureForDepartment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Department id
          name: departmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Recruitment context
          name: recruitmentContext
          in: query
          required: false
          schema:
            type: string
            enum:
              - CONTRACTOR
              - PERMANENT
        - description: 'User type: ADVANCED, MSS'
          name: userType
          in: query
          required: false
          schema:
            type: string
            enum:
              - ADVANCED
              - MSS
        - description: Language
          name: language
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: Position structure successfully returned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Position structure not found
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /position/{openingId}:
    patch:
      tags:
        - Position API
      summary: Update opening data
      operationId: PositionApi_updateData
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: ID of the Position you wish to update
          name: openingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of field to be updated on the Position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningBasicDto'
      responses:
        '204':
          description: Update existing Position data
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to opening
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Opening with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /position/{positionId}/attachDocument:
    post:
      tags:
        - Position API
      summary: ' Attach a file to the existing Position'
      operationId: PositionApi_attachDocument
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: id of the opening
          name: positionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: attached file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachedFileDto'
        required: true
      responses:
        '200':
          description: File successfully attached
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to attach files
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /position/{positionId}/copy:
    post:
      tags:
        - Position API
      summary: Copy Position
      operationId: PositionApi_copyPosition
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: ID of the position you wish to copy
          name: positionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Name of the new Position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOpeningNameDto'
      responses:
        '201':
          description: Position successfully copied
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to copy Position
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /publishedadvert:
    get:
      tags:
        - Published Advert API
      summary: List of posting targets
      operationId: PublishedAdvertApi_listPostingTargets
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method returns the contents of the adverts posted from talent
        link</p><p>Talentlink offers possibility to create adverts for jobs.
        Those adverts contain job description, requirements for the job etc.They
        can also contain branding and images.</p><p>Once advert is created user
        can publish it on the preferred channels (sites). Those channels are
        usually External Career Site, Internal Career Site, Jobboards or
        Agencies.</p></br><p><b>Use Case:</b></p><p>Clients can build a custom
        career site based on adverts exported from TalentLink as an alternative
        to integrating front end components.</p><p>Clients may then build their
        career site using chosen technology, including lay-out and style with no
        constraints.</p></br><p><b>Additional
        Information:</b><p><b>Channel:</b>  represents a source to which a
        position can be published. For example it may be a job board or a web
        site. Each channel is made up of an ID, name, description and unique
        technical ID.</p><p><b>Posting Target:</b> represents a single advert
        publication to a single channel. For example a position may have a
        posting in French.The French posting may be posted to a French job board
        and to a French career site. In that case there would be two posting
        targets. Each posting target has its own start and end date along with
        the URL to apply for the position and the URL to see the position
        description.</p><p><b>Posting:</b> posting is in fact a group of
        adverts. A posting is created in a single language and is made up of a
        title, language, location and description.Each position can have
        multiple postings, perhaps in different languages or different wording
        in the same language.</p><p><b>Job description</b> fields can be found
        in this section: <br> - customFields - It contains up to 8 fields, each
        having the label, value and order
        parameters.</p><p><b>Locations:</b></p><p>There are two types of
        locations in Talentlink - Standard Location and Geolocation. Each one
        has a separate dedicated fields.</br>- Location - this is standard
        location. It can be set on the advert and will be returned in the API
        response.</br>- JobLocations - this section contains data about
        Geolocation. If the JobLocations are selected on the Advert then this
        section will display values from the Advert. However if this is not
        selected on the advert it will display Geolocation from the
        Position.</br>Please note there is a separate Feature Switch for
        Geolocation.That means that if the feature is disabled those fields will
        be empty.</p></br></br><p><b>IMPORTANT: This Webservice offers two ways
        of authentication.</b></p><p>One for public adverts (External Sites)
        only, which is a public access and second authentication (with user &
        pasword) to access all sites available for the user.</p></br><p><b>1.
        Authentication for External Site adverts:</b></p><p>External Site's
        adverts by default are public. So there is no need to use Talentlink
        User credentials and authentication. However, to get the adverts from
        External site you  need to know the Technical ID of the site plus the
        API Key is neded in the endpoint.</p><p>So the login credentials should
        be as follows:<br> - Username: Technical_ID:guest:FO (i. e.
        QC15K02923VGQB8G6GF79M:guest:FO)<br> - Password: guest</p></br><p><b>2.
        Authentication for ALL posting channels</b></p><p>To get adverts posted
        for all channels (External Sites, Internal Sites, Jobboards, Agencies)
        user need to be authenticated.</p><p>Of course such user need to be
        configured in Talentlink properly and have sufficient access to data
        (assignment of roles).</p><p>In this case login credentials should be as
        follows:<br> - Username: CompanyName:username:BO (i.
        e.MyCompany:JohnDoe:BO)<br> - Password - same as the user password for
        Talentlink</p><p><b> NOTE:</b> When calling this method with TalentLink
        user credentials - at least one or more technical site IDs (or posting
        channel IDs) must be provided in the request. For example:
         </p>{
        <br>&emsp;  publishedAdverts(first: 10, after: 0, sortBy: id, orderBy:
        ASC, where: {technicalId_eq: QC15K02923VGQB8G6GF79M }) {

        <br>&emsp;&emsp;id

        <br>&emsp;  }

        <br>}

        <br><p>You can fetch postings from multiple sites by using the filter:
        'technicalId_in' where you can put a list of IDs, separated by
        commas.<p>
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { publishedAdverts(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishedAdvertGraphQlWrapperDto'
  /publishedadvert/activechannel:
    get:
      tags:
        - Published Advert API
      summary: List of active posting channels
      operationId: PublishedAdvertApi_listActiveChannels
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of posting channels. DTO structure depends on a GraphQL
        query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { sourcingChannels(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourcingChannelGraphQlWrapperDto'
  /publishedadvert/attachment/{documentId}:
    get:
      tags:
        - Published Advert API
      summary: Download advert attachment file
      operationId: PublishedAdvertApi_downloadAdvertAttachment
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns file attached to advert
      parameters:
        - description: Id of attachment document
          name: documentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Document found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Document with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /publishedadvert/criteria:
    get:
      tags:
        - Published Advert API
      summary: Search criteria
      operationId: PublishedAdvertApi_getCriteria
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns the standard criteria and custom LOVs with a hierarchy.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: '{ publishedAdvertsCriteria{ categories{ label value } } }'
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourcingChannelGraphQlWrapperDto'
  /publishedadvert/multiPoster/updateStatus:
    put:
      tags:
        - Published Advert API
      summary: >-
        Allow Multi-posters to submit Client User selected end job boards and
        its up-to-date status update for a specific posting id
      operationId: PublishedAdvertApi_submitJobStatusUpdate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: job advert body to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostingStatusUpdateDTO'
        required: true
      responses:
        '204':
          description: PublishedAdvert status successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: PostingTarget with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /publishedadvert/preview:
    get:
      tags:
        - Published Advert API
      summary: Fetch advert by token
      operationId: PublishedAdvertApi_getAdvertByToken
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to preview adverts which have not been posted yet.

        It helps with building more advanced integrations by allowing users to
        see how their advert will look like after it is posted.

        When an advert is created in TalentLink for a requisition a token can be
        generated (either using Preview option in the TalentLink UI or in the
        method advertisement/generate-token which is part of the Advertisement
        API)
      parameters:
        - description: Token of advertisement draft
          name: token
          in: query
          required: true
          schema:
            type: string
        - description: "\tLanguage code - used for translation of labels and error messages If not provided then site master language is used"
          name: langCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvertisementDto'
  /publishedadvert/sorting-columns:
    get:
      tags:
        - Published Advert API
      summary: list of String column names.
      operationId: PublishedAdvertApi_getColumnNames
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns column names which can be used for sorting advertisements.
      responses:
        '200':
          description: Sorting columns found
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /publishedadvert/unpost:
    put:
      tags:
        - Published Advert API
      summary: Unpost one or more adverts
      operationId: PublishedAdvertApi_unpostAdverts
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This methoid allows to unpost published adverts. To unpost more than one
        advert please provide the list of IDs on input (separated by commas).
      requestBody:
        description: List of posting target Id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnpostAdvertDto'
        required: true
      responses:
        '204':
          description: PublishedAdvert unposted successfully
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: PostingTarget with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /publishedadvert/{publishedAdvertId}/updateJobDescriptionUrl:
    put:
      tags:
        - Published Advert API
      summary: Sets external job description url on published advert
      operationId: PublishedAdvertApi_setJobDescriptionUrl
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: published advert id to update job description url
          name: publishedAdvertId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: job description url to set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobDescriptionUrlDto'
        required: true
      responses:
        '204':
          description: PublishedAdvert successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: PostingTarget with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /queues:
    get:
      tags:
        - Queues API
      summary: 'Retrieve list of all queues available for the user '
      operationId: QueuesApi_getQueueList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to retireve all queues that are available for the
        user calling the method. Each record is displayed with the number of
        elements that are currently residing in the particular queue.
      responses:
        '200':
          description: List of queues with details fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuesDto'
        '204':
          description: NO queues are present
        '400':
          description: Queue not found
  /queues/application/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Application
      summary: Retrieves the oldest element from the Application queue
      operationId: QueuesApiApplication_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Provide the queue name to retrieve details of the Application.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: showCandidateData
          name: showCandidateData
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Application successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedApplicationDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Application found but is not accessible by queue owner
        '404':
          description: Application found in queue but not in database set
  /queues/application/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Application
      summary: Retrieves any element from the Application queue based on the elementID
      operationId: QueuesApiApplication_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Application details. It
        allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: showCandidateData
          name: showCandidateData
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Application successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedApplicationDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Application found but is not accessible by queue owner
        '404':
          description: Application found in queue but not in database set
  /queues/archived-candidate/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Archived Candidate
      summary: Retrieves the oldest element from the Archived Candidates queue
      operationId: QueuesApiArchivedCandidate_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Provide the queue name to retrieve details of the archived candidate.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Archived candidate successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedArchivedApplicationDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Archived candidate found but is not accessible by queue owner
        '404':
          description: Archived candidate found in queue but not in database set
  /queues/archived-candidate/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Archived Candidate
      summary: >-
        Retrieves any element from the Archived Candidates queue based on the
        elementID
      operationId: QueuesApiArchivedCandidate_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Archived Candidate
        details. It allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Archived candidate successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedArchivedApplicationDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Archived candidate found but is not accessible by queue owner
        '404':
          description: Archived candidate found in queue but not in database set
  /queues/candidate/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Candidates
      summary: Retrieve oldest element of the  Candidate queue.
      operationId: QueuesApiCandidates_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Provide the queue name to retrieve Candidate details
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Candidate successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedUserDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Candidate found but is not accessible by queue owner
        '404':
          description: Candidate found in queue but not in database set
  /queues/candidate/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Candidates
      summary: Retrieves any element from the Candidate queue based on the elementID
      operationId: QueuesApiCandidates_getElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Candidate details. It
        allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Candidate successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedContractDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Candidate found but is not accessible by queue owner
        '404':
          description: Candidate found in queue but not in database set
  /queues/contract/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Contract
      summary: Retrieves the oldest element from the Contract queue
      operationId: QueuesApiContract_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name to retrieve details of the contract from the
        queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedContractDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Contract found but is not accessible by queue owner
        '404':
          description: Contract found in queue but not in database set
  /queues/contract/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Contract
      summary: Retrieves any Contract element from the queue based on the elementID.
      operationId: QueuesApiContract_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Contract details. It
        allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Contract successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedContractDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Contract found but is not accessible by queue owner
        '404':
          description: Contract found in queue but not in database set
  /queues/element/oldest-element:
    delete:
      tags:
        - Queues API
      summary: Global method allowing to remove oldest element from any queue type.
      operationId: QueuesApi_removeOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to remove oldest elements from any type of queue. To
        remove the oldest element from the queue you need to provide the queue
        name.
      parameters:
        - description: queueName
          name: queueName
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Element successfully removed from queue
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '404':
          description: There are no elements in queue
  /queues/element/{idInQueue}:
    delete:
      tags:
        - Queues API
      summary: >-
        Global method allowing to remove any element from any queue type, out of
        sequence.
      operationId: QueuesApi_removeElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to remove any element from any type of queue out of
        sequence. To remove an element from the queue you need to provide the
        queue name and the elementID. 
      parameters:
        - description: queueName
          name: queueName
          in: query
          required: true
          schema:
            type: string
        - description: idInQueue
          name: idInQueue
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Element successfully removed from queue
        '400':
          description: Element's in queue id is invalid (blank or missing)
        '404':
          description: There is no such element in queue
  /queues/export:
    get:
      tags:
        - Queues API
      summary: Method to export the Queue settings into a file
      operationId: QueuesApi_exportQueueSettings
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to export Queue settings into a file. Such file can
        be used in the import method. If you wish to save a particular queue
        settings for the future or you are using individual queues for
        particular users you can use this option to speed up the queue creation
        process. This option is also available in TalentLink UI. 
      parameters:
        - description: queueName
          name: queueName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Queue successfully exported
        '400':
          description: Queue could not be exported
  /queues/externalsystemrequest/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - External System Request
      summary: Retrieves the oldest element from the External Systems Request queue
      operationId: QueuesApiExternalSystemRequest_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to fetch the oldest element of the External
        Assessment Providers requests.</p><p>When a specific Selection step
        (which is of type - External System) is assigned in TalentLink then
        candidate details & correlation ID are sent to the queue.Those
        parameters are then used by Assessment Provider API to provide
        Assessment URL (and then results and reports).</p><p>To retrieve details
        of the External System Request from the queue, provide the Queue
        name.</p>
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: langCode
          name: langCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
        - description: showBaseValue
          name: showBaseValue
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: External System Request successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedExternalSystemRequestDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: External System Request found but is not accessible by queue owner
        '404':
          description: External System Request found in queue but not in database set
  /queues/externalsystemrequest/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - External System Request
      summary: >-
        Retrieves any External System Request element from the queue based on
        the elementID
      operationId: QueuesApiExternalSystemRequest_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to fetch any element of External Assessment
        Providers requests. When a specific Selection step (which is of type -
        External System) is assigned in TalentLink then candidate details &
        correlation ID are sent to the queue.  Those parameters are then used by
        Assessment Provider API to provide Assessment URL (and then results and
        reports).</p><p>Provide the Queue name &  elementID to retrieve contract
        details. It allows to fetch any element from the queue.</p>
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: langCode
          name: langCode
          in: query
          required: false
          schema:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
        - description: showBaseValue
          name: showBaseValue
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: External System Request successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedExternalSystemRequestDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: External System Request found but is not accessible by queue owner
        '404':
          description: External System Request found in queue but not in database set
  /queues/import:
    post:
      tags:
        - Queues API
      summary: Allows to import Queue settings from the file
      operationId: QueuesApi_importQueueSettings
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to import Queue settings from previously exported
        file. Export can be done from API or from TalentLink UI.
      responses:
        '200':
          description: Queue successfully imported
        '400':
          description: Queue could not be imported
  /queues/position/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Position (Requisitions)
      summary: Retrieves the oldest element from the Position queue
      operationId: QueuesApiPositionRequisitions_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name to retrieve details of the requisition from the
        queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Position successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedPositionDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Position found but is not accessible by queue owner
        '404':
          description: Position found in queue but not in database set
  /queues/position/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Position (Requisitions)
      summary: >-
        Retrieves any element from the Position / Requisition queue based on the
        elementID
      operationId: QueuesApiPositionRequisitions_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Position / Requisition
        details. It allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Position successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedPositionDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Position found but is not accessible by queue owner
        '404':
          description: Position found in queue but not in database set
  /queues/posting-target/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Posting (Adverts)
      summary: Retrieves the oldest element from the Advert queue
      operationId: QueuesApiPostingAdverts_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name to retrieve details of the Adverts from the
        queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Posting target successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedPostingTargetDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Posting target found but is not accessible by queue owner
        '404':
          description: Posting target found in queue but not in database set
  /queues/posting-target/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Posting (Adverts)
      summary: Retrieves any element from the Advert based on the elementID
      operationId: QueuesApiPostingAdverts_getElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Advert details. It allows
        to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Posting target successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedPostingTargetDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Posting target found but is not accessible by queue owner
        '404':
          description: Posting target found in queue but not in database set
  /queues/selectionstep/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Selection Step
      summary: Retrieves the oldest element from the Selection Step queue
      operationId: QueuesApiSelectionStep_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name to retrieve details of the selection step from
        the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Selection step successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedSelectionStepDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Selection step found but is not accessible by queue owner
        '404':
          description: Selection step found in queue but not in database set
  /queues/selectionstep/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Selection Step
      summary: >-
        Retrieves any element from the Selection Step queue based on the
        elementID
      operationId: QueuesApiSelectionStep_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Selection Step details.
        It allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Selection step successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedSelectionStepDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Selection step found but is not accessible by queue owner
        '404':
          description: Selection step found in queue but not in database set
  /queues/timesheet/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Timesheets
      summary: Retrieves the oldest element from the Timesheets queue
      operationId: QueuesApiTimesheets_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name to retrieve details of candidates' Timesheet from
        the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Timesheet successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedTimesheetDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Timesheet found but is not accessible by queue owner
        '404':
          description: Timesheet step found in queue but not in database set
  /queues/timesheet/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Timesheets
      summary: Retrieves any element from the Timesheet queue based on the elementID
      operationId: QueuesApiTimesheets_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve Timesheet details. It
        allows to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Timesheet successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedTimesheetDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: Timesheet found but is not accessible by queue owner
        '404':
          description: Timesheet found in queue but not in database set
  /queues/user/{queueName}/oldest-element:
    get:
      tags:
        - Queues API - Users
      summary: Retrieves the oldest element from the Users queue
      operationId: QueuesApiUsers_getOldestElement
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Provide the queue name to retrieve details of the User from the queue
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedUserDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: User found but is not accessible by queue owner
        '404':
          description: User found in queue but not in database set
  /queues/user/{queueName}/{elementId}:
    get:
      tags:
        - Queues API - Users
      summary: retrieves any element from the Users queue based on the elementID
      operationId: QueuesApiUsers_getElementById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide the queue name & elementID to retrieve User details. It allows
        to fetch any element from the queue.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
        - description: elementId
          name: elementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User successfully fetched from queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedUserDto'
        '204':
          description: Queue is empty
        '400':
          description: Queue not found or queue name is invalid (blank or missing)
        '403':
          description: User found but is not accessible by queue owner
        '404':
          description: User found in queue but not in database set
  /queues/{queueName}:
    delete:
      tags:
        - Queues API
      summary: Allows to delete any queue which is available for the user
      operationId: QueuesApi_deleteQueue
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to delete queues. If the user calling the method have
        acess to a queue and has enough rights to manage queues, all that is
        needed to delete is to provide a Queue name.
      parameters:
        - description: queueName
          name: queueName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Queue successfully removed
        '400':
          description: Queue could not been removed
        '404':
          description: Queue not found
        '409':
          description: >-
            Queue could not been removed because is used in the Selection
            Process configuration
  /role:
    get:
      tags:
        - Role API
      summary: List of roles
      operationId: RoleApi_listRoles
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of roles. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { roles(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleGraphQlWrapperDto'
  /role/{roleId}/tags:
    put:
      tags:
        - Role API
      summary: Add tags to a role
      operationId: RoleApi_addRoleTags
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Role id to be updated.
          name: roleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of tags to be added to a given role.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleTagsDto'
        required: true
      responses:
        '204':
          description: tags successfully added
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Role with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - Role API
      summary: Remove tags from a role
      operationId: RoleApi_removeTags
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Role id to be updated.
          name: roleId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of tags to be removed from a given role.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleTagsDto'
        required: true
      responses:
        '204':
          description: tags successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Role with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /searchagent:
    get:
      tags:
        - Search Agent API
      summary: List of Search Agent
      operationId: SearchAgentApi_getList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Returns a list of Search Agent. DTO structure depends on a GraphQL
        query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { searchAgents(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAgentGraphQlWrapperDto'
    post:
      tags:
        - Search Agent API
      summary: Creates Search Agent
      operationId: SearchAgentApi_createAgent
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: search agent to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAgentDto'
        required: true
      responses:
        '201':
          description: Search agent successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to create a search agent
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /searchagent/{token}:
    put:
      tags:
        - Search Agent API
      summary: Updates an existing search agent
      operationId: SearchAgentApi_updateAgent
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: search agent id to be updated
          name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: search agent to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAgentDto'
        required: true
      responses:
        '201':
          description: Search agent successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Search agent with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - Search Agent API
      summary: Delete search agent
      operationId: SearchAgentApi_removeById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Search agent id to be deleted.
          name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: search agent successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Search agent with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /selection-process/application/{applicationId}/completePrescreening:
    put:
      tags:
        - Selection Process API
      summary: Completes prescreening step
      operationId: SelectionProcessApi_completePrescreening
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Prescreening step is mandatory in every selection process. Regardless of
        the configuration of other steps, to create the contract in Contract API
        the prescreening step must be closed first.
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Prescreening step successfully processed
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: Application doesn't exist
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /selection-process/proceed:
    put:
      tags:
        - Selection Process API
      summary: Proceed candidate
      operationId: SelectionProcessApi_proceedCandidate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProceedCandidateRequestDto'
        required: true
      responses:
        '200':
          description: Successful request
        '400':
          description: Invalid parameters provided
  /selection-process/reject:
    post:
      tags:
        - Selection Process API
      summary: Reject candidate
      operationId: SelectionProcessApi_rejectCandidate
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectCandidateRequestDto'
        required: true
      responses:
        default:
          description: successful operation
  /selection-process/rejection-reasons:
    get:
      tags:
        - Selection Process API
      summary: Allows to fetch the list of 'Reason of rejection' values
      operationId: SelectionProcessApi_getRejectionReasons
      security:
        - username: []
        - password: []
        - apiKey: []
      description: >-
        When rejecting a candidate it is required to provide the value in the
        field 'Reason of rejection', which is a configurable field (LOV). This
        method allows to fetch all values of this field.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCommentResponseDto'
        '400':
          description: Invalid parameters provided
  /selection-process/selection-tasks:
    get:
      tags:
        - Selection Process API
      summary: >-
        Retrieve list & details of selection steps for a given candidate or
        application
      operationId: SelectionProcessApi_getSelectionTasks
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Use application_id_eq filter (provide the application ID) to fetch the
        list of selection steps for the specific application.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { selectionTasks(first: 10, after: 0, sortBy: id, orderBy: ASC,
              where: {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionTaskGraphQlWrapperDto'
  /selection-process/step/{stepId}/document:
    post:
      tags:
        - Selection Process API
      summary: Upload attachment to a step in the selection process
      operationId: SelectionProcessApi_uploadAttachmentToStep
      description: ''
      parameters:
        - description: step id
          name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful request
        '400':
          description: Invalid parameters provided
  /selection-process/step/{stepId}/documents:
    get:
      tags:
        - Selection Process API
      summary: Retrieve all documents attached to step in selection process
      operationId: SelectionProcessApi_getStepDocuments
      description: ''
      parameters:
        - description: step id
          name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful request
        '400':
          description: Invalid parameters provided
  /selection-process/step/{stepId}/status:
    put:
      tags:
        - Selection Process API
      summary: Update the status of a step in selection process
      operationId: SelectionProcessApi_updateStepStatus
      description: >-
        Available Selection Step statuses:


        **InterviewToSchedule** - is used when there is a need to schedule the
        meeting

        **Closed** - is used to close a step

        **OnHold** - is used when step is waiting for further processing

        **Cancel** - is used to cancel an interview
      parameters:
        - description: step id
          name: stepId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionStepStatusUpdateDto'
        required: true
      responses:
        '200':
          description: Successful request
        '400':
          description: Invalid parameters provided
  /timesheet:
    get:
      tags:
        - Timesheet API
      summary: List of timesheet
      operationId: TimesheetApi_getList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Use filters to retrieve the specific Timesheet or list of timesheets for
        a given application ID, date range etc.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { timeSheets(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSheetGraphQlWrapperDto'
  /timesheet/adjustment-reasons:
    get:
      tags:
        - Timesheet API
      summary: >-
        Retrieve the list of "Reasons for adjustment" (required when rejecting
        the Timesheet)
      operationId: TimesheetApi_getAdjustmentReasonsList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of available adjustment reasons
      responses:
        '200':
          description: List returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentReasonsResponseDto'
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /timesheet/{timesheetId}/approve:
    post:
      tags:
        - Timesheet API
      summary: Allows to approve a specific Timesheet
      operationId: TimesheetApi_approveTimesheet
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of timesheet
          name: timesheetId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Timesheet entities
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetApproveRequestDto'
      responses:
        '200':
          description: Timesheet approved
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /timesheet/{timesheetId}/reject:
    post:
      tags:
        - Timesheet API
      summary: Allows to reject a specific Timesheet
      operationId: TimesheetApi_rejectTimesheet
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        To reject the Timesheet you need to provide ID but also Reason for
        Adjustment  which is mandatory. Use GET/timesheet/adjustment-reasons
        method to retrieve the list of available values.
      parameters:
        - description: Id of timesheet
          name: timesheetId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Timesheet entities
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetRejectRequestDto'
      responses:
        '200':
          description: Timesheet rejected
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /timesheet/{timesheetId}/submit:
    post:
      tags:
        - Timesheet API
      summary: Allows to submit a Timesheet for the candidate
      operationId: TimesheetApi_submitTimesheet
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of timesheet
          name: timesheetId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Timesheet entities
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetSubmitRequestDto'
        required: true
      responses:
        '200':
          description: Timesheet submitted
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user:
    get:
      tags:
        - User API
      summary: List of users
      operationId: UserApi_getUserList
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: Returns a list of users. DTO structure depends on a GraphQL query.
      parameters:
        - description: >-
            This is a GraphQL query parameter. You can find more about GraphlQL
            [here](https://graphql.org/learn/ "Go to the GraphQL official
            documentation").
          name: query
          in: query
          required: true
          schema:
            type: string
            default: >-
              { users(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
              {id_gt: 0}) { id } }
        - description: Enables streaming mode
          name: stream
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGraphQlWrapperDto'
    post:
      tags:
        - User API
      summary: Creates User
      operationId: UserApi_createUser
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      requestBody:
        description: user data to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
        required: true
      responses:
        '201':
          description: User successfully created
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to user preferences
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}:
    delete:
      tags:
        - User API
      summary: Delete user
      operationId: UserApi_removeById
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: user with a given id to be deleted
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    patch:
      tags:
        - User API
      summary: Update basic user data
      operationId: UserApi_updateBasicData
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: user data to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDto'
        required: true
      responses:
        '204':
          description: User data successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right to perform this operation
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right to user preferences
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/activate:
    put:
      tags:
        - User API
      summary: Activates user
      operationId: UserApi_activateUser
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: user with a given id to be activated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: user new password and activation type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateUserDto'
      responses:
        '204':
          description: User successfully activated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/assignDashboard:
    post:
      tags:
        - User API
      summary: Assign dashboards to user
      operationId: UserApi_assignDashboardToUser
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        This method allows to assign dashboards to user in Talentlink. Example
        of correct request: 

        "recruiterDashboards":{"recruiter_dashboard_id_1":true,"recruiter_dashboard_id_2":false},
        "hiringManagerDashboard":false,"genericDashboard":true} 

        ,where recruiter_dashboard_id_1 and recruiter_dashboard_id_2 are valid
        recruiter dashboards id. 

        Remember, if you remove all dashboard assignments, then system
        automatically assign to user Generic Dashboard
      parameters:
        - description: Id of a user
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Map of dashboards to be assigned to users
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardAssignmentRequestDto'
        required: true
      responses:
        '200':
          description: Dashboard assigned successfully
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/assignNamedAccessRoles:
    put:
      tags:
        - User API
      summary: Named Access Roles configuration
      operationId: UserApi_assignNamedAccessRoles
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Named roles to be assigned to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamedAccessRolesDto'
        required: true
      responses:
        '204':
          description: Access roles successfully assigned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/availableDashboards:
    get:
      tags:
        - User API
      summary: List of available dashboards for given userId
      operationId: UserApi_listAvailableDashboards
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >
        This method return all available Recruiters Dashboards for given user.
        This list do not contain Generic Dashboard and Hiring Manager Dashboard.

        Provide valid user id to get list of dashboards. If you try obtain list
        of dashboards for unknown user you will receive 400 HTTP status.
      parameters:
        - description: Id of a user
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of available dashboards successfully returned
        '400':
          description: User not exist for given user Id
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/availableThemes:
    get:
      tags:
        - User API
      summary: List of available themes for given userId
      operationId: UserApi_getUserAvailableThemes
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >
        This method return all available themes for given user. There are
        returned themes that the given user has access to.

        Provide valid user ID to get list of themes. If you try obtain list of
        themes for unknown user you will receive 400 HTTP status.

        Optionally there can be added department ID/IDs as a filter.
      parameters:
        - description: Id of a user
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Optional filter - department ID/IDs
          name: departmentId
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: List of available themes for given userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserThemesDto'
        '400':
          description: Given userId is not correct
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/changePassword:
    put:
      tags:
        - User API
      summary: Change user password
      operationId: UserApi_updatePassword
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Change user password with a given id
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: New password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordDto'
        required: true
      responses:
        '204':
          description: User password successfully changed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/copyRolesFromAnotherProfile:
    put:
      tags:
        - User API
      summary: Copy user roles to target user
      operationId: UserApi_copyRolesToTargetUser
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of target user. This user will have roles copied from source user
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Id of source user. Roles of this user to be copied to target user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUserIdDto'
        required: true
      responses:
        '204':
          description: User profile successfully copied to target user
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/deactivate:
    put:
      tags:
        - User API
      summary: Deactivates user
      operationId: UserApi_deactivateUser
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: user with a given id to be deactivated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deactivated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/documentSecurity:
    put:
      tags:
        - User API
      summary: Document Security configuration
      operationId: UserApi_configureDocumentSecurity
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Document Security to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSecurityConfigDto'
        required: true
      responses:
        '204':
          description: Document security successfully added
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - User API
      summary: Document Security removal
      operationId: UserApi_removeDocumentSecurity
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ID of Document Security Group to be removed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSecurityGroupIdDto'
        required: true
      responses:
        '204':
          description: Document security successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '403':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/eventNotification:
    put:
      tags:
        - User API
      summary: Event notification configuration
      operationId: UserApi_configureEventNotification
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Event notification configuration to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicEventNotificationConfigurationDto'
        required: true
      responses:
        '204':
          description: Event notification configuration successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/mailGateway:
    put:
      tags:
        - User API
      summary: Mail Gateway configuration
      operationId: UserApi_configureMailGateway
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Mail Gateway Configuration to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicMailGatewayConfigurationDto'
        required: true
      responses:
        '204':
          description: Mail Gateway successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/roles:
    put:
      tags:
        - User API
      summary: Roles
      operationId: UserApi_updateUserRoles
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide roleId or roleTag. Providing roleId, system will add role
        assignment to user (tag is omitted). Providing tag type and tag name,
        system will add all roles marked with that tag to a given user.
      parameters:
        - description: Assign role to user with a given id
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of roles and departments to be assigned
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentsDto'
        required: true
      responses:
        '204':
          description: User role successfully assigned
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
    delete:
      tags:
        - User API
      summary: Remove roles
      operationId: UserApi_removeRoles
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        Provide roleId or roleTag. Providing roleId, system will remove role
        assignment from user (tag is omitted). Providing tag type and tag name,
        system will remove all roles marked with that tag from a given user.
      parameters:
        - description: Id of User to be modified
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: >-
          List of roles and departments to be removed. Departments may be null
          when role is of type Account or role should be removed from each
          assigned departments
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentsDto'
        required: true
      responses:
        '204':
          description: User roles successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/roles/bulk:
    delete:
      tags:
        - User API
      summary: This method allows to remove all or groups of roles from the user
      operationId: UserApi_removeUserRolesBulk
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: >-
        <p>This method allows to delete multiple roles based on the input
        parameters. Please note that in Talentlink there are two types of
        roles:</p><ul><li>account roles (they work globally in all
        departments)</li><li>department roles (they work in the context of a
        specific department only)</li></ul><p>Additionally roles can be grouped
        with tags. So you can assign certain tags to roles which in turn allows
        to assign such groups of roles to the user or delete them likewise.</p>
      parameters:
        - description: Id of User to be modified
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of roles to be removed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDeletionDto'
        required: true
      responses:
        '204':
          description: User roles successfully removed
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
  /user/{userId}/userData:
    put:
      tags:
        - User API
      summary: User Data configuration
      operationId: UserApi_updateUserData
      security:
        - username: []
        - password: []
        - apiKey: []
        - access-token: []
      description: ''
      parameters:
        - description: Id of a user to be updated
          name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User Data to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDataDto'
        required: true
      responses:
        '204':
          description: User Data successfully updated
        '400':
          description: Invalid parameters provided
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '401':
          description: User does not have the right
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
        '404':
          description: User with a given id does not exists
          headers:
            X-Request-Error:
              description: The detailed error message description
              schema:
                type: string
components:
  requestBodies:
    CandidatePoolCreationDto:
      description: candidate pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidatePoolCreationDto'
      required: true
    CandidateListDto:
      description: Candidate list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateListDto'
      required: true
    BasicContractDto:
      description: contract
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicContractDto'
      required: true
    BasicDepartmentDto:
      description: departments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicDepartmentDto'
      required: true
    InterviewLocationBasicDto:
      description: locationDto
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InterviewLocationBasicDto'
      required: true
    UpdateLovPropertiesDto:
      description: Update LOV properties
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateLovPropertiesDto'
  securitySchemes:
    access-token:
      type: apiKey
      name: access-token
      in: header
    apiKey:
      type: apiKey
      name: api_key
      in: query
    password:
      type: apiKey
      name: password
      in: header
    username:
      type: apiKey
      name: username
      in: header
  schemas:
    AccountDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    AccountRoleDto:
      type: object
      required:
        - includeAll
      properties:
        includeAll:
          type: boolean
          default: false
        roleIds:
          type: array
          items:
            type: integer
            format: int64
        roleTags:
          type: array
          items:
            $ref: '#/components/schemas/RoleTagDto'
    ActionDto:
      type: object
      properties:
        href:
          type: string
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
    ActivateUserDto:
      type: object
      properties:
        password:
          type: string
        activationType:
          type: string
          enum:
            - SENDACTIVATIONREQUESTTOEMAIL
            - ACTIVATEUSERLATER
            - ACTIVATEUSERNOWANDSENDEMAILNOTIFICATION
            - ACTIVATEUSERNOWWITHOUTSENDINGEMAILNOTIFICATION
            - ACTIVATEUSERNOWANDSENDONBOARDINGEMAILNOTIFICATION
    Activators:
      type: object
      properties:
        unlockers:
          type: array
          xml:
            name: criterion
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LovHierarchedCriterion'
    AddressDto:
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        zip:
          type: string
        regionName:
          type: string
        homePhone:
          type: string
        workPhone:
          type: string
        mobilePhone:
          type: string
        fax:
          type: string
        alternateEmail:
          type: string
        personalWebSite:
          type: string
        preferredComChannel:
          type: string
        countryName:
          type: string
    AdjustmentReasonDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
    AdjustmentReasonsResponseDto:
      type: object
      properties:
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/AdjustmentReasonDto'
    AdvertActionsDto:
      type: object
      properties:
        updateJobDescriptionUrl:
          $ref: '#/components/schemas/ActionDto'
    AdvertCustomFieldDto:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
        unlocalizedLabel:
          type: string
        order:
          type: integer
          format: int32
    AdvertisementDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        siteLanguage:
          type: string
        postingTargetStatus:
          type: string
        jobNumber:
          type: string
        jobTitle:
          type: string
        comment:
          type: string
        recruitingCompany:
          type: string
        status:
          type: string
        duration:
          type: string
        postingStartDate:
          type: integer
          format: int64
        postingEndDate:
          type: integer
          format: int64
        postingUpdateDate:
          type: integer
          format: int64
        dueDate:
          type: integer
          format: int64
        location:
          type: string
        showCompensation:
          type: boolean
          default: false
        showRecruiter:
          type: boolean
          default: false
        compensationMinValue:
          type: number
          format: double
        compensationMaxValue:
          type: number
          format: double
        keyword:
          type: string
        language:
          type: string
        expectedStartDate:
          type: integer
          format: int64
        expectedEndDate:
          type: integer
          format: int64
        categoryLists:
          type: array
          xml:
            name: categoryList
            wrapped: true
          items:
            $ref: '#/components/schemas/CategoryListCriterion'
        organizations:
          type: array
          xml:
            name: organization
            wrapped: true
          items:
            $ref: '#/components/schemas/OrganizationCriterion'
        recruiters:
          type: array
          xml:
            name: recruiter
            wrapped: true
          items:
            $ref: '#/components/schemas/SimpleUserDto'
        operationals:
          type: array
          xml:
            name: operational
            wrapped: true
          items:
            $ref: '#/components/schemas/SimpleUserDto'
        customFields:
          type: array
          xml:
            name: customField
            wrapped: true
          items:
            $ref: '#/components/schemas/CustomField'
        customLovs:
          type: array
          xml:
            name: customLov
            wrapped: true
          items:
            $ref: '#/components/schemas/LovCriterion'
        configurableFields:
          type: array
          xml:
            name: configurableField
            wrapped: true
          items:
            $ref: '#/components/schemas/LovCriterion'
        standardLovs:
          type: array
          xml:
            name: standardLov
            wrapped: true
          items:
            $ref: '#/components/schemas/LovCriterion'
        applicationUrl:
          type: string
        strapline:
          type: string
        assignedImages:
          type: array
          xml:
            name: assignedImage
            wrapped: true
          items:
            $ref: '#/components/schemas/AssignedImageDto'
        requisitionInternalJobNumber:
          type: string
        jobLocations:
          type: array
          xml:
            name: jobLocation
            wrapped: true
          items:
            $ref: '#/components/schemas/JobLocationDto'
        sponsoredJobContext:
          $ref: '#/components/schemas/SponsoredJobContextDto'
        jobUpdateDate:
          type: integer
          format: int64
        postingUserEmail:
          type: string
        descriptionUrl:
          type: string
        indeedConfiguration:
          $ref: '#/components/schemas/IndeedConfigurationDto'
        contractCompensationPeriod:
          type: string
        contractDuration:
          type: integer
          format: int32
        standardRate:
          $ref: '#/components/schemas/StandardRateDto'
        structuredData:
          type: string
        generalApplication:
          type: boolean
          default: false
        externalJobNumber:
          type: string
      xml:
        name: advertisements
    AnswerDto:
      type: object
      properties:
        values:
          type: array
          xml:
            name: value
            wrapped: true
          items:
            type: string
        availableAnswers:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/AnswerDto'
        multipleAnswer:
          type: array
          items:
            $ref: '#/components/schemas/AnswerDto'
        dataType:
          type: string
        id:
          type: integer
          format: int64
        answerTypeFormat:
          type: string
        fatherid:
          type: integer
          format: int64
      xml:
        name: answer
    AnswerValidationDto:
      type: object
      properties:
        answerType:
          type: string
        required:
          type: boolean
          default: false
        otherAvailable:
          type: boolean
          default: false
        atLeast:
          type: integer
          format: int32
        atMost:
          type: integer
          format: int32
        maximumLength:
          type: integer
          format: int32
        minimumLength:
          type: integer
          format: int32
        maximumValue:
          type: number
          format: double
        minimumValue:
          type: number
          format: double
        earlierThanDate:
          type: string
        laterThanDate:
          type: string
        dateFormat:
          type: string
    AnswerValidationExtendedDto:
      type: object
      properties:
        answerType:
          type: string
        required:
          type: boolean
          default: false
        otherAvailable:
          type: boolean
          default: false
        atLeast:
          type: integer
          format: int32
        atMost:
          type: integer
          format: int32
        maximumLength:
          type: integer
          format: int32
        minimumLength:
          type: integer
          format: int32
        maximumValue:
          type: number
          format: double
        minimumValue:
          type: number
          format: double
        earlierThanDate:
          type: string
        laterThanDate:
          type: string
        dateFormat:
          type: string
        dateGapsRestricted:
          type: boolean
          default: false
        maximumDateGaps:
          type: integer
          format: int32
        maximumDateGapsUnit:
          type: string
        minWorkHistoryRequired:
          type: boolean
          default: false
        minWorkHistory:
          type: integer
          format: int32
        minWorkHistoryUnit:
          type: string
        defaultCountryCode:
          type: string
        laterThanUnit:
          type: string
        laterThanValue:
          type: integer
          format: int32
        earlierThanUnit:
          type: string
        earlierThanValue:
          type: integer
          format: int32
    AnsweredDto:
      type: object
      properties:
        questionsAnswered:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnsweredDto'
    AppSelectionTaskBasicDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ApplicationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sourceChannelName:
          type: string
        sourceChannelType:
          type: string
        sourcingMedium:
          type: string
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        applicationDate:
          type: integer
          format: int64
        opening:
          $ref: '#/components/schemas/OpeningDto'
        status:
          type: string
        score:
          type: array
          items:
            $ref: '#/components/schemas/FullApplicationScoreDto'
        candidate:
          $ref: '#/components/schemas/CandidateDto'
    ApplicationFollowupDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        applicationStatus:
          type: string
        updateDate:
          type: integer
          format: int64
    ApplicationGlobalActionsDto:
      type: object
      properties:
        updateApplicationStatus:
          $ref: '#/components/schemas/ActionDto'
    ApplicationGraphQlContent:
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/FullApplicationDto'
        actions:
          $ref: '#/components/schemas/ApplicationGlobalActionsDto'
    ApplicationGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ApplicationGraphQlContent'
    ApplicationStatusDto:
      type: object
      required:
        - applicationId
        - targetStatus
      properties:
        applicationId:
          type: integer
          format: int64
        targetStatus:
          type: string
        reasonOfChange:
          type: string
        reasonOfCompletion:
          type: string
        memo:
          type: string
        sendCancellationToCandidate:
          type: boolean
          default: false
        offerAccepted:
          type: boolean
          default: false
    ApplicationStatusReportDto:
      type: object
      properties:
        applicationId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
        message:
          type: string
    ApplicationsStatusDto:
      type: object
      required:
        - newStatuses
      properties:
        newStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationStatusDto'
    ApplicationsStatusReportDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationStatusReportDto'
    ApprovalConfigBasicDto:
      type: object
      properties:
        costCenterApprovalConfig:
          $ref: '#/components/schemas/CostCenterApprovalConfigBasicDto'
        timesheetWithoutCostCenterApprovalConfig:
          $ref: >-
            #/components/schemas/TimesheetWithoutCostCenterApprovalConfigBasicDto
    ApprovalConfigDto:
      type: object
      properties:
        costCenterApprovalConfig:
          $ref: '#/components/schemas/CostCenterApprovalConfigDto'
        timesheetWithoutCostCenterApprovalConfig:
          $ref: '#/components/schemas/TimesheetWithoutCostCenterApprovalConfigDto'
    ApprovalDto:
      type: object
      properties:
        approver:
          $ref: '#/components/schemas/IdDto'
        approval:
          type: string
          enum:
            - APPROVED
            - REJECTED
            - WAITING
            - ERROR
            - ARCHIVED
        start:
          type: integer
          format: int64
        actionDate:
          type: integer
          format: int64
        rejectionComment:
          type: string
        approvalComment:
          type: string
    ApprovalProcessFullDto:
      type: object
      properties:
        dueDate:
          type: integer
          format: int64
        approvalMethod:
          type: string
          enum:
            - collaborative
            - sequential
            - manually
        minApprovers:
          type: integer
          format: int32
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/ApproverDto'
        history:
          $ref: '#/components/schemas/ApprovalProcessHistoryDto'
        communicationToApprover:
          $ref: '#/components/schemas/CommunicationToApproverFullDto'
    ApprovalProcessHistoryDto:
      type: object
      properties:
        minNumOfApprovals:
          type: integer
          format: int32
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalDto'
    ApprovalSignatureDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        lastUpdate:
          type: integer
          format: int64
        overdue:
          type: boolean
          default: false
        status:
          type: string
        sigOrder:
          type: integer
          format: int32
        step:
          $ref: '#/components/schemas/ApprovalStepDto'
        user:
          $ref: '#/components/schemas/UserDto'
    ApprovalStepDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        stepOrder:
          type: integer
          format: int32
        opening:
          $ref: '#/components/schemas/OpeningDto'
        signatures:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApprovalSignatureDto'
    ApproverBasicDto:
      type: object
      required:
        - order
        - user
      properties:
        order:
          type: integer
          format: int32
        lovValue:
          type: string
        user:
          $ref: '#/components/schemas/IdDto'
        stepOrder:
          type: integer
          format: int32
        userId:
          type: integer
          format: int64
    ApproverDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        email:
          type: string
    ApproverFullDto:
      type: object
      required:
        - order
      properties:
        order:
          type: integer
          format: int32
        lovValue:
          type: string
        user:
          $ref: '#/components/schemas/UserDto'
        stepOrder:
          type: integer
          format: int32
    ArchivingSummariesDto:
      type: object
      properties:
        archivingSummaries:
          type: array
          items:
            $ref: '#/components/schemas/ArchivingSummaryDto'
    ArchivingSummaryDto:
      type: object
      properties:
        candidateId:
          type: integer
          format: int64
        type:
          type: string
        status:
          type: string
        dataPrivacy:
          type: string
        activeApplication:
          type: boolean
          default: false
        timesheet:
          type: boolean
          default: false
        ofccpActive:
          type: boolean
          default: false
        eligible:
          type: boolean
          default: false
    AssessmentTestDto:
      type: object
      properties:
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/TestParameterDto'
        id:
          type: integer
          format: int64
        name:
          type: string
        externalTestId:
          type: string
        parametersData:
          type: string
        screeningParameters:
          type: array
          items:
            $ref: '#/components/schemas/TestParameterDto'
        externalSystem:
          $ref: '#/components/schemas/ExternalSystemDto'
        testGroup:
          $ref: '#/components/schemas/AssessmentTestGroupDto'
        parametersForm:
          $ref: '#/components/schemas/FormDto'
        selectionTaskModels:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SelectionTaskFullDto'
        backgroundChecks:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BackgroundCheckDto'
    AssessmentTestGroupDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        externalSystem:
          $ref: '#/components/schemas/ExternalSystemDto'
        father:
          $ref: '#/components/schemas/AssessmentTestGroupDto'
        assessmentTests:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssessmentTestDto'
    AssignedImageDto:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        altText:
          type: string
        position:
          type: string
          enum:
            - Header1
            - Header2
            - TopOfJobDescription
            - Bottom
            - Logo
      xml:
        name: assignedImage
    AssignedOptionDto:
      type: object
      properties:
        assignedOptionId:
          type: integer
          format: int64
        dependingQuestionIds:
          type: array
          items:
            type: integer
            format: int64
        optionId:
          type: integer
          format: int64
        order:
          type: integer
          format: int64
        optionScore:
          type: integer
          format: int64
        hasScore:
          type: boolean
          default: false
        isDefault:
          type: boolean
          default: false
        unlocalValue:
          type: string
        localizedLabel:
          type: string
    AssignedQuestionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        order:
          type: integer
          format: int64
        type:
          type: string
        localizedLabel:
          type: string
        questionId:
          type: integer
          format: int64
        index:
          type: integer
          format: int32
        required:
          type: boolean
          default: false
        localizedLabels:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedValueDto'
        answer:
          $ref: '#/components/schemas/AnswerDto'
        children:
          type: array
          items:
            $ref: '#/components/schemas/AssignedQuestionDto'
        matrixCells:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/AssignedQuestionDto'
        simple:
          type: boolean
          default: false
    AttachedFileDto:
      type: object
      required:
        - data
        - docLanguage
        - fileName
      properties:
        description:
          type: string
        fileName:
          description: file name
          type: string
        docLanguage:
          description: language of the file
          type: string
        publishable:
          type: boolean
          default: false
        data:
          description: file content encoded in base64
          type: string
    AttachmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        externalId:
          type: integer
          format: int64
    AttachmentFullDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        externalId:
          type: integer
          format: int64
        name:
          type: string
        fileLabel:
          type: string
        language:
          type: string
        base64EncodedContent:
          type: string
    AttachmentsDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        mimeType:
          type: string
        fileName:
          type: string
        fileUrl:
          $ref: '#/components/schemas/ActionDto'
        author:
          type: string
        creationDate:
          type: integer
          format: int64
        documentGroup:
          type: string
        type:
          type: string
    AuditDataEmbeddableDto:
      type: object
      properties:
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
    AuthorizedRecruitmentDto:
      type: object
      properties:
        externalCandidate:
          type: boolean
          default: false
        employee:
          type: boolean
          default: false
    AvailableApplicationStatusDto:
      type: object
      properties:
        translation:
          type: string
        lovValue:
          type: string
    AvailableApplicationStatusesDto:
      type: object
      properties:
        listOfStatuses:
          type: array
          items:
            $ref: '#/components/schemas/AvailableApplicationStatusDto'
    BackgroundCheckDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        appSelectionTask:
          $ref: '#/components/schemas/SelectionTaskFullDto'
        userCreated:
          $ref: '#/components/schemas/UserDto'
        userUpdated:
          $ref: '#/components/schemas/UserDto'
        createDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        assessTest:
          $ref: '#/components/schemas/AssessmentTestDto'
        orderStatus:
          type: string
        resultStatus:
          type: string
        externalId:
          type: string
        recruiterUrl:
          type: string
        recruiterRedirectUrl:
          type: string
        screenings:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningDto'
        backgroundCheckStatusHistory:
          type: array
          items:
            $ref: '#/components/schemas/BackgroundCheckStatusHistoryDto'
    BackgroundCheckStatusHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bgCheck:
          $ref: '#/components/schemas/BackgroundCheckDto'
        statusMessage:
          type: string
        statusCreateDate:
          type: integer
          format: int64
        userCreate:
          $ref: '#/components/schemas/UserDto'
        orderStatus:
          type: string
        resultStatus:
          type: string
    BasicApprovalProcessDto:
      type: object
      properties:
        dueDate:
          type: integer
          format: int64
        approvalMethod:
          type: string
          enum:
            - collaborative
            - sequential
            - manually
        minApprovers:
          type: integer
          format: int32
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/BasicApproverDto'
        communicationToApprover:
          $ref: '#/components/schemas/CommunicationToApproverDto'
        useAlwaysRecommendation:
          type: boolean
          default: false
    BasicApproverDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    BasicCampaignTypeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    BasicCandidateConsentDto:
      type: object
      required:
        - consentId
        - status
      properties:
        consentId:
          $ref: '#/components/schemas/IdDto'
        consentType:
          type: string
        status:
          type: string
        comment:
          type: string
    BasicCandidateDto:
      type: object
      required:
        - firstname
        - lastname
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/BasicCandidateTagDto'
        type:
          type: string
        contractor:
          type: boolean
          default: false
        initialType:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        middlename:
          type: string
        email:
          type: string
        academicTitle:
          type: string
        srcChannelName:
          type: string
        origin:
          type: string
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        socialSecurityNumber:
          type: string
        anonymous:
          type: boolean
          default: false
        formOfAddress:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        reference:
          $ref: '#/components/schemas/ReferenceDto'
        personalData:
          $ref: '#/components/schemas/PersonalDataDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        sourceChannelType:
          type: string
        status:
          type: string
        sourcingMedium:
          type: string
        uiLanguage:
          type: string
        dataPrivacyStatement:
          type: string
        expectedArchiving:
          type: integer
          format: int64
        memo:
          type: string
        linkedInId:
          type: string
        partiallyDeleted:
          type: boolean
          default: false
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        internalCandidateId:
          type: string
        position:
          $ref: '#/components/schemas/PositionDto'
        candidateConsents:
          type: array
          items:
            $ref: '#/components/schemas/BasicCandidateConsentDto'
        openingId:
          type: integer
          format: int64
        poolId:
          type: integer
          format: int64
        campaignTypes:
          type: array
          items:
            $ref: '#/components/schemas/BasicCampaignTypeDto'
        referrer:
          $ref: '#/components/schemas/ReferrerDto'
    BasicCandidateTagDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        icon:
          type: string
        category:
          $ref: '#/components/schemas/BasicTagCategoryDto'
    BasicContractDto:
      type: object
      required:
        - contractType
        - plannedStartDate
      properties:
        approved:
          type: boolean
          default: false
        accepted:
          type: boolean
          default: false
        acceptApproved:
          type: boolean
          default: false
        administrativeComments:
          type: string
        plannedStartDate:
          type: integer
          format: int64
        plannedEndDate:
          type: integer
          format: int64
        scheduleType:
          type: string
        workAmount:
          type: number
          format: float
        workPeriod:
          type: string
        workUnit:
          type: string
        bonusCondition:
          type: string
        contractType:
          type: string
        length:
          type: number
          format: float
        lengthUnit:
          type: string
        permanentDetails:
          $ref: '#/components/schemas/PermanentDetailsDto'
        contractorDetails:
          $ref: '#/components/schemas/ContractorDetailsDto'
        allowConcurrentContracts:
          type: boolean
          default: false
        allowHeadCountSkip:
          type: boolean
          default: false
        application:
          $ref: '#/components/schemas/IdDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/BasicFreeFormFieldDto'
        approvalProcess:
          $ref: '#/components/schemas/BasicApprovalProcessDto'
        timesheetConfig:
          $ref: '#/components/schemas/TimesheetConfigBasicDto'
        midPeriodsConfigs:
          type: array
          items:
            $ref: '#/components/schemas/MidPeriodConfigBasicDto'
    BasicDepartmentConfigDto:
      type: object
      properties:
        interviewScheduleInJobContext:
          type: boolean
          default: false
        hideManageMyDataRemoveButton:
          type: boolean
          default: false
    BasicDepartmentDto:
      type: object
      required:
        - code
        - name
      properties:
        description:
          type: string
        name:
          type: string
        code:
          type: string
        documentSecurityRule:
          type: integer
          format: int32
        dataPrivacyStatement:
          type: string
        dataPrivacyStatementForHires:
          type: string
        invitationValidity:
          type: integer
          format: int64
        currencyCost:
          type: string
        hideDateOfBirth:
          type: boolean
          default: false
        searchByAgeEnabled:
          type: boolean
          default: false
        parentId:
          type: integer
          format: int64
        translations:
          $ref: '#/components/schemas/TranslationsDto'
        keyNameId:
          type: integer
          format: int64
        ofccpMaxCandidates:
          type: integer
          format: int64
        enforceInviteToExpressInterest:
          type: boolean
          default: false
        activateSearchRecording:
          type: boolean
          default: false
        ofccpLinkToJobShowJobs:
          type: boolean
          default: false
        enforceSalaryRangeCheck:
          type: boolean
          default: false
        mobileAccess:
          type: boolean
          default: false
        themes:
          type: array
          items:
            $ref: '#/components/schemas/ThemeDto'
        emailSignatureID:
          type: integer
          format: int64
        letterSignatureID:
          type: integer
          format: int64
        awdOwner:
          type: string
        awdReminderID:
          type: integer
          format: int64
        awdReminderPeriod:
          type: integer
          format: int64
        awdQualifyExpiresReminderID:
          type: integer
          format: int64
        calendarEventWsIntegrationURL:
          type: string
        useAccountCalendarEventWsIntegrationURL:
          type: boolean
          default: false
        enforceSalaryRangeCheckApproval:
          type: boolean
          default: false
        ratingScaleId:
          type: integer
          format: int64
        impJobDescAvailable:
          type: boolean
          default: false
        encryptApplicants:
          type: boolean
          default: false
        rejectionReasonRequired:
          type: boolean
          default: false
        country:
          type: string
        location:
          type: string
        mobileMDMAccess:
          type: boolean
          default: false
        departmentConfig:
          $ref: '#/components/schemas/BasicDepartmentConfigDto'
    BasicEventNotificationConfigurationDto:
      type: object
      required:
        - activated
        - alertCandidate
        - alertMessage
        - alertNewTimesheets
        - frequency
        - plainTextAlerts
        - taskNotifications
      properties:
        frequency:
          type: string
          enum:
            - ONCE_A_DAY
            - EVERY_HOUR
        activated:
          type: boolean
          default: false
        alertCandidate:
          type: boolean
          default: false
        alertMessage:
          type: boolean
          default: false
        alertNewTimesheets:
          type: boolean
          default: false
        plainTextAlerts:
          type: boolean
          default: false
        taskNotificationActive:
          type: boolean
          default: false
        taskNotifications:
          type: array
          items:
            $ref: '#/components/schemas/TaskNotificationDto'
    BasicFreeFormFieldDto:
      type: object
      required:
        - lovId
      properties:
        lovId:
          type: integer
          format: int64
        value:
          type: string
    BasicLovDto:
      type: object
      required:
        - nameLovId
        - valueLovId
      properties:
        nameLovId:
          type: integer
          format: int64
        valueLovId:
          type: integer
          format: int64
    BasicMailGatewayConfigurationDto:
      type: object
      required:
        - authorizedEmail1
        - srcChannelName
        - srcChannelType
      properties:
        activated:
          type: boolean
          default: false
        authorizedEmail1:
          type: string
        authorizedEmail2:
          type: string
        authorizedEmail3:
          type: string
        useSequentialCreation1:
          type: boolean
          default: false
        useSequentialCreation2:
          type: boolean
          default: false
        useSequentialCreation3:
          type: boolean
          default: false
        srcChannelName:
          type: string
        srcChannelType:
          type: string
        privacy:
          type: string
        folder:
          $ref: '#/components/schemas/CandidatePoolDto'
    BasicTagCategoryDto:
      type: object
      properties:
        name:
          type: string
    CampaignTypeAssignmentDto:
      type: object
      required:
        - campaignTypeIds
        - candidateIds
      properties:
        candidateIds:
          type: array
          items:
            type: integer
            format: int64
        campaignTypeIds:
          type: array
          items:
            type: integer
            format: int64
    CampaignTypeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        channel:
          type: string
          enum:
            - EMAIL
    CandidateConsentDto:
      type: object
      properties:
        consentDto:
          $ref: '#/components/schemas/ConsentDto'
        status:
          type: string
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - GRANTED
            - REVOKED_BY_USER
            - WITHDRAWN_BY_CANDIDATE
            - EXPIRED
            - UNKNOWN
        lastGrantedDate:
          type: integer
          format: int64
        lastRevokedDate:
          type: integer
          format: int64
        lastRequestedDate:
          type: integer
          format: int64
        lastRequestedUser:
          $ref: '#/components/schemas/UserDto'
        lastGrantedUser:
          $ref: '#/components/schemas/UserDto'
        lastRevokedUser:
          $ref: '#/components/schemas/UserDto'
        comment:
          type: string
        consentType:
          type: string
    CandidateDeletionStatusDto:
      type: object
      properties:
        candidateDeletedCompletely:
          type: boolean
          default: false
    CandidateDocumentDto:
      type: object
      required:
        - base64File
        - docType
        - fileName
      properties:
        description:
          type: string
        fileName:
          type: string
        docType:
          type: string
          enum:
            - RESUME
            - COVER_LETTER
            - MAIL
            - OFFER_LETTER
            - OTHER
        language:
          type: string
        base64File:
          type: string
        applicationId:
          type: integer
          format: int64
    CandidateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        contractor:
          type: boolean
          default: false
        initialType:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        middlename:
          type: string
    CandidateFullDto:
      type: object
      required:
        - firstname
        - lastname
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/CandidateTagFullDto'
        type:
          type: string
        contractor:
          type: boolean
          default: false
        initialType:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        middlename:
          type: string
        email:
          type: string
        academicTitle:
          type: string
        srcChannelName:
          type: string
        origin:
          type: string
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        socialSecurityNumber:
          type: string
        anonymous:
          type: boolean
          default: false
        formOfAddress:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        reference:
          $ref: '#/components/schemas/ReferenceDto'
        personalData:
          $ref: '#/components/schemas/PersonalDataDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        sourceChannelType:
          type: string
        status:
          type: string
        sourcingMedium:
          type: string
        uiLanguage:
          type: string
        dataPrivacyStatement:
          type: string
        expectedArchiving:
          type: integer
          format: int64
        memo:
          type: string
        linkedInId:
          type: string
        partiallyDeleted:
          type: boolean
          default: false
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        internalCandidateId:
          type: string
        position:
          $ref: '#/components/schemas/PositionDto'
        id:
          type: integer
          format: int64
        archivedManually:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        sendDeletionNotification:
          type: boolean
          default: false
        inactiveDate:
          type: integer
          format: int64
        archiveDateSinceProfileCreated:
          type: integer
          format: int64
        archiveDateSinceConsentGiven:
          type: integer
          format: int64
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationDto'
        pools:
          type: array
          items:
            $ref: '#/components/schemas/CandidatePoolDto'
        talentDatabaseConsent:
          type: string
        candidateConsents:
          type: array
          items:
            $ref: '#/components/schemas/CandidateConsentDto'
        campaignTypes:
          type: array
          items:
            $ref: '#/components/schemas/CampaignTypeDto'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentsDto'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentBaseDto'
        referrals:
          type: array
          items:
            $ref: '#/components/schemas/ReferralDto'
    CandidateGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
        markForArchiving:
          $ref: '#/components/schemas/ActionDto'
        unmarkFromArchiving:
          $ref: '#/components/schemas/ActionDto'
        fetchCandidateSummary:
          $ref: '#/components/schemas/ActionDto'
    CandidateGraphQlContent:
      type: object
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/CandidateFullDto'
        actions:
          $ref: '#/components/schemas/CandidateGlobalActionsDto'
    CandidateGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CandidateGraphQlContent'
    CandidateListDto:
      type: object
      required:
        - candidatesIds
      properties:
        candidatesIds:
          type: array
          items:
            type: integer
            format: int64
    CandidatePoolActionsDto:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/ActionDto'
    CandidatePoolCreationDto:
      type: object
      required:
        - departmentId
        - name
      properties:
        description:
          type: string
        name:
          description: name of the Pool
          type: string
        outOfMatching:
          description: >-
            If set to Yes, then candidates assigned to such a pool will be
            excluded from Job Matching feature.
          type: boolean
          default: false
        country:
          description: Name of the country which is assigned to the Pool
          type: string
        departmentId:
          description: ID of the department to which the Pool is assigned
          type: integer
          format: int64
    CandidatePoolDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    CandidatePoolFullDto:
      type: object
      required:
        - departmentId
        - name
      properties:
        description:
          type: string
        name:
          description: name of the Pool
          type: string
        outOfMatching:
          description: >-
            If set to Yes, then candidates assigned to such a pool will be
            excluded from Job Matching feature.
          type: boolean
          default: false
        country:
          description: Name of the country which is assigned to the Pool
          type: string
        id:
          description: unique ID of a Pool
          type: integer
          format: int64
        creationDate:
          description: date when the Pool was created
          type: integer
          format: int64
        updateDate:
          description: date when the Pool has been updated
          type: integer
          format: int64
        defaultFolder:
          description: >-
            distinguishes between user's private pool (value=Yes) and Department
            Shared Pool (value=No)
          type: boolean
          default: false
        folderType:
          type: string
        departmentId:
          description: ID of the department to which the Pool is assigned
          type: integer
          format: int64
        creationUserId:
          description: ID of the user who created the Pool
          type: integer
          format: int64
        updateUserId:
          description: ID of the most recent user who updated the Pool
          type: integer
          format: int64
        actions:
          $ref: '#/components/schemas/CandidatePoolActionsDto'
    CandidatePoolGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    CandidatePoolGraphQlContent:
      type: object
      properties:
        candidatePools:
          type: array
          items:
            $ref: '#/components/schemas/CandidatePoolFullDto'
        actions:
          $ref: '#/components/schemas/CandidatePoolGlobalActionsDto'
    CandidatePoolGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CandidatePoolGraphQlContent'
    CandidateTagAssignmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        icon:
          type: string
        category:
          $ref: '#/components/schemas/BasicTagCategoryDto'
        department:
          $ref: '#/components/schemas/IdDto'
    CandidateTagFullDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        icon:
          type: string
        addedDate:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
        user:
          $ref: '#/components/schemas/UserDto'
        category:
          $ref: '#/components/schemas/TagCategoryDto'
    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        categoryList:
          $ref: '#/components/schemas/CategoryListDto'
        order:
          type: integer
          format: int32
        site:
          $ref: '#/components/schemas/SiteDto'
    CategoryListCriterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        categoryNo:
          type: integer
          format: int64
          xml:
            name: order
        criteria:
          type: array
          xml:
            name: criterion
            wrapped: true
          items:
            $ref: '#/components/schemas/Criterion'
      xml:
        name: criterion
    CategoryListDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        site:
          $ref: '#/components/schemas/SiteDto'
        name:
          type: string
        type:
          type: boolean
          default: false
        order:
          type: integer
          format: int32
        account:
          $ref: '#/components/schemas/AccountDto'
    CategoryNameDto:
      type: object
      properties:
        order:
          type: integer
          format: int32
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
    Channel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
        liveURL:
          type: string
        postingStartDate:
          type: string
        postingEndDate:
          type: string
        statusDescription:
          type: string
          xml:
            name: statusReason
      xml:
        name: channel
    ChildrenFreeFormFieldDto:
      type: object
      properties:
        lovId:
          type: integer
          format: int64
        name:
          type: string
        translatedName:
          type: string
        order:
          type: integer
          format: int32
        required:
          type: boolean
          default: false
        dateFormat:
          type: string
    CommunicationToApproverAttachmentsDto:
      type: object
      properties:
        candidateDocuments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentDto'
        sharedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentDto'
        temporaryDocuments:
          type: array
          items:
            $ref: '#/components/schemas/TemporaryAttachmentDto'
    CommunicationToApproverAttachmentsFullDto:
      type: object
      properties:
        candidateDocuments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentFullDto'
        sharedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentFullDto'
        temporaryDocuments:
          type: array
          items:
            $ref: '#/components/schemas/TemporaryAttachmentDto'
    CommunicationToApproverDto:
      type: object
      properties:
        subject:
          type: string
        content:
          type: string
        priority:
          type: string
          enum:
            - LOW
            - NORMAL
            - HIGH
        sensitivityName:
          type: string
          enum:
            - NORMAL
            - PERSONAL
            - PRIVATE
            - CONFIDENTIAL
        templateId:
          type: integer
          format: int64
        securedAttachments:
          type: boolean
          default: false
        attachments:
          $ref: '#/components/schemas/CommunicationToApproverAttachmentsDto'
    CommunicationToApproverFullDto:
      type: object
      properties:
        subject:
          type: string
        content:
          type: string
        priority:
          type: string
          enum:
            - LOW
            - NORMAL
            - HIGH
        sensitivityName:
          type: string
          enum:
            - NORMAL
            - PERSONAL
            - PRIVATE
            - CONFIDENTIAL
        templateId:
          type: integer
          format: int64
        securedAttachments:
          type: boolean
          default: false
        templateName:
          type: string
        templateLanguage:
          type: string
        attachments:
          $ref: '#/components/schemas/CommunicationToApproverAttachmentsFullDto'
    CompensationDto:
      type: object
      properties:
        minimum:
          type: number
        maximum:
          type: number
        period:
          type: string
        currency:
          type: string
    ConfigurableFieldsBasicDto:
      type: object
      properties:
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/BasicFreeFormFieldDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
    ConfigurableFieldsFullDto:
      type: object
      properties:
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldDto'
    ConfigurableLovDto:
      type: object
      properties:
        lovId:
          type: integer
          format: int64
        name:
          type: string
        translatedName:
          type: string
        active:
          type: boolean
          default: false
        defaultValue:
          type: integer
          format: int64
        possibleValues:
          type: object
          additionalProperties:
            type: string
        order:
          type: integer
          format: int32
        required:
          type: boolean
          default: false
        tsTrigger:
          type: boolean
          default: false
    ConfigurationDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
        type:
          type: string
          enum:
            - GUI_DESKTOP
            - GUI_PANEL
            - GUI_TABLE
            - GUI_FILTER
            - GUI_CUSTOM
            - WORKSPACE_MANAGEMENT
            - SYSTEM_STATUS
            - GUI_COREINFO_WIDGET
            - FILTER_KEY
            - GUI_POSITION_WIDGETS
            - GUI_JOB_WIDGETS
            - GUI_JOBFAMILY_WIDGETS
            - NEW_UI_CURRENT_STATE
            - DEFAULT_EMAIL_DOMAIN
            - ENFORCE_SMTP_COMMUNICATION
            - ESIGNATURE_LAST_SELECTED_OPTIONS
            - ESIGNATURE_CONFIGURATION_STATE
            - DEFAULT_CAMPAIGN_EMAIL_DOMAIN
            - RECRUITER_DASHBOARD
            - SIMPLE_DASHBOARD
            - RECRUITER_DASHBOARD_FILTER
            - DASHBOARD_MANAGEMENT_FILTER
            - JOB_LIST
            - DASHBOARD_MANAGEMENT
            - OFFERED_APPLICATIONS
            - POSTING_LIST
            - OPENING_KPI
            - CANDIDATES_LIST
        name:
          type: string
        shared:
          type: boolean
          default: false
        configurationData:
          type: string
        genuineChildren:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationDto'
        parent:
          $ref: '#/components/schemas/ConfigurationDto'
        referenceTo:
          $ref: '#/components/schemas/ConfigurationDto'
        order:
          type: integer
          format: int32
        helperData:
          type: string
        lastUpdate:
          type: integer
          format: int64
        children:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationDto'
        deleted:
          type: boolean
          default: false
    ConsentDto:
      type: object
      properties:
        version:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - TALENT_POOL
            - APPLICATION
            - LINKEDIN_RSC
            - ALL_CONTEXT_CONSENT
            - UNKNOWN
        language:
          type: string
          enum:
            - AR
            - AT
            - BG
            - BR
            - CA
            - CH
            - CN
            - CS
            - CY
            - DE
            - DN
            - EL
            - US
            - EN
            - ET
            - FL
            - FN
            - FR
            - GL
            - HR
            - HU
            - ID
            - IS
            - IT
            - JA
            - KO
            - LT
            - LV
            - MX
            - MY
            - NL
            - NW
            - PL
            - PT
            - RO
            - RU
            - SK
            - SL
            - SP
            - SR
            - SW
            - TH
            - TR
            - TW
            - UA
            - UK
            - VI
            - WA
            - XX
        introductionText:
          type: string
        fullText:
          type: string
        department:
          $ref: '#/components/schemas/DepartmentDto'
        defaultConsent:
          type: boolean
          default: false
        current:
          type: boolean
          default: false
        user:
          $ref: '#/components/schemas/UserDto'
        createdDate:
          type: integer
          format: int64
        uniqueIdentifier:
          type: string
    ConsentGraphQlContent:
      type: object
      properties:
        consents:
          type: array
          items:
            $ref: '#/components/schemas/ConsentDto'
        actions:
          $ref: '#/components/schemas/DepartmentGlobalActionsDto'
    ConsentGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ConsentGraphQlContent'
    ContractGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    ContractGraphQlContent:
      type: object
      properties:
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/FullContractDto'
        actions:
          $ref: '#/components/schemas/ContractGlobalActionsDto'
    ContractGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ContractGraphQlContent'
    ContractIdDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ContractorDetailsDto:
      type: object
      required:
        - contractor
        - totalCost
        - totalCurrency
      properties:
        contractorType:
          type: string
        flexibilityMinDate:
          type: integer
          format: int64
        flexibilityMaxDate:
          type: integer
          format: int64
        totalCost:
          type: number
        benchmarkRate:
          type: number
        gainShareRate:
          type: number
        totalClientChargeRate:
          type: number
        standardCurrency:
          type: string
        totalCurrency:
          type: string
        additionalInfo:
          type: string
        tsActive:
          type: boolean
          default: false
        contractor:
          $ref: '#/components/schemas/ContractorDto'
        rates:
          type: array
          items:
            $ref: '#/components/schemas/RateDto'
        expenseReimbursed:
          type: boolean
          default: false
        splitCostPerCostCenter:
          type: boolean
          default: false
        awdQualified:
          type: boolean
          default: false
    ContractorDto:
      type: object
      properties:
        name:
          type: string
        groupName:
          type: string
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        address4:
          type: string
        city:
          type: string
        zipCode:
          type: string
        phone:
          type: string
        contactName:
          type: string
        legalId:
          type: string
        taxId:
          type: string
        paymentTerms:
          type: string
        bankName:
          type: string
        bankAccountName:
          type: string
        bankAccountNumber:
          type: string
        bankSortCode:
          type: string
        bankContactName:
          type: string
        bankContactPhone:
          type: string
        bankCity:
          type: string
        iban:
          type: string
        swift:
          type: string
        country:
          type: string
        agencyId:
          type: integer
          format: int64
    CostCenterApprovalConfigBasicDto:
      type: object
      properties:
        skipNewTimesheetGenerate:
          type: boolean
          default: false
        costCenterConfig:
          type: array
          items:
            $ref: '#/components/schemas/CostCenterConfigBasicDto'
    CostCenterApprovalConfigDto:
      type: object
      properties:
        costCenterType:
          $ref: '#/components/schemas/LovDto'
        costCenterConfig:
          type: array
          items:
            $ref: '#/components/schemas/CostCenterConfigDto'
    CostCenterConfigBasicDto:
      type: object
      properties:
        costCenter:
          $ref: '#/components/schemas/BasicLovDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApprovalStepBasicDto'
        cost:
          type: number
    CostCenterConfigDto:
      type: object
      properties:
        costCenter:
          $ref: '#/components/schemas/LovDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApprovalStepDto'
        cost:
          type: number
    CreateLovDto:
      type: object
      required:
        - entries
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
    CreateLovEntriesDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
    CreateLovEntriesWithDataFormatAndRequiredDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CreateLovEntryWithDataFormatAndRequiredDto'
    CreateLovEntriesWithDataValueDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CreateLovEntryWithDataValueDto'
    CreateLovEntryDto:
      type: object
      required:
        - lovId
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        lovId:
          type: integer
          format: int64
    CreateLovEntryWithDataFormatAndRequiredDto:
      type: object
      required:
        - dataFormat
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        dataFormat:
          type: string
        required:
          type: boolean
          default: false
    CreateLovEntryWithDataValueDto:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        dataValue:
          type: number
    CreateLovWithDataTypeDto:
      type: object
      required:
        - entries
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        dataType:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CreateLovEntryWithDataValueDto'
    CreateLovWithEntriesWithDataFormatAndRequiredDto:
      type: object
      required:
        - entries
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CreateLovEntryWithDataFormatAndRequiredDto'
    CreateUserDto:
      type: object
      required:
        - email
        - firstName
        - language
        - lastName
        - login
        - password
        - userActivation
      properties:
        login:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        language:
          type: string
        mss:
          type: boolean
          default: false
        disabledLoginPage:
          type: boolean
          default: false
        password:
          type: string
        dateFormat:
          type: string
        timeFormat:
          type: string
          enum:
            - H12
            - H24
        userActivation:
          type: string
          enum:
            - SENDACTIVATIONREQUESTTOEMAIL
            - ACTIVATEUSERLATER
            - ACTIVATEUSERNOWANDSENDEMAILNOTIFICATION
            - ACTIVATEUSERNOWWITHOUTSENDINGEMAILNOTIFICATION
            - ACTIVATEUSERNOWANDSENDONBOARDINGEMAILNOTIFICATION
        userPreferences:
          $ref: '#/components/schemas/UserPreferencesDto'
    Criterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
      xml:
        name: criterion
    CustomField:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
        unlocalizedLabel:
          type: string
        order:
          type: integer
          format: int32
      xml:
        name: customField
    CustomFieldDto:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
        unlocalizedLabel:
          type: string
        order:
          type: integer
          format: int32
    CustomFieldSkillDto:
      type: object
      properties:
        sectionOrder:
          type: integer
          format: int64
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillDto'
    CustomLovGroup:
      type: object
      properties:
        customLovs:
          type: array
          items:
            type: integer
            format: int64
    CustomRateDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: number
    DashboardAssignmentRequestDto:
      type: object
      properties:
        genericDashboard:
          type: boolean
          default: false
        hiringManagerDashboard:
          type: boolean
          default: false
        recruiterDashboards:
          type: object
          additionalProperties:
            type: boolean
    DeactivateLovDto:
      type: object
      required:
        - lovsIds
      properties:
        lovsIds:
          type: array
          items:
            type: integer
            format: int64
    DepartmentActionsDto:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/ActionDto'
        move:
          $ref: '#/components/schemas/ActionDto'
        delete:
          $ref: '#/components/schemas/ActionDto'
        permanentContractConfig:
          $ref: '#/components/schemas/ActionDto'
        contractorContractConfig:
          $ref: '#/components/schemas/ActionDto'
        positionStructure:
          $ref: '#/components/schemas/ActionDto'
    DepartmentConfigDto:
      type: object
      properties:
        interviewScheduleInJobContext:
          type: boolean
          default: false
        hideManageMyDataRemoveButton:
          type: boolean
          default: false
        contractServerMerge:
          type: boolean
          default: false
        txtSystemNotification:
          type: string
        systemNotificationAuthorUsername:
          type: string
        dataPrivacyDisplayOption:
          type: string
    DepartmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        parentId:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
    DepartmentFullDto:
      type: object
      required:
        - code
        - name
      properties:
        description:
          type: string
        name:
          type: string
        code:
          type: string
        documentSecurityRule:
          type: integer
          format: int32
        dataPrivacyStatement:
          type: string
        dataPrivacyStatementForHires:
          type: string
        invitationValidity:
          type: integer
          format: int64
        currencyCost:
          type: string
        hideDateOfBirth:
          type: boolean
          default: false
        searchByAgeEnabled:
          type: boolean
          default: false
        parentId:
          type: integer
          format: int64
        translations:
          $ref: '#/components/schemas/TranslationsDto'
        keyNameId:
          type: integer
          format: int64
        ofccpMaxCandidates:
          type: integer
          format: int64
        enforceInviteToExpressInterest:
          type: boolean
          default: false
        activateSearchRecording:
          type: boolean
          default: false
        ofccpLinkToJobShowJobs:
          type: boolean
          default: false
        enforceSalaryRangeCheck:
          type: boolean
          default: false
        mobileAccess:
          type: boolean
          default: false
        themes:
          type: array
          items:
            $ref: '#/components/schemas/ThemeDto'
        emailSignatureID:
          type: integer
          format: int64
        letterSignatureID:
          type: integer
          format: int64
        awdOwner:
          type: string
        awdReminderID:
          type: integer
          format: int64
        awdReminderPeriod:
          type: integer
          format: int64
        awdQualifyExpiresReminderID:
          type: integer
          format: int64
        calendarEventWsIntegrationURL:
          type: string
        useAccountCalendarEventWsIntegrationURL:
          type: boolean
          default: false
        enforceSalaryRangeCheckApproval:
          type: boolean
          default: false
        ratingScaleId:
          type: integer
          format: int64
        impJobDescAvailable:
          type: boolean
          default: false
        encryptApplicants:
          type: boolean
          default: false
        rejectionReasonRequired:
          type: boolean
          default: false
        country:
          type: string
        location:
          type: string
        mobileMDMAccess:
          type: boolean
          default: false
        departmentConfig:
          $ref: '#/components/schemas/DepartmentConfigDto'
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        active:
          type: boolean
          default: false
        actions:
          $ref: '#/components/schemas/DepartmentActionsDto'
    DepartmentGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    DepartmentGraphQlContent:
      type: object
      properties:
        departments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentFullDto'
        actions:
          $ref: '#/components/schemas/DepartmentGlobalActionsDto'
    DepartmentGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/DepartmentGraphQlContent'
    DepartmentIdDto:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    DepartmentIdNameDto:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    DepartmentRoleDeletionDto:
      type: object
      required:
        - includeAll
      properties:
        includeAll:
          type: boolean
          default: false
        roleIds:
          type: array
          items:
            type: integer
            format: int64
        roleTags:
          type: array
          items:
            $ref: '#/components/schemas/RoleTagDto'
    DepartmentRoleDto:
      type: object
      properties:
        departments:
          $ref: '#/components/schemas/RoleDepartmentDeletionDto'
        roles:
          $ref: '#/components/schemas/DepartmentRoleDeletionDto'
    DimensionConfigDto:
      type: object
      properties:
        dimensionLovId:
          type: integer
          format: int64
        matrixLovIds:
          type: array
          items:
            type: integer
            format: int64
    DocumentBaseDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        applicationId:
          type: integer
          format: int64
        name:
          type: string
        documentType:
          type: string
        docType:
          type: string
          enum:
            - BO_CP
            - BO_CPE
            - BO_CPI
            - BO_CPEC
            - BO_CPIC
            - FO_CP
            - FO_PIF
            - FO_RPM
            - FO_CNT
            - BEST_PIF
            - PROFILE
            - R
            - RESUME
            - CL
            - COVER_LETTER
            - COVERLETTER
            - DQ
            - I
            - IATTACHMENT
            - Q
            - MAIL
            - SEARCH
            - AGENCY_CONTRACT
            - DOCUMENT_PACK
            - EXPENSE
            - EXTSYSATTACHMENT
            - PHOTO
            - PORTRAIT
            - THUMBNAIL
            - OFFER_LETTER
            - OTHER
            - DOCUSIGN_PACKAGE
            - BGCK_REP
            - LINKEDIN_INMAIL
            - SMS
            - RESPONSE_EMAILS
            - TRACKED_MAIL
            - SB_ATTACHMENT
            - HIRINGFORM
            - MAILTRACK
        objectType:
          type: string
        author:
          type: string
        creationDate:
          type: integer
          format: int64
        lastUpdateDate:
          type: integer
          format: int64
      xml:
        name: document
    DocumentSecurityConfigDto:
      type: object
      required:
        - documentSecurityGroups
      properties:
        documentSecurityGroups:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSecurityGroupDto'
    DocumentSecurityDto:
      type: object
      properties:
        groupId:
          type: integer
          format: int64
        matrix:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
    DocumentSecurityGroupDto:
      type: object
      properties:
        dimensionsConfig:
          type: array
          items:
            $ref: '#/components/schemas/DimensionConfigDto'
    DocumentSecurityGroupIdDto:
      type: object
      properties:
        groupId:
          type: integer
          format: int64
    DurationDto:
      type: object
      properties:
        count:
          type: integer
          format: int32
        period:
          type: string
    EditUserDataDto:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
        fffs:
          type: array
          items:
            $ref: '#/components/schemas/BasicFreeFormFieldDto'
    EditUserDto:
      type: object
      properties:
        login:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        language:
          type: string
        mss:
          type: boolean
          default: false
        disabledLoginPage:
          type: boolean
          default: false
        id:
          type: integer
          format: int64
        mustChangePassword:
          type: boolean
          default: false
        userPreferences:
          $ref: '#/components/schemas/UserPreferencesDto'
    EmployeeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    EventNotificationConfigurationDto:
      type: object
      required:
        - activated
        - alertCandidate
        - alertMessage
        - alertNewTimesheets
        - frequency
        - plainTextAlerts
        - taskNotifications
      properties:
        frequency:
          type: string
          enum:
            - ONCE_A_DAY
            - EVERY_HOUR
        activated:
          type: boolean
          default: false
        alertCandidate:
          type: boolean
          default: false
        alertMessage:
          type: boolean
          default: false
        alertNewTimesheets:
          type: boolean
          default: false
        plainTextAlerts:
          type: boolean
          default: false
        taskNotificationActive:
          type: boolean
          default: false
        taskNotifications:
          type: array
          items:
            $ref: '#/components/schemas/TaskNotificationDto'
        id:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        email:
          type: string
    EventServiceConfDto:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/EventServiceConfKeyDto'
        filter:
          $ref: '#/components/schemas/ConfigurationDto'
        creator:
          $ref: '#/components/schemas/UserDto'
        creationDate:
          type: integer
          format: int64
    EventServiceConfKeyDto:
      type: object
      properties:
        queue:
          $ref: '#/components/schemas/TlkQueueDto'
        eventType:
          type: string
          enum:
            - CANDIDATE_CREATED_EVENT
            - CANDIDATE_CHANGED_EVENT
            - CANDIDATE_DPS_ABOUT_TO_EXPIRE
            - APPLICATION_CREATED_EVENT
            - APPLICATION_STATUS_CHANGED_EVENT
            - APPLICATION_STEP_DECISION_EVENT
            - JOB_APPROVED_EVENT
            - JOB_STATUS_CHANGED_EVENT
            - JOB_CREATED_EVENT
            - NEW_VERSION_OF_CONTRACT_OR_EXTENSION_CREATED_EVENT
            - VERSION_OF_CONTRACT_OR_EXTENSION_APPROVED
            - VERSION_OF_CONTRACT_OR_EXTENSION_ACCEPTED
            - TIMESHEET_APPROVED_EVENT
            - NEW_EXTERNAL_SYSTEM_REQUEST_CREATED
            - UPDATE_EXTERNAL_SYSTEM_REQUEST
            - CANCEL_EXTERNAL_SYSTEM_REQUEST
            - NEW_EXTERNAL_SYSTEM_CREATED
            - POSTING_CREATED
            - CANDIDATE_ARCHIVED_OR_DELETED_EVENT
            - USER_CREATED_EVENT
            - USER_DATA_UPDATED_EVENT
            - USER_REMOVED_EVENT
    ExpectedContractDatesDto:
      type: object
      properties:
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
    ExtSysStatusMappingDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        externalSystem:
          $ref: '#/components/schemas/ExternalSystemDto'
        lovId_External:
          type: integer
          format: int64
        lovId_Internal:
          type: integer
          format: int64
    ExternalSystemDto:
      type: object
      properties:
        description:
          type: string
        parameters:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        global:
          type: boolean
          default: false
        active:
          type: boolean
          default: false
        clientId:
          type: string
        password:
          type: string
        redirectionUrl:
          type: string
        defaultEndPoint:
          type: string
        type:
          $ref: '#/components/schemas/ExternalSystemTypeDto'
        form:
          $ref: '#/components/schemas/FormDto'
        immediateAssessment:
          type: boolean
          default: false
        useTlkApi:
          type: boolean
          default: false
        redirectCandidate:
          type: boolean
          default: false
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        jsonParams:
          $ref: '#/components/schemas/JSONObject'
        vendor_UserId:
          type: integer
          format: int64
        interfaceId:
          type: integer
          format: int64
        statusMappings:
          type: array
          items:
            $ref: '#/components/schemas/ExtSysStatusMappingDto'
        departments:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DepartmentDto'
        assessmentTestGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssessmentTestGroupDto'
        updateDate:
          type: integer
          format: int64
        updateUserId:
          type: integer
          format: int64
    ExternalSystemTypeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    FormAssignedQuestionDto:
      type: object
      properties:
        assignedQuestionId:
          type: integer
          format: int64
        questionId:
          type: integer
          format: int64
        questionLabel:
          type: string
        questionType:
          type: string
        localizedValues:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedValueDto'
        assignedOptions:
          type: array
          items:
            $ref: '#/components/schemas/AssignedOptionDto'
        answerValidation:
          $ref: '#/components/schemas/AnswerValidationDto'
        answerValidationExtended:
          $ref: '#/components/schemas/AnswerValidationExtendedDto'
        competencyCategoryName:
          type: string
        questionLayout:
          $ref: '#/components/schemas/QuestionLayoutDto'
        childQuestions:
          type: array
          items:
            $ref: '#/components/schemas/FormAssignedQuestionDto'
    FormDto:
      type: object
      properties:
        description:
          type: string
        formId:
          type: integer
          format: int64
        name:
          type: string
        masterLanguage:
          type: string
        assignedQuestions:
          type: array
          items:
            $ref: '#/components/schemas/FormAssignedQuestionDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/ListOfValuesDto'
        competencyCategories:
          type: array
          items:
            $ref: '#/components/schemas/QuestionCompetencyCategoryDto'
        comment:
          type: string
        departmentId:
          type: integer
          format: int64
        translatedLanguage:
          type: string
        dataPrivacy:
          type: string
        formDivider:
          type: integer
          format: int64
        answerableManyTimes:
          type: boolean
          default: false
        displayType:
          type: string
        archive:
          type: boolean
          default: false
    FormulaDto:
      type: object
      properties:
        name:
          type: string
        translations:
          $ref: '#/components/schemas/TranslationsDto'
        rateType:
          type: string
          enum:
            - ChargeRate
            - SupplierRate
            - PayRate
            - CustomRate
            - Pay2Supplier
            - Supplier2Charge
            - Overall
        unit:
          type: string
          enum:
            - PERCENT
            - CURRENCY
        input:
          type: boolean
          default: false
    FreeFormFieldDto:
      type: object
      required:
        - lovId
      properties:
        lovId:
          type: integer
          format: int64
        value:
          type: string
        fatherLovName:
          type: string
        fatherLovId:
          type: integer
          format: int64
        fatherLovNameTranslations:
          $ref: '#/components/schemas/TranslationsDto'
        name:
          type: string
        lovTranslations:
          $ref: '#/components/schemas/TranslationsDto'
    FreeFormFieldTriggerDto:
      type: object
      properties:
        lovId:
          type: integer
          format: int64
        name:
          type: string
        translatedName:
          type: string
        order:
          type: integer
          format: int32
        children:
          type: array
          items:
            $ref: '#/components/schemas/ChildrenFreeFormFieldDto'
        active:
          type: boolean
          default: false
        required:
          type: boolean
          default: false
        tsTrigger:
          type: boolean
          default: false
    FullApplicationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sourceChannelName:
          type: string
        sourceChannelType:
          type: string
        sourcingMedium:
          type: string
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        applicationDate:
          type: integer
          format: int64
        opening:
          $ref: '#/components/schemas/OpeningDto'
        status:
          type: string
        score:
          type: array
          items:
            $ref: '#/components/schemas/FullApplicationScoreDto'
        candidate:
          $ref: '#/components/schemas/CandidateDto'
        memo:
          type: string
        shortListed:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        activeApplication:
          type: boolean
          default: false
        hasContracts:
          type: boolean
          default: false
        completionReason:
          type: string
        statusComment:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentBaseDto'
        applicationFollowups:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationFollowupDto'
        candidateConsents:
          type: array
          items:
            $ref: '#/components/schemas/CandidateConsentDto'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentsDto'
    FullApplicationScoreDto:
      type: object
      required:
        - score
        - system
      properties:
        info:
          type: string
        score:
          type: number
          format: double
        system:
          type: string
        updateDate:
          type: integer
          format: int64
    FullContractDto:
      type: object
      required:
        - contractType
        - plannedStartDate
      properties:
        version:
          type: integer
          format: int32
        approved:
          type: boolean
          default: false
        accepted:
          type: boolean
          default: false
        acceptApproved:
          type: boolean
          default: false
        administrativeComments:
          type: string
        plannedStartDate:
          type: integer
          format: int64
        plannedEndDate:
          type: integer
          format: int64
        scheduleType:
          type: string
        workAmount:
          type: number
          format: float
        workPeriod:
          type: string
        workUnit:
          type: string
        bonusCondition:
          type: string
        contractType:
          type: string
        length:
          type: number
          format: float
        lengthUnit:
          type: string
        permanentDetails:
          $ref: '#/components/schemas/PermanentDetailsDto'
        contractorDetails:
          $ref: '#/components/schemas/ContractorDetailsDto'
        id:
          type: integer
          format: int64
        extension:
          type: integer
          format: int32
        current:
          type: boolean
          default: false
        revision:
          type: boolean
          default: false
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        approval:
          type: integer
          format: int64
        contractStatus:
          type: string
        negotiationStatus:
          type: string
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldDto'
        application:
          $ref: '#/components/schemas/ApplicationDto'
        timesheetConfig:
          $ref: '#/components/schemas/TimesheetConfigDto'
        approvalProcess:
          $ref: '#/components/schemas/ApprovalProcessFullDto'
        midPeriodsConfigs:
          type: array
          items:
            $ref: '#/components/schemas/MidPeriodConfigDto'
        deleted:
          type: boolean
          default: false
    IdDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ImageAssignmentDto:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        position:
          type: string
          enum:
            - Header1
            - Header2
            - TopOfJobDescription
            - Bottom
            - Logo
    IndeedApplyEndpointsDto:
      type: object
      properties:
        submissionsUrl:
          type: string
        questionsUrl:
          type: string
      xml:
        name: indeedApplyEndpoints
    IndeedConfigurationDto:
      type: object
      properties:
        organic:
          type: boolean
          default: false
        sponsored:
          type: boolean
          default: false
        indeedApply:
          type: boolean
          default: false
        indeedApplyEndpoints:
          $ref: '#/components/schemas/IndeedApplyEndpointsDto'
      xml:
        name: indeedConfiguration
    InternalMessageFullDto:
      type: object
      properties:
        title:
          type: string
        id:
          type: integer
          format: int64
        senderUser:
          $ref: '#/components/schemas/UserDto'
        receiverUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        msgStatus:
          type: string
        sentDate:
          type: integer
          format: int64
        dueDate:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updationDate:
          type: integer
          format: int64
        newMessageStatus:
          type: integer
          format: int32
        msgType:
          type: string
          enum:
            - ToDo
            - Notification
            - PersonalToDo
        actionType:
          type: string
          enum:
            - Hiring
            - Selection
            - Timesheet
            - AHNotification
            - Session
            - Schedule
            - Availability
            - JobApproval
            - Feedback
            - Referral
            - RequestExtension
            - NoAction
            - OfferNegotiation
            - AwdComplient
            - VisaRenewal
            - Onboarding
            - PerformanceManagement
            - DevelopmentActivities
            - WorkflowStep
            - Learning
            - BackgroundCheck
            - Course
            - LearningBundle
            - InvitationDeclined
            - InvalidConnectionDetails
            - SelfDefinedTask
            - SelectAdditionalSlots
            - AvailabilityModification
        overdue:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        comment:
          type: string
        selectionTask:
          $ref: '#/components/schemas/AppSelectionTaskBasicDto'
        processInstance:
          $ref: '#/components/schemas/ProcessInstanceDto'
        state:
          $ref: '#/components/schemas/StateDto'
        workflowStepInstance:
          $ref: '#/components/schemas/WorkflowStepInstanceDto'
        jobApprovalTask:
          $ref: '#/components/schemas/ApprovalStepDto'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentDto'
        contract:
          $ref: '#/components/schemas/ContractIdDto'
        timeSheet:
          $ref: '#/components/schemas/TimeSheetBasicDto'
        account:
          $ref: '#/components/schemas/AccountDto'
        visaDetails:
          $ref: '#/components/schemas/VisaDetailsDto'
        sendEvent:
          type: array
          items:
            $ref: '#/components/schemas/SendEventDto'
        externalCorrelation:
          type: string
        mail:
          $ref: '#/components/schemas/MailDto'
    InternalMessageGraphQlContent:
      type: object
      properties:
        internalMessages:
          type: array
          items:
            $ref: '#/components/schemas/InternalMessageFullDto'
    InternalMessageGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/InternalMessageGraphQlContent'
    InterviewDatesDto:
      type: object
      properties:
        version:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        interview:
          $ref: '#/components/schemas/InterviewDto'
        startDate:
          type: integer
          format: int64
        numericStartDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        maxSeat:
          type: integer
          format: int64
        account:
          $ref: '#/components/schemas/AccountDto'
        location:
          $ref: '#/components/schemas/LocationDto'
        user:
          $ref: '#/components/schemas/UserDto'
        availability:
          type: boolean
          default: false
        reminder:
          type: boolean
          default: false
        meetingPlace:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantDto'
        leadInterviewer:
          $ref: '#/components/schemas/UserDto'
        closingUnits:
          type: integer
          format: int64
        unitsType:
          type: string
        interviewScheduleSlot:
          $ref: '#/components/schemas/InterviewScheduleSlotDto'
        selfBookingSlot:
          $ref: '#/components/schemas/SelfBookingSlotDto'
    InterviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        opening:
          $ref: '#/components/schemas/OpeningDto'
        subject:
          type: string
        message:
          type: string
        name:
          type: string
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        schedulingStatus:
          type: string
        zoneRegion:
          type: string
        interviewToken:
          type: string
        account:
          $ref: '#/components/schemas/AccountDto'
        interviewType:
          type: string
          enum:
            - Interview
            - Session
        cancelComment:
          type: string
        mailInvitation:
          $ref: '#/components/schemas/MailDto'
        mailConfirmCand:
          $ref: '#/components/schemas/MailDto'
        mailConfirmInter:
          $ref: '#/components/schemas/MailDto'
        connectedUser:
          $ref: '#/components/schemas/UserDto'
        sessionCategory:
          $ref: '#/components/schemas/SessionCategoryDto'
        organizerUser:
          $ref: '#/components/schemas/UserDto'
        sessionStatus:
          type: string
        teamFeedback:
          type: boolean
          default: false
        bookedSeats:
          type: integer
          format: int64
        invitationsSent:
          type: integer
          format: int64
        interviewDates:
          type: array
          items:
            $ref: '#/components/schemas/InterviewDatesDto'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantDto'
        leadInterviewer:
          $ref: '#/components/schemas/UserDto'
        interviewerTeam:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        selectionSteps:
          type: array
          items:
            $ref: '#/components/schemas/SelectionTaskFullDto'
        checkValidation:
          type: boolean
          default: false
        sendConfirmationToCandidate:
          type: boolean
          default: false
        sendConfirmationToInterviewer:
          type: boolean
          default: false
        externalCorrelationId:
          type: string
        sendingSchema:
          type: string
          enum:
            - INVITE_ALL
            - INVITE_INTERVIEWERS
            - INVITE_CANDIDATE
            - DO_NOT_SEND_INVITATION
            - MANUAL_SENDING_SCHEMA
        onlineMeetingId:
          type: string
        onlineMeetingUrl:
          type: string
        selfBookingSlots:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SelfBookingSlotDto'
        selfBookingSlotCutOffTime:
          type: integer
          format: int64
        selfBookingId:
          type: string
        sendPotentialMeetingsForSlots:
          type: boolean
          default: false
        fromInterviewSchedule:
          type: boolean
          default: false
        fromSmartCalendar:
          type: boolean
          default: false
        notificationSent:
          type: boolean
          default: false
    InterviewLocationBasicDto:
      type: object
      required:
        - address1
        - city
        - country
        - standard
        - timezone
        - title
      properties:
        title:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        zipcode:
          type: string
        region:
          type: string
        country:
          type: string
        room:
          type: string
        timezone:
          type: string
        local:
          type: boolean
          default: false
        standard:
          type: boolean
          default: false
        email:
          type: string
        departments:
          type: array
          items:
            $ref: '#/components/schemas/IdDto'
    InterviewLocationFullDto:
      type: object
      required:
        - address1
        - city
        - country
        - standard
        - timezone
        - title
      properties:
        title:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        zipcode:
          type: string
        region:
          type: string
        country:
          type: string
        room:
          type: string
        timezone:
          type: string
        local:
          type: boolean
          default: false
        standard:
          type: boolean
          default: false
        email:
          type: string
        id:
          type: integer
          format: int64
        departments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentDto'
        owner:
          $ref: '#/components/schemas/UserDto'
    InterviewLocationGraphQlContent:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/InterviewLocationFullDto'
    InterviewLocationGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/InterviewLocationGraphQlContent'
    InterviewScheduleSlotDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        opening:
          $ref: '#/components/schemas/OpeningDto'
        selectionTaskModel:
          $ref: '#/components/schemas/SelectionTaskFullDto'
        interviewDates:
          $ref: '#/components/schemas/InterviewDatesDto'
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/LocationDto'
        leadInterviewer:
          $ref: '#/components/schemas/UserDto'
        externalUserEmail:
          type: string
        additionalInterviewers:
          $ref: '#/components/schemas/UserGroupDto'
    JSONObject:
      type: object
    JobAdTemplateDto:
      type: object
      properties:
        title:
          type: string
        id:
          type: integer
          format: int64
    JobDTO:
      type: object
      properties:
        advertId:
          type: integer
          format: int64
        jobboards:
          type: array
          xml:
            name: jobboard
            wrapped: true
          items:
            $ref: '#/components/schemas/JobboardDTO'
      xml:
        name: job
    JobDescriptionUrlDto:
      type: object
      properties:
        jobDescriptionUrl:
          type: string
    JobLocationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        departmentId:
          type: integer
          format: int64
        creationUserId:
          type: integer
          format: int64
        updateUserId:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        country:
          type: string
        region:
          type: string
        regionName:
          type: string
        city:
          type: string
        street:
          type: string
        streetNumber:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        regionLovName:
          type: string
      xml:
        name: jobLocation
    JobboardConfigurationDto:
      type: object
      properties:
        indeed:
          $ref: '#/components/schemas/IndeedConfigurationDto'
    JobboardDTO:
      type: object
      properties:
        postingAction:
          type: string
        postingStatus:
          type: string
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        errorCode:
          type: string
        channels:
          type: array
          xml:
            name: channel
            wrapped: true
          items:
            $ref: '#/components/schemas/Channel'
        postingActionAsEnum:
          type: string
          enum:
            - INSERT
            - UPDATE
            - CHANNEL_DELETE
            - DELETE
            - NAVIGATE
            - RESEND_WITHOUT_CHANGES
        postingStatusAsEnum:
          type: string
          enum:
            - INITIAL
            - PENDING
            - MULTIPOST_PENDING
            - ACTIVE
            - DEFERRED
            - QUEUED_FOR_FUTURE_POSTING
            - INACTIVE
            - DELETED
            - EXPIRED
            - FAILED
            - ERROR
            - SUCCESS
            - CANCELLED
        statusDescription:
          type: string
          xml:
            name: message
      xml:
        name: jobboard
    KeyNameDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        account:
          $ref: '#/components/schemas/AccountDto'
        labels:
          type: object
          additionalProperties:
            type: string
        labelsProxy:
          type: object
          additionalProperties:
            type: string
        jsonlabels:
          type: string
    LinkToJobsDto:
      type: object
      properties:
        requisitionIds:
          type: array
          items:
            type: integer
            format: int64
        copyAllDocuments:
          type: boolean
          default: false
        documentsIds:
          type: array
          items:
            type: integer
            format: int64
    ListOfValuesDto:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/LovValueDto'
        lovName:
          type: string
    LocalizedValueDto:
      type: object
      properties:
        lang:
          type: string
        value:
          type: string
    LocationActionsDto:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/ActionDto'
        delete:
          $ref: '#/components/schemas/ActionDto'
    LocationBasicDto:
      type: object
      required:
        - departmentId
        - name
      properties:
        name:
          type: string
        country:
          type: string
        countryCodeAlpha2:
          type: string
        countryCodeAlpha3:
          type: string
        region:
          type: string
        regionName:
          type: string
        city:
          type: string
        street:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        departmentId:
          type: integer
          format: int64
        remote:
          type: boolean
          default: false
    LocationDto:
      type: object
      required:
        - departmentId
        - name
      properties:
        name:
          type: string
        country:
          type: string
        countryCodeAlpha2:
          type: string
        countryCodeAlpha3:
          type: string
        region:
          type: string
        regionName:
          type: string
        city:
          type: string
        street:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        departmentId:
          type: integer
          format: int64
        remote:
          type: boolean
          default: false
        id:
          type: integer
          format: int64
        countryTranslations:
          $ref: '#/components/schemas/TranslationsDto'
        regionTranslations:
          $ref: '#/components/schemas/TranslationsDto'
    LocationFullDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        country:
          type: string
        countryCodeAlpha2:
          type: string
        countryCodeAlpha3:
          type: string
        region:
          type: string
        regionName:
          type: string
        city:
          type: string
        street:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        remote:
          type: boolean
          default: false
        id:
          type: integer
          format: int64
        countryTranslations:
          $ref: '#/components/schemas/TranslationsDto'
        regionTranslations:
          $ref: '#/components/schemas/TranslationsDto'
        creationDate:
          type: integer
          format: int64
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateDate:
          type: integer
          format: int64
        updateUser:
          $ref: '#/components/schemas/UserDto'
        department:
          $ref: '#/components/schemas/DepartmentDto'
        actions:
          $ref: '#/components/schemas/LocationActionsDto'
    LocationGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    LocationGraphQlContent:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationFullDto'
        actions:
          $ref: '#/components/schemas/LocationGlobalActionsDto'
    LocationGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LocationGraphQlContent'
    LovCriterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        criteria:
          type: array
          xml:
            name: criterion
            wrapped: true
          items:
            $ref: '#/components/schemas/LovWithActivatorsCriterion'
        parents:
          type: array
          xml:
            name: parent
            wrapped: true
          items:
            $ref: '#/components/schemas/Criterion'
        order:
          type: integer
          format: int64
      xml:
        name: lovcriterion
    LovDto:
      type: object
      required:
        - nameLovId
        - valueLovId
      properties:
        nameLovId:
          type: integer
          format: int64
        valueLovId:
          type: integer
          format: int64
        name:
          type: string
        value:
          type: string
        nameTranslations:
          $ref: '#/components/schemas/TranslationsDto'
        valueTranslations:
          $ref: '#/components/schemas/TranslationsDto'
    LovFullDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int32
        type:
          type: string
        dataFormat:
          type: string
        get_Required:
          type: boolean
          default: false
        get_Hidden:
          type: boolean
          default: false
        systemValue:
          type: boolean
          default: false
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        account:
          $ref: '#/components/schemas/AccountDto'
        keyName:
          $ref: '#/components/schemas/KeyNameDto'
        parent:
          $ref: '#/components/schemas/LovFullDto'
        preferredLanguage:
          type: string
        dataValue:
          type: number
        dataType:
          type: string
          enum:
            - INTEGER
            - TEXT
            - POSITIVE_INTEGER
            - NUMERICAL
            - BOOLEAN
        updateUser:
          $ref: '#/components/schemas/UserDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        keyNameId:
          type: integer
          format: int64
    LovGraphQLWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LovGraphQlContent'
    LovGraphQlContent:
      type: object
      properties:
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovFullDto'
    LovHierarchedCriterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        parent:
          type: string
      xml:
        name: lovhiercriterion
    LovLabelDto:
      type: object
      properties:
        language:
          type: string
          enum:
            - XX
            - AR
            - BG
            - BR
            - CH
            - CN
            - CS
            - CY
            - DE
            - DN
            - EL
            - US
            - EN
            - ET
            - FL
            - FN
            - FR
            - GL
            - HR
            - HU
            - IS
            - IT
            - JA
            - KO
            - LT
            - LV
            - MY
            - NL
            - NW
            - PL
            - PT
            - RO
            - RU
            - SK
            - SL
            - SP
            - SR
            - SW
            - TH
            - TR
            - TW
            - UA
            - UK
            - VI
            - ID
            - MX
            - AT
            - WA
            - CA
        value:
          type: string
    LovValueDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        localizedLabel:
          type: string
        order:
          type: integer
          format: int32
    LovWithActivatorsCriterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        activators:
          type: array
          items:
            $ref: '#/components/schemas/Activators'
      xml:
        name: lovactivatorscriterion
    MailDto:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    MailGatewayConfigurationDto:
      type: object
      required:
        - authorizedEmail1
        - srcChannelName
        - srcChannelType
      properties:
        activated:
          type: boolean
          default: false
        authorizedEmail1:
          type: string
        authorizedEmail2:
          type: string
        authorizedEmail3:
          type: string
        useSequentialCreation1:
          type: boolean
          default: false
        useSequentialCreation2:
          type: boolean
          default: false
        useSequentialCreation3:
          type: boolean
          default: false
        srcChannelName:
          type: string
        srcChannelType:
          type: string
        privacy:
          type: string
        folder:
          $ref: '#/components/schemas/CandidatePoolDto'
        linkToPersonalFolder:
          type: boolean
          default: false
        redirectionEmail:
          type: string
    MeetingLocationDto:
      type: object
      required:
        - id
      properties:
        title:
          type: string
        id:
          type: integer
          format: int64
    MidPeriodConfigBasicDto:
      type: object
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
        timesheetConfig:
          $ref: '#/components/schemas/TimesheetConfigBasicDto'
        rates:
          type: array
          items:
            $ref: '#/components/schemas/RateDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/BasicLovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/BasicFreeFormFieldDto'
        withTsTriggers:
          type: boolean
          default: false
        withRates:
          type: boolean
          default: false
        withApprovals:
          type: boolean
          default: false
    MidPeriodConfigDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
        timesheetConfig:
          $ref: '#/components/schemas/TimesheetConfigDto'
        rates:
          type: array
          items:
            $ref: '#/components/schemas/MidPeriodRateDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldDto'
    MidPeriodRateDto:
      type: object
      required:
        - order
        - rateUnit
      properties:
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
        payRate:
          type: number
        supplierRate:
          type: number
        chargeRate:
          type: number
        paySupplier:
          type: number
        supplierCharge:
          type: number
        overAll:
          type: number
        rateType:
          type: string
        rateUnit:
          type: string
        customRates:
          type: array
          items:
            $ref: '#/components/schemas/CustomRateDto'
        formulaSetId:
          type: integer
          format: int64
        comment:
          type: string
    NamedAccessRolesDto:
      type: object
      required:
        - roleInRequisitionId
        - roleToReceiveCandidateId
      properties:
        roleInRequisitionId:
          type: integer
          format: int64
        roleToReceiveCandidateId:
          type: integer
          format: int64
    NavigationDto:
      type: object
      properties:
        applicationProcessUrl:
          type: string
        descriptionUrl:
          type: string
    NewDepartmentParentIdDto:
      type: object
      required:
        - newParentId
      properties:
        newParentId:
          type: integer
          format: int64
    NewOpeningNameDto:
      type: object
      properties:
        newOpeningName:
          type: string
    OfferTermsDto:
      type: object
      properties:
        standardFields:
          type: array
          items:
            $ref: '#/components/schemas/StandardFieldDto'
        configurableLovs:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurableLovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldTriggerDto'
    OpeningActionsDto:
      type: object
      properties:
        copy:
          $ref: '#/components/schemas/ActionDto'
        update:
          $ref: '#/components/schemas/ActionDto'
        attachDocument:
          $ref: '#/components/schemas/ActionDto'
    OpeningBasicDto:
      type: object
      required:
        - contractType
        - organization
      properties:
        jobTitle:
          type: string
        headCount:
          type: integer
          format: int64
        dueDate:
          type: integer
          format: int64
        company:
          type: string
        location:
          $ref: '#/components/schemas/SimpleLocationDto'
        language:
          type: string
        status:
          type: string
        compensation:
          $ref: '#/components/schemas/CompensationDto'
        contractType:
          type: string
        workTime:
          $ref: '#/components/schemas/WorkTimeDto'
        requisitionNumber:
          type: string
        duration:
          $ref: '#/components/schemas/DurationDto'
        expectedContractDates:
          $ref: '#/components/schemas/ExpectedContractDatesDto'
        renewal:
          type: boolean
          default: false
        scheduleType:
          type: string
        contractComments:
          type: string
        authorizedRecruitment:
          $ref: '#/components/schemas/AuthorizedRecruitmentDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDto'
        standardRate:
          $ref: '#/components/schemas/StandardRateDto'
        totalCost:
          $ref: '#/components/schemas/TotalCostDto'
        generalApplication:
          type: boolean
          default: false
        teamComments:
          type: string
        budgeted:
          type: boolean
          default: false
        encryptApplicants:
          type: boolean
          default: false
        areaOfResponsibility:
          type: string
        positionType:
          type: string
        costCenter:
          type: string
        plainText:
          type: boolean
          default: false
        configurableFields:
          $ref: '#/components/schemas/ConfigurableFieldsBasicDto'
        organization:
          $ref: '#/components/schemas/DepartmentIdDto'
        team:
          $ref: '#/components/schemas/PositionTeamBasicDto'
        descriptionTemplateId:
          $ref: '#/components/schemas/IdDto'
        defaultJobLocationId:
          type: integer
          format: int64
        jobLocationIds:
          type: array
          items:
            type: integer
            format: int64
        customFieldSkills:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldSkillDto'
        removedSkills:
          type: array
          items:
            type: string
        manuallyAddedSkills:
          type: array
          items:
            $ref: '#/components/schemas/SkillDto'
    OpeningDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        jobNumber:
          type: string
        jobTitle:
          type: string
        firstLevelDeptId:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
    OpeningFullDto:
      type: object
      required:
        - contractType
      properties:
        jobTitle:
          type: string
        headCount:
          type: integer
          format: int64
        dueDate:
          type: integer
          format: int64
        company:
          type: string
        location:
          $ref: '#/components/schemas/SimpleLocationDto'
        language:
          type: string
        status:
          type: string
        compensation:
          $ref: '#/components/schemas/CompensationDto'
        contractType:
          type: string
        workTime:
          $ref: '#/components/schemas/WorkTimeDto'
        requisitionNumber:
          type: string
        duration:
          $ref: '#/components/schemas/DurationDto'
        expectedContractDates:
          $ref: '#/components/schemas/ExpectedContractDatesDto'
        renewal:
          type: boolean
          default: false
        scheduleType:
          type: string
        contractComments:
          type: string
        authorizedRecruitment:
          $ref: '#/components/schemas/AuthorizedRecruitmentDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldDto'
        standardRate:
          $ref: '#/components/schemas/StandardRateDto'
        totalCost:
          $ref: '#/components/schemas/TotalCostDto'
        generalApplication:
          type: boolean
          default: false
        teamComments:
          type: string
        budgeted:
          type: boolean
          default: false
        encryptApplicants:
          type: boolean
          default: false
        areaOfResponsibility:
          type: string
        positionType:
          type: string
        costCenter:
          type: string
        plainText:
          type: boolean
          default: false
        id:
          type: integer
          format: int64
        jobNumber:
          type: string
        jobLocations:
          type: array
          items:
            $ref: '#/components/schemas/LocationDto'
        defaultJobLocation:
          $ref: '#/components/schemas/LocationDto'
        configurableFields:
          $ref: '#/components/schemas/ConfigurableFieldsFullDto'
        organization:
          $ref: '#/components/schemas/DepartmentDto'
        descriptionTemplate:
          $ref: '#/components/schemas/JobAdTemplateDto'
        team:
          $ref: '#/components/schemas/PositionTeamFullDto'
        actions:
          $ref: '#/components/schemas/OpeningActionsDto'
        scheduleTypeDetails:
          $ref: '#/components/schemas/ScheduleTypeDetailsDto'
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        skills:
          type: array
          items:
            $ref: '#/components/schemas/OpeningSkillDto'
        department:
          $ref: '#/components/schemas/DepartmentDto'
    OpeningGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    OpeningSkillDto:
      type: object
      properties:
        skillId:
          type: string
        manuallyAdded:
          type: boolean
          default: false
        translations:
          $ref: '#/components/schemas/TranslationsDto'
    OperationResultDto:
      type: object
      properties:
        success:
          type: boolean
          default: false
        details:
          type: string
    OrganizationCriterion:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
        level:
          type: integer
          format: int64
        subOrganizations:
          type: array
          xml:
            name: organization
            wrapped: true
          items:
            $ref: '#/components/schemas/OrganizationCriterion'
      xml:
        name: organizationcriterion
    PanelConfigDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        minMembers:
          type: integer
          format: int32
        maxMembers:
          type: integer
          format: int32
        minReqFeedback:
          type: integer
          format: int32
        members:
          $ref: '#/components/schemas/UserGroupDto'
        panelFeedback:
          $ref: '#/components/schemas/FormDto'
        communicationTemplate:
          $ref: '#/components/schemas/MailDto'
        allowMembersSeeRatings:
          type: boolean
          default: false
        referenceCheck:
          type: boolean
          default: false
        sendNotificationToStepOwner:
          type: boolean
          default: false
    ParticipantDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        participantStatus:
          type: string
          enum:
            - Cancel
            - Confirm
            - Decline
            - Deleted
            - Invited
            - Pending
        creationDate:
          type: integer
          format: int64
        confirmationDate:
          type: integer
          format: int64
        account:
          $ref: '#/components/schemas/AccountDto'
        updateDate:
          type: integer
          format: int64
        appSelectionTask:
          $ref: '#/components/schemas/SelectionTaskFullDto'
        templates:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantTemplateDto'
        interviewdates:
          $ref: '#/components/schemas/InterviewDatesDto'
        interview:
          $ref: '#/components/schemas/InterviewDto'
        getiCalUUID:
          type: string
        required:
          type: boolean
          default: false
        responseStatus:
          type: string
          enum:
            - NOT_RESPONDED
            - TENTATIVELY_ACCEPTED
            - ACCEPTED
            - DECLINED
            - FAILURE
            - NOT_APPLICABLE
        sendInvitation:
          type: boolean
          default: false
        responseMessage:
          type: string
        proposedMeetingStart:
          type: integer
          format: int64
        proposedMeetingEnd:
          type: integer
          format: int64
        leadInterviewer:
          type: boolean
          default: false
    ParticipantTemplateDto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ParticipantTemplateKeyDto'
    ParticipantTemplateKeyDto:
      type: object
      properties:
        participantId:
          type: integer
          format: int64
        mail:
          $ref: '#/components/schemas/MailDto'
        type:
          type: string
          enum:
            - CandCancel
            - CandConfirm
            - CandInvite
            - UserCancel
            - UserConfirm
    PasswordBoRuleDto:
      type: object
      properties:
        userHasToChangePassword:
          type: boolean
          default: false
        blockLoginAfterAttempts:
          type: integer
          format: int64
        blockLoginDays:
          type: integer
          format: int64
        passwordExpire:
          type: integer
          format: int64
        passwordMinimumLength:
          type: integer
          format: int64
        passwordMixedCase:
          type: boolean
          default: false
        passwordNumbers:
          type: boolean
          default: false
        passwordSpecialCharacters:
          type: boolean
          default: false
        passwordDifferentLast:
          type: integer
          format: int64
        passwordDifferentThanPersonalAttributes:
          type: boolean
          default: false
        passwordReminder:
          type: integer
          format: int64
        disablePossToChangePasswordAU:
          type: boolean
          default: false
        disablePossToChangeSecurityQuestionAndAnswerAU:
          type: boolean
          default: false
        disablePossToChangePasswordMSS:
          type: boolean
          default: false
        disablePossToChangeSecurityQuestionAndAnswerMSS:
          type: boolean
          default: false
        doNotAllowStoreCompanyName:
          type: boolean
          default: false
        doNotAllowStoreLogin:
          type: boolean
          default: false
    PasswordFoRuleDto:
      type: object
      properties:
        secured:
          type: boolean
          default: false
        blockLoginAfterAttempts:
          type: integer
          format: int64
        blockLoginDays:
          type: integer
          format: int64
        passwordExpire:
          type: integer
          format: int64
        passwordMinimumLength:
          type: integer
          format: int64
        passwordMixedCase:
          type: boolean
          default: false
        passwordNumbers:
          type: boolean
          default: false
        passwordSpecialCharacters:
          type: boolean
          default: false
        passwordDifferentLast:
          type: integer
          format: int64
        passwordDifferentThanPersonalAttributes:
          type: boolean
          default: false
        displayRules:
          type: boolean
          default: false
    PasswordRuleDto:
      type: object
      properties:
        backOffice:
          $ref: '#/components/schemas/PasswordBoRuleDto'
        frontOffice:
          $ref: '#/components/schemas/PasswordFoRuleDto'
    PasswordRuleGraphQlContent:
      type: object
      properties:
        passwordRule:
          type: array
          items:
            $ref: '#/components/schemas/PasswordRuleDto'
    PasswordRuleGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PasswordRuleGraphQlContent'
    PermanentDetailsDto:
      type: object
      required:
        - fixedCurrency
        - fixedSalary
        - fixedSalaryPeriod
      properties:
        fixedSalary:
          type: number
        variableSalary:
          type: number
        relocation:
          type: number
        probationaryPeriod:
          type: string
        carAllowance:
          type: boolean
          default: false
        memo:
          type: string
        fixedCurrency:
          type: string
        fixedSalaryPeriod:
          type: string
        relocationCurrency:
          type: string
        variableSalaryCurrency:
          type: string
        variableSalaryPeriod:
          type: string
    PersonalDataDto:
      type: object
      properties:
        dateOfBirth:
          type: integer
          format: int64
        numberOfChildren:
          type: integer
          format: int32
        citizenship:
          type: string
        language:
          type: string
        maritalStatus:
          type: string
        sex:
          type: string
    PersonalJobTemplateBasicDto:
      type: object
      required:
        - organization
        - recruitmentContext
      properties:
        creationDate:
          type: integer
          format: int64
        lastUpdate:
          type: integer
          format: int64
        requisitionNumber:
          type: string
        dueDate:
          type: integer
          format: int64
        company:
          type: string
        headCount:
          type: integer
          format: int64
        renewal:
          type: boolean
          default: false
        contractComments:
          type: string
        scheduleType:
          type: string
        contractType:
          type: string
        recruitmentContext:
          type: string
          enum:
            - Permanent
            - Contractor
        workTime:
          $ref: '#/components/schemas/WorkTimeDto'
        location:
          $ref: '#/components/schemas/SimpleLocationDto'
        compensation:
          $ref: '#/components/schemas/CompensationDto'
        authorizedRecruitment:
          $ref: '#/components/schemas/AuthorizedRecruitmentDto'
        duration:
          $ref: '#/components/schemas/DurationDto'
        configurableFields:
          $ref: '#/components/schemas/ConfigurableFieldsBasicDto'
        organization:
          $ref: '#/components/schemas/DepartmentIdDto'
        team:
          $ref: '#/components/schemas/PositionTeamBasicDto'
    PersonalJobTemplateFullDto:
      type: object
      required:
        - recruitmentContext
      properties:
        creationDate:
          type: integer
          format: int64
        lastUpdate:
          type: integer
          format: int64
        requisitionNumber:
          type: string
        dueDate:
          type: integer
          format: int64
        company:
          type: string
        headCount:
          type: integer
          format: int64
        renewal:
          type: boolean
          default: false
        contractComments:
          type: string
        scheduleType:
          type: string
        contractType:
          type: string
        recruitmentContext:
          type: string
          enum:
            - Permanent
            - Contractor
        workTime:
          $ref: '#/components/schemas/WorkTimeDto'
        location:
          $ref: '#/components/schemas/SimpleLocationDto'
        compensation:
          $ref: '#/components/schemas/CompensationDto'
        authorizedRecruitment:
          $ref: '#/components/schemas/AuthorizedRecruitmentDto'
        duration:
          $ref: '#/components/schemas/DurationDto'
        id:
          type: integer
          format: int64
        organization:
          $ref: '#/components/schemas/DepartmentDto'
        team:
          $ref: '#/components/schemas/PositionTeamFullDto'
        configurableFields:
          $ref: '#/components/schemas/ConfigurableFieldsFullDto'
        department:
          $ref: '#/components/schemas/DepartmentDto'
    PositionDto:
      type: object
      properties:
        company:
          type: string
        companyStartDate:
          type: integer
          format: int64
        position:
          type: string
        positionStartDate:
          type: integer
          format: int64
        positionEndDate:
          type: integer
          format: int64
        managerName:
          type: string
        employeeCode:
          type: string
        compensation:
          type: string
        location:
          type: string
    PositionGraphQlContent:
      type: object
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/OpeningFullDto'
        actions:
          $ref: '#/components/schemas/OpeningGlobalActionsDto'
    PositionGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PositionGraphQlContent'
    PositionTeamBasicDto:
      type: object
      properties:
        recruiters:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberBasicDto'
        operationals:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberBasicDto'
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/ApproverBasicDto'
    PositionTeamFullDto:
      type: object
      properties:
        recruiters:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberFullDto'
        operationals:
          type: array
          items:
            $ref: '#/components/schemas/TeamMemberFullDto'
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/ApproverFullDto'
    PostingStatusUpdateDTO:
      type: object
      required:
        - adverts
      properties:
        adverts:
          type: array
          xml:
            name: job
            wrapped: true
          items:
            $ref: '#/components/schemas/JobDTO'
      xml:
        name: postingStatusUpdate
    PostingUserDto:
      type: object
      properties:
        email:
          type: string
    ProceedCandidateRequestDto:
      type: object
      properties:
        stepId:
          type: integer
          format: int64
    ProcessDefinitionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        creationDate:
          type: integer
          format: int64
        processCategory:
          type: string
          enum:
            - CompetencyManagement
            - DevelopmentActivities
            - SuccessionPlanning
            - PerformanceManagement
            - CareerPlanning
            - AbsenceManagement
            - Onboarding
            - LearningBundle
            - Course
            - RecruitmentActivity
            - TimeSheetApproval
    ProcessInstanceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        processDefinition:
          $ref: '#/components/schemas/ProcessDefinitionDto'
        status:
          type: string
          enum:
            - STARTED
            - COMPLETE
            - CANCELLED
        creationDate:
          type: integer
          format: int64
        state:
          $ref: '#/components/schemas/StateDto'
        suspended:
          type: boolean
          default: false
    PublishedAdvertDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
        endDate:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        postingStartDate:
          type: integer
          format: int64
        postingEndDate:
          type: integer
          format: int64
        postingUser:
          $ref: '#/components/schemas/PostingUserDto'
        navigation:
          $ref: '#/components/schemas/NavigationDto'
        jobboardConfiguration:
          $ref: '#/components/schemas/JobboardConfigurationDto'
        advertId:
          type: integer
          format: int64
        jobAdTitle:
          type: string
        comment:
          type: string
        recruitingCompany:
          type: string
        location:
          type: string
        showCompensation:
          type: boolean
          default: false
        showRecruiter:
          type: boolean
          default: false
        keyword:
          type: string
        language:
          type: string
        advertCreationDate:
          type: integer
          format: int64
        expirationDate:
          type: integer
          format: int64
        advertUpdateDate:
          type: integer
          format: int64
        imageAssignment:
          type: array
          items:
            $ref: '#/components/schemas/ImageAssignmentDto'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentsDto'
        strapline:
          type: string
        opening:
          $ref: '#/components/schemas/OpeningFullDto'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/AdvertCustomFieldDto'
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
        freeFormFields:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldDto'
        actions:
          $ref: '#/components/schemas/AdvertActionsDto'
        jobLocations:
          type: array
          items:
            $ref: '#/components/schemas/LocationDto'
        defaultJobLocation:
          $ref: '#/components/schemas/LocationDto'
        technicalId:
          type: string
        structuredData:
          $ref: '#/components/schemas/StructuredDataDto'
        applicationProcess:
          type: object
        categories:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/CategoryDto'
    PublishedAdvertGraphQlContent:
      type: object
      properties:
        publishedAdverts:
          type: array
          items:
            $ref: '#/components/schemas/PublishedAdvertDto'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionDto'
    PublishedAdvertGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PublishedAdvertGraphQlContent'
    QuestionAnsweredDto:
      type: object
      properties:
        assignedQuestionId:
          type: integer
          format: int64
        questionId:
          type: integer
          format: int64
        answerValue:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/IdDto'
        index:
          type: integer
          format: int32
        childQuestions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnsweredDto'
    QuestionCompetencyCategoryDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        nameLabel:
          type: string
        descriptionLabel:
          type: string
        children:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/QuestionCompetencyCategoryDto'
    QuestionLayoutDto:
      type: object
      properties:
        description:
          type: string
        answerInline:
          type: string
        answerSize:
          type: integer
          format: int32
        indentation:
          type: string
        fontFamily:
          type: string
        fontSize:
          type: string
        fontWeight:
          type: string
        presentation:
          type: string
        questionInline:
          type: string
        textDecoration:
          type: string
        pleaseSelect:
          type: boolean
          default: false
        fontStyle:
          type: string
        fontColor:
          type: string
        imageWidth:
          type: integer
          format: int32
        imageHeight:
          type: integer
          format: int32
        hasTitle:
          type: boolean
          default: false
        documentSecurity:
          type: string
    QueueActionSettingsDto:
      type: object
      properties:
        settings:
          $ref: '#/components/schemas/JSONObject'
    QueueAssignmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        objectId:
          type: integer
          format: int64
        queue:
          $ref: '#/components/schemas/TlkQueueDto'
        objectType:
          type: string
          enum:
            - CANDIDATE_ELEMENT
            - APPLICATION_ELEMENT
            - APPLICATION_SELECTION_TASK
            - OPENING_ELEMENT
            - CONTRACT_ELEMENT
            - TIMESHEET_ELEMENT
            - EXTERNAL_SYSTEM_REQUEST_ELEMENT
            - POSTING
            - ARCHIVED_OR_REMOVED_CANDIDATE
            - USER
        createdOn:
          type: integer
          format: int64
        createdBy:
          $ref: '#/components/schemas/UserDto'
    QueueAssignmentHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        objectId:
          type: integer
          format: int64
        queue:
          $ref: '#/components/schemas/TlkQueueDto'
        objectType:
          type: string
          enum:
            - CANDIDATE_ELEMENT
            - APPLICATION_ELEMENT
            - APPLICATION_SELECTION_TASK
            - OPENING_ELEMENT
            - CONTRACT_ELEMENT
            - TIMESHEET_ELEMENT
            - EXTERNAL_SYSTEM_REQUEST_ELEMENT
            - POSTING
            - ARCHIVED_OR_REMOVED_CANDIDATE
            - USER
        historyType:
          type: string
          enum:
            - Creation
            - Deletion
        createdOn:
          type: integer
          format: int64
        createdBy:
          $ref: '#/components/schemas/UserDto'
    QueueDto:
      type: object
      properties:
        name:
          type: string
        elementsCount:
          type: integer
          format: int64
    QueuedApplicationDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        id:
          type: integer
          format: int64
        memo:
          type: string
        srcChannelName:
          type: string
        creation:
          type: integer
          format: int64
        update:
          type: integer
          format: int64
        applicationDate:
          type: integer
          format: int64
        shortListed:
          type: boolean
          default: false
        archived:
          type: boolean
          default: false
        activeApplication:
          type: boolean
          default: false
        hasContracts:
          type: boolean
          default: false
        positionId:
          type: integer
          format: int64
        candidateId:
          type: integer
          format: int64
        completionReason:
          type: string
        srcChannelType:
          type: string
        srcMedium:
          type: string
        status:
          type: string
        statusComment:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentBaseDto'
        applicationFollowup:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationFollowupDto'
        candidateConsents:
          type: array
          items:
            $ref: '#/components/schemas/CandidateConsentDto'
        email:
          type: string
        fullName:
          type: string
    QueuedArchivedApplicationDto:
      type: object
      properties:
        candidateId:
          type: integer
          format: int64
    QueuedContractDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        contractId:
          type: integer
          format: int64
        candidateId:
          type: integer
          format: int64
        applicationId:
          type: integer
          format: int64
    QueuedExternalSystemRequestDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        candidateId:
          type: integer
          format: int64
        candidateType:
          type: string
        candidateStatus:
          $ref: '#/components/schemas/SimpleLovDto'
        tlkRequestId:
          type: string
        externalServiceId:
          type: string
        externalClientId:
          type: string
        additionalParameters:
          type: object
          additionalProperties:
            type: string
        untranslatedAdditionalParameters:
          type: object
          additionalProperties:
            type: string
        submitUserId:
          type: integer
          format: int64
        queueElementId:
          type: integer
          format: int64
        applicationId:
          type: integer
          format: int64
    QueuedPositionDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        openingID:
          type: integer
          format: int64
        departmentID:
          type: integer
          format: int64
        jobStatus:
          type: string
    QueuedPostingTargetDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        id:
          type: integer
          format: int64
        advertName:
          type: string
    QueuedSelectionStepDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        selectionStepId:
          type: integer
          format: int64
        selectionStepName:
          type: string
        applicationId:
          type: integer
          format: int64
    QueuedTimesheetDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        timesheetId:
          type: integer
          format: int64
        applicationId:
          type: integer
          format: int64
        candidateId:
          type: integer
          format: int64
        candidateName:
          type: string
    QueuedUserDto:
      type: object
      properties:
        idInQueue:
          type: integer
          format: int64
        queueName:
          type: string
        id:
          type: integer
          format: int64
        login:
          type: string
        fullName:
          type: string
        language:
          type: string
        currency:
          type: string
        timeZone:
          type: string
        archived:
          type: boolean
          default: false
        invalidEmail:
          type: boolean
          default: false
        mss:
          type: boolean
          default: false
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        preferredCommunicationChannel:
          type: string
        displayTimeAlerts:
          type: integer
          format: int64
        quickSearch:
          type: string
        taskDelivery:
          type: string
        updateUserId:
          type: integer
          format: int64
        creationUserId:
          type: integer
          format: int64
        preferredChannel:
          type: string
        mailBounced:
          type: boolean
          default: false
    QueuesDto:
      type: object
      properties:
        queues:
          type: array
          items:
            $ref: '#/components/schemas/QueueDto'
    RateDto:
      type: object
      required:
        - order
        - rateUnit
      properties:
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
        payRate:
          type: number
        supplierRate:
          type: number
        chargeRate:
          type: number
        paySupplier:
          type: number
        supplierCharge:
          type: number
        overAll:
          type: number
        rateType:
          type: string
        rateUnit:
          type: string
        customRates:
          type: array
          items:
            $ref: '#/components/schemas/CustomRateDto'
        formulaSetId:
          type: integer
          format: int64
        comment:
          type: string
    RateFormulaSetDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        translations:
          $ref: '#/components/schemas/TranslationsDto'
        formulas:
          type: array
          items:
            $ref: '#/components/schemas/FormulaDto'
        assignment:
          type: string
          enum:
            - Department
            - Corporate
        departments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentDto'
        active:
          type: boolean
          default: false
        contractType:
          type: string
          enum:
            - Direct
            - ThirdParty
    RateFormulaSetGraphQlContent:
      type: object
      properties:
        ratesFormulas:
          type: array
          items:
            $ref: '#/components/schemas/RateFormulaSetDto'
    RateFormulaSetGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RateFormulaSetGraphQlContent'
    RateUnitRequestDto:
      type: object
      properties:
        value:
          type: string
        order:
          type: string
        comment:
          type: string
    ReferenceDto:
      type: object
      properties:
        employeeCode:
          type: string
        company:
          type: string
        email:
          type: string
        referredFrom:
          type: string
    ReferralApplicationDto:
      type: object
      properties:
        pk:
          $ref: '#/components/schemas/ReferralApplicationPK'
        referralProgram:
          $ref: '#/components/schemas/ReferralProgramDto'
        referralFee:
          $ref: '#/components/schemas/ReferralFeeDto'
        creatorType:
          type: string
        trialPeriodStart:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
    ReferralApplicationPK:
      type: object
      properties:
        referral:
          $ref: '#/components/schemas/ReferralDto'
        application:
          $ref: '#/components/schemas/ApplicationDto'
    ReferralDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        referralType:
          type: string
        referralConfirmation:
          type: string
        referrer:
          $ref: '#/components/schemas/ReferrerDto'
        referralApplications:
          type: array
          items:
            $ref: '#/components/schemas/ReferralApplicationDto'
        valid:
          type: boolean
          default: false
        validityDate:
          type: integer
          format: int64
        introductionText:
          type: string
        creatorType:
          type: string
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
    ReferralFeeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        feeValue:
          type: number
          format: double
        reward:
          type: string
        rewardValue:
          type: number
          format: double
        creationDate:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int32
    ReferralProgramDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
        programName:
          type: string
        trialPeriod:
          type: integer
          format: int32
        validityPeriod:
          type: integer
          format: int32
        active:
          type: boolean
          default: false
        allowSelfReferrals:
          type: boolean
          default: false
        forInternalReferrals:
          type: boolean
          default: false
        forExternalReferrals:
          type: boolean
          default: false
        defaultProgram:
          type: boolean
          default: false
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
    ReferrerDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        employeeCode:
          type: string
        employeeCompany:
          type: string
    RejectCandidateRequestDto:
      type: object
      properties:
        stepId:
          type: integer
          format: int64
        sendCommunication:
          type: boolean
          default: false
        reasonOfRejection:
          type: string
        comment:
          type: string
        delayForTheEmail:
          type: integer
          format: int32
    ReportDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        fileName:
          type: string
        docType:
          type: string
          enum:
            - BO_CP
            - BO_CPE
            - BO_CPI
            - BO_CPEC
            - BO_CPIC
            - FO_CP
            - FO_PIF
            - FO_RPM
            - FO_CNT
            - BEST_PIF
            - PROFILE
            - R
            - RESUME
            - CL
            - COVER_LETTER
            - COVERLETTER
            - DQ
            - I
            - IATTACHMENT
            - Q
            - MAIL
            - SEARCH
            - AGENCY_CONTRACT
            - DOCUMENT_PACK
            - EXPENSE
            - EXTSYSATTACHMENT
            - PHOTO
            - PORTRAIT
            - THUMBNAIL
            - OFFER_LETTER
            - OTHER
            - DOCUSIGN_PACKAGE
            - BGCK_REP
            - LINKEDIN_INMAIL
            - SMS
            - RESPONSE_EMAILS
            - TRACKED_MAIL
            - SB_ATTACHMENT
            - HIRINGFORM
            - MAILTRACK
        docLanguage:
          type: string
        base64Data:
          type: string
        size:
          type: integer
          format: int64
        author:
          type: string
        creationDate:
          type: integer
          format: int64
        docId:
          type: integer
          format: int64
        publishable:
          type: boolean
          default: false
    RightDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - DEPARTMENT
            - ACCOUNT
        label:
          type: string
        domain:
          type: string
        origin:
          type: string
          enum:
            - TALENT_ACQUISITION
            - TALENT_MANAGEMENT
            - UNSPECIFIED
        employeeRelated:
          type: boolean
          default: false
    RoleAssignmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        department:
          $ref: '#/components/schemas/DepartmentDto'
        role:
          $ref: '#/components/schemas/RoleDto'
        beginDate:
          type: integer
          format: int64
        expirationDate:
          type: integer
          format: int64
    RoleAssignmentsDto:
      type: object
      required:
        - roleAssignments
      properties:
        roleAssignments:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignmentDto'
    RoleDeletionDto:
      type: object
      properties:
        accountRoles:
          $ref: '#/components/schemas/AccountRoleDto'
        departmentRoles:
          $ref: '#/components/schemas/DepartmentRoleDto'
    RoleDepartmentDeletionDto:
      type: object
      required:
        - includeAll
      properties:
        includeAll:
          type: boolean
          default: false
        departmentIds:
          type: array
          items:
            type: integer
            format: int64
    RoleDto:
      type: object
      properties:
        tags:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TagDto'
        id:
          type: integer
          format: int64
        roleClass:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
            - DEPARTMENT
            - ACCOUNT
        updateDate:
          type: integer
          format: int64
        rights:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RightDto'
        organisationVisibility:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DepartmentDto'
    RoleGraphQlContent:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
    RoleGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RoleGraphQlContent'
    RoleTagDto:
      type: object
      required:
        - tagName
        - tagTypeName
      properties:
        tagName:
          type: string
        tagTypeName:
          type: string
    RoleTagsDto:
      type: object
      required:
        - roleTags
      properties:
        roleTags:
          type: array
          items:
            $ref: '#/components/schemas/RoleTagDto'
    ScheduleTypeDetailsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        translations:
          $ref: '#/components/schemas/TranslationsDto'
    ScreeningDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bgCheck:
          $ref: '#/components/schemas/BackgroundCheckDto'
        userCreated:
          $ref: '#/components/schemas/UserDto'
        createDate:
          type: integer
          format: int64
        validFromDate:
          type: integer
          format: int64
        validToDate:
          type: integer
          format: int64
        externalSystemId:
          type: integer
          format: int64
        name:
          type: string
        externalCode:
          type: string
        screeningType:
          type: string
        responseHrxmlData:
          type: string
        updateDate:
          type: integer
          format: int64
        userUpdated:
          $ref: '#/components/schemas/UserDto'
        orderStatus:
          type: string
        resultStatus:
          type: string
    SearchAgentDto:
      type: object
      required:
        - deliveryFrequency
        - email
        - expirationDate
        - langCode
        - searchCriteria
        - sendEmail
      properties:
        email:
          type: string
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteriaDto'
        deliveryFrequency:
          type: string
          enum:
            - ONCE_A_DAY
            - ONCE_A_WEEK
        expirationDate:
          type: integer
          format: int64
        sendEmail:
          type: boolean
          default: false
        langCode:
          type: string
          enum:
            - XX
            - AR
            - BG
            - BR
            - CH
            - CN
            - CS
            - CY
            - DE
            - DN
            - EL
            - US
            - EN
            - ET
            - FL
            - FN
            - FR
            - GL
            - HR
            - HU
            - IS
            - IT
            - JA
            - KO
            - LT
            - LV
            - MY
            - NL
            - NW
            - PL
            - PT
            - RO
            - RU
            - SK
            - SL
            - SP
            - SR
            - SW
            - TH
            - TR
            - TW
            - UA
            - UK
            - VI
            - ID
            - MX
            - AT
            - WA
            - CA
    SearchAgentGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    SearchAgentGraphQlContent:
      type: object
      properties:
        searchAgents:
          type: array
          items:
            $ref: '#/components/schemas/SearchAgentDto'
        actions:
          $ref: '#/components/schemas/SearchAgentGlobalActionsDto'
    SearchAgentGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SearchAgentGraphQlContent'
    SearchCriteriaDto:
      type: object
      properties:
        generalApplication:
          type: boolean
          default: false
        postedSince:
          type: integer
          format: int32
        jobNumber:
          type: string
        adLanguages:
          type: array
          items:
            type: string
        countries:
          type: array
          items:
            type: integer
            format: int64
        regions:
          type: array
          items:
            type: integer
            format: int64
        contractTypes:
          type: array
          items:
            type: integer
            format: int64
        scheduleTypes:
          type: array
          items:
            type: integer
            format: int64
        customLovs:
          type: array
          items:
            $ref: '#/components/schemas/CustomLovGroup'
        keywords:
          type: string
        categoryLists:
          type: array
          items:
            $ref: '#/components/schemas/CategoryNameDto'
        organizationIds:
          type: array
          items:
            type: integer
            format: int64
        countriesToBeFilltered:
          type: array
          items:
            type: string
        showImages:
          type: boolean
          default: false
    SelectionProcessModelDto:
      type: object
      properties:
        description:
          type: string
        version:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        name:
          type: string
        mandatory:
          type: boolean
          default: false
        get_strictEnforcement:
          type: boolean
          default: false
        get_current:
          type: boolean
          default: false
        get_markedPrivate:
          type: boolean
          default: false
        get_archived:
          type: boolean
          default: false
        get_validated:
          type: boolean
          default: false
        queue:
          $ref: '#/components/schemas/TlkQueueDto'
        department:
          $ref: '#/components/schemas/DepartmentDto'
        account:
          $ref: '#/components/schemas/AccountDto'
        shortListCandidate:
          type: boolean
          default: false
        comment:
          type: string
        parent:
          $ref: '#/components/schemas/SelectionProcessModelDto'
        tasks:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SelectionTaskFullDto'
    SelectionStepStatusUpdateDto:
      type: object
      required:
        - stepStatus
      properties:
        stepStatus:
          description: New status
          type: string
          enum:
            - Cancel
            - Closed
            - InterviewToSchedule
            - OnHold
    SelectionTaskFullDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        stepType:
          type: string
        action:
          type: string
        category:
          type: string
        duration:
          type: integer
          format: int32
        schedulingDuration:
          type: integer
          format: int32
        order:
          type: integer
          format: int32
        updateable:
          type: boolean
          default: false
        requestHiring:
          type: boolean
          default: false
        shareable:
          type: boolean
          default: false
        shareStartedStep:
          type: boolean
          default: false
        sharedValidityPeriod:
          type: integer
          format: int32
        adHoc:
          type: boolean
          default: false
        enabled:
          type: boolean
          default: false
        decryptCandidate:
          type: boolean
          default: false
        showApplicationCommentInReviewApps:
          type: boolean
          default: false
        form:
          $ref: '#/components/schemas/FormDto'
        mail:
          $ref: '#/components/schemas/MailDto'
        mail2:
          $ref: '#/components/schemas/MailDto'
        keyName:
          $ref: '#/components/schemas/KeyNameDto'
        assessmentTest:
          $ref: '#/components/schemas/AssessmentTestDto'
        expectedTaskOutput:
          type: string
        coordinatorType:
          type: string
        coordinator:
          $ref: '#/components/schemas/UserDto'
        owner:
          $ref: '#/components/schemas/UserDto'
        ownerType:
          type: string
        emailStepOwner:
          type: string
        feedbackFailScore:
          type: integer
          format: int32
        feedbackPassScore:
          type: integer
          format: int32
        dayDelay:
          type: integer
          format: int32
        statusComment:
          type: string
        applicationMemo:
          type: string
        sessionCategory:
          $ref: '#/components/schemas/SessionCategoryDto'
        automaticAppReject:
          type: boolean
          default: false
        contactRejectedCand:
          type: boolean
          default: false
        automaticStartNextStep:
          type: boolean
          default: false
        activInterview:
          type: boolean
          default: false
        shortlistCand:
          type: boolean
          default: false
        rejectionMail:
          $ref: '#/components/schemas/MailDto'
        rejectionLetter:
          $ref: '#/components/schemas/MailDto'
        candidateInvitationMail:
          $ref: '#/components/schemas/MailDto'
        candidateCancellationMail:
          $ref: '#/components/schemas/MailDto'
        candidateConfirmationMail:
          $ref: '#/components/schemas/MailDto'
        interviewerCancellationMail:
          $ref: '#/components/schemas/MailDto'
        interviewerConfirmationMail:
          $ref: '#/components/schemas/MailDto'
        rejectOfferNegotiation:
          $ref: '#/components/schemas/MailDto'
        candidateDecisionTemplate:
          $ref: '#/components/schemas/MailDto'
        candidateRequestNegotiationTemplate:
          $ref: '#/components/schemas/MailDto'
        selectionProcess:
          $ref: '#/components/schemas/SelectionProcessModelDto'
        panelConfig:
          $ref: '#/components/schemas/PanelConfigDto'
        account:
          $ref: '#/components/schemas/AccountDto'
        autoSchedTrigger:
          type: string
          enum:
            - BefContractEnd
            - AftOfferAccepted
            - AftAppWithdrawn
            - AftContractStart
            - AftOfferRejected
            - AftContractEnd
        autoScheduleDur:
          type: integer
          format: int64
        taskIgnition:
          type: string
        notifyCandidate:
          type: boolean
          default: false
        taskAttachments:
          type: string
        candidateFeedbackType:
          type: string
        meetingPlace:
          type: string
          enum:
            - Location
            - Phone
            - Online
        attachVCALConfirmation:
          type: boolean
          default: false
        allowOverrideExtSys:
          type: boolean
          default: false
        candidateReviewDocumentTypes:
          type: string
        iseSignatureEnabled:
          type: boolean
          default: false
        closeWhenESignatureEnded:
          type: boolean
          default: false
        saveAllowed:
          type: boolean
          default: false
        ratingAllowed:
          type: string
          enum:
            - Disabled
            - RatingAndComment
            - Rating
        keyNameId:
          type: integer
          format: int64
    SelectionTaskGraphQlContent:
      type: object
      properties:
        selectionTasks:
          type: array
          items:
            $ref: '#/components/schemas/SelectionTaskFullDto'
    SelectionTaskGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SelectionTaskGraphQlContent'
    SelfBookingSlotDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - FREE
            - BUSY
            - CANCELLED
            - DECLINED
        creationUser:
          $ref: '#/components/schemas/UserDto'
        meetingCorrelationId:
          type: string
        location:
          $ref: '#/components/schemas/LocationDto'
        externalMeetingId:
          type: string
        slotResponses:
          type: array
          items:
            $ref: '#/components/schemas/SlotResponseDto'
    SendEventDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
    SendInternalMessageAttachmentDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - ADHOCREPORTRESULT
            - CANDIDATEPROFILE
            - FORM
            - MAIL
            - OPENING
            - REFERRALCONFLICTCANDIDATEPROFILE1
            - REFERRALCONFLICTCANDIDATEPROFILE2
            - SESSIONMANAGEMENT
            - TEMPLATE
            - CANDIDATE_PACK
            - DELETED_CANDIDATE_PACK
            - APPLICANTS_LIST
            - DOCUMENT
            - STRUCTERED_DOCUMENT
        objectId:
          type: integer
          format: int64
    SendInternalMessageRequest:
      type: object
      properties:
        title:
          type: string
        receiverUserId:
          type: integer
          format: int64
        senderUserId:
          type: integer
          format: int64
        sendAsSystem:
          type: boolean
          default: false
        content:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/SendInternalMessageAttachmentDto'
    SessionCategoryDepartmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
    SessionCategoryDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        defaultDuration:
          type: integer
          format: int64
        defaultOrganizer:
          $ref: '#/components/schemas/UserDto'
        defaultSeats:
          type: integer
          format: int32
        defaultLocation:
          $ref: '#/components/schemas/LocationDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        creationDate:
          type: integer
          format: int64
        updateUser:
          $ref: '#/components/schemas/UserDto'
        updateDate:
          type: integer
          format: int64
        mailCancelInter:
          $ref: '#/components/schemas/MailDto'
        mailConfirmInter:
          $ref: '#/components/schemas/MailDto'
        mailCancelStCoord:
          $ref: '#/components/schemas/MailDto'
        account:
          $ref: '#/components/schemas/AccountDto'
        sessionCategoryDepartments:
          type: array
          items:
            $ref: '#/components/schemas/SessionCategoryDepartmentDto'
        checkAvailability:
          type: boolean
          default: false
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/InterviewDto'
        closingUnits:
          type: integer
          format: int32
        unitsType:
          type: string
        selectionTasks:
          type: array
          items:
            $ref: '#/components/schemas/SelectionTaskFullDto'
    SimpleLocationDto:
      type: object
      properties:
        city:
          type: string
        region:
          type: string
        country:
          type: string
    SimpleLovDto:
      type: object
      properties:
        value:
          type: string
          xml:
            attribute: true
    SimpleUserDto:
      type: object
      properties:
        value:
          type: string
        order:
          type: integer
          format: int64
        email:
          type: string
      xml:
        name: simpleuserdto
    SiteDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    SkillDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        global:
          type: boolean
          default: false
        system:
          type: string
    SlotResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        slot:
          $ref: '#/components/schemas/SelfBookingSlotDto'
        participant:
          $ref: '#/components/schemas/ParticipantDto'
        responseDate:
          type: integer
          format: int64
        message:
          type: string
        responseType:
          type: string
          enum:
            - DECLINED
    SourceUserIdDto:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    SourcingChannelDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        technicalId:
          type: string
      xml:
        name: sourcingChannel
    SourcingChannelGraphQlContent:
      type: object
      properties:
        sourcingChannels:
          type: array
          items:
            $ref: '#/components/schemas/SourcingChannelDto'
    SourcingChannelGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/SourcingChannelGraphQlContent'
    SponsoredJobContextDto:
      type: object
      properties:
        maxBudget:
          type: string
        phoneNumber:
          type: string
        maxBudgetValue:
          type: number
          format: double
        sponsoredUserEmail:
          type: string
      xml:
        name: sponsoredJobContext
    StandardFieldDto:
      type: object
      properties:
        lovId:
          type: integer
          format: int64
        name:
          type: string
        translatedName:
          type: string
        defaultValue:
          type: integer
          format: int64
        possibleValues:
          type: object
          additionalProperties:
            type: string
        fatherRef:
          type: string
        active:
          type: boolean
          default: false
        tsTrigger:
          type: boolean
          default: false
    StandardRateDto:
      type: object
      properties:
        minAmount:
          type: number
        maxAmount:
          type: number
        currency:
          type: string
        period:
          type: string
      xml:
        name: standardRate
    StateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        technicalState:
          type: string
          enum:
            - DRAFT
            - CANCELLED
            - COMPLETED
            - FOR_APPROVAL
            - APPROVED
            - REVIEW
            - EVALUATION
            - ARCHIVED
            - DENIED
            - PRE_CHECKING
            - IN_PROCESS
            - REJECTED
            - NOT_STARTED
            - REQUESTED
        processDefinition:
          $ref: '#/components/schemas/ProcessDefinitionDto'
        technicalId:
          type: integer
          format: int32
    StatusCommentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
    StatusCommentResponseDto:
      type: object
      properties:
        statusComments:
          type: array
          items:
            $ref: '#/components/schemas/StatusCommentDto'
    StepDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nextStep:
          $ref: '#/components/schemas/StepDto'
        status:
          type: string
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        stepMembers:
          type: array
          items:
            $ref: '#/components/schemas/StepMemberDto'
    StepMemberDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
        status:
          type: string
        order:
          type: integer
          format: int64
    StructuredDataDto:
      type: object
      properties:
        data:
          type: string
    StructuredDocumentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        score:
          type: integer
          format: int64
        questions:
          type: array
          items:
            $ref: '#/components/schemas/AssignedQuestionDto'
    SubmitReportRequest:
      type: object
      properties:
        requestId:
          type: string
        report:
          $ref: '#/components/schemas/ReportDto'
    SubmitResourceRequest:
      type: object
      properties:
        requestId:
          type: string
        name:
          type: string
        location:
          type: string
          format: url
        value:
          type: string
        sendCandidateEmailWithoutUrl:
          type: boolean
          default: false
    SubmitResultsRequest:
      type: object
      properties:
        requestId:
          type: string
        results:
          $ref: '#/components/schemas/StructuredDocumentDto'
    SubmitStatusRequest:
      type: object
      properties:
        requestId:
          type: string
        status:
          type: string
    TagCategoryDto:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int64
    TagDto:
      type: object
      properties:
        name:
          type: string
        labelKey:
          type: string
        id:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        tagType:
          $ref: '#/components/schemas/TagTypeDto'
    TagTypeDto:
      type: object
      properties:
        name:
          type: string
        labelKey:
          type: string
        id:
          type: integer
          format: int64
        department:
          $ref: '#/components/schemas/DepartmentDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
    TaskNotificationDto:
      type: object
      required:
        - enabled
        - taskTypeName
      properties:
        enabled:
          type: boolean
          default: false
        taskTypeName:
          type: string
          enum:
            - RESUME_REVIEW
            - PANEL_REVIEW
    TeamMemberBasicDto:
      type: object
      required:
        - order
        - user
      properties:
        order:
          type: integer
          format: int32
        lovValue:
          type: string
        user:
          $ref: '#/components/schemas/IdDto'
        userId:
          type: integer
          format: int64
    TeamMemberFullDto:
      type: object
      required:
        - order
      properties:
        order:
          type: integer
          format: int32
        lovValue:
          type: string
        user:
          $ref: '#/components/schemas/UserDto'
    TemporaryAttachmentDto:
      type: object
      properties:
        fileName:
          type: string
        base64EncodedContent:
          type: string
        externalId:
          type: integer
          format: int64
    TestParameterDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        required:
          type: boolean
          default: false
        mergedValue:
          type: string
    ThemeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
    TimeSheetBasicDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
    TimeSheetExpenseDto:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        amount:
          type: number
        category:
          type: string
        currency:
          type: string
        creationUser:
          $ref: '#/components/schemas/UserDto'
        creationDate:
          type: integer
          format: int64
        updateUser:
          $ref: '#/components/schemas/UserDto'
        updateDate:
          type: integer
          format: int64
        attachedFileName:
          type: string
    TimeSheetFullDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        jobTitle:
          type: string
        contract:
          $ref: '#/components/schemas/FullContractDto'
        totalUnit:
          type: number
          format: double
        totalCostUnit:
          type: number
          format: double
        remainingBudget:
          type: number
          format: double
        costCenterTotalBudget:
          type: number
        application:
          $ref: '#/components/schemas/ApplicationDto'
        status:
          type: string
          enum:
            - New
            - Approved
            - Reversal
            - Submitted
            - InProcess
            - Rejected
            - ApprovalInProgress
        reasonOfAdjustment:
          type: string
        purchaseOrder:
          type: string
        comments:
          type: string
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        submitDate:
          type: integer
          format: int64
        approvedDate:
          type: integer
          format: int64
        active:
          type: boolean
          default: false
        type:
          type: string
          enum:
            - Normal
            - DateAdjCorrection
            - RateAdjCorrection
            - DataAdjCorrection
            - TimeAdjCorrection
            - DateAdjReversal
            - RateAdjReversal
            - DataAdjReversal
            - TimeAdjReversal
            - OnlyExpenseContainer
            - CostCenterChanged
            - CostCenterReversal
            - ContractUnacceptedReversal
        parent:
          $ref: '#/components/schemas/TimeSheetFullDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
        updateUser:
          $ref: '#/components/schemas/UserDto'
        approver:
          $ref: '#/components/schemas/UserDto'
        submitter:
          $ref: '#/components/schemas/UserDto'
        assignedApprover:
          $ref: '#/components/schemas/UserDto'
        units:
          type: array
          items:
            $ref: '#/components/schemas/TimeSheetUnitDto'
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/TimeSheetExpenseDto'
        costCenter:
          type: string
        availableApprovers:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        firstStep:
          $ref: '#/components/schemas/StepDto'
        contractStartDate:
          type: integer
          format: int64
        contractEndDate:
          type: integer
          format: int64
        organisationNameLevel2:
          type: string
        agencyName:
          type: string
        expenseAmount:
          type: number
        sourcingChannelType:
          type: string
        sourcingChannelName:
          type: string
    TimeSheetGraphQlContent:
      type: object
      properties:
        timeSheets:
          type: array
          items:
            $ref: '#/components/schemas/TimeSheetFullDto'
    TimeSheetGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TimeSheetGraphQlContent'
    TimeSheetUnitDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int64
        comment:
          type: string
        unit:
          type: number
          format: double
        rate:
          $ref: '#/components/schemas/RateDto'
        creationDate:
          type: integer
          format: int64
        startDate:
          type: integer
          format: int64
        endDate:
          type: integer
          format: int64
    TimeZoneDto:
      type: object
      properties:
        name:
          type: string
    TimeZoneGraphQlContent:
      type: object
      properties:
        timezones:
          type: array
          items:
            $ref: '#/components/schemas/TimeZoneDto'
    TimeZoneGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TimeZoneGraphQlContent'
    TimesheetApprovalStepBasicDto:
      type: object
      properties:
        stepNumber:
          type: integer
          format: int64
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApproverBasicDto'
    TimesheetApprovalStepDto:
      type: object
      properties:
        stepNumber:
          type: integer
          format: int64
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApproverDto'
    TimesheetApproveRequestDto:
      type: object
      properties:
        comment:
          type: string
    TimesheetApproverBasicDto:
      type: object
      properties:
        order:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/IdDto'
    TimesheetApproverDto:
      type: object
      properties:
        order:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
        creationUser:
          $ref: '#/components/schemas/UserDto'
    TimesheetConfigBasicDto:
      type: object
      required:
        - consolidationBreakdown
        - consolidationPeriod
      properties:
        consolidationPeriod:
          type: string
        consolidationBreakdown:
          type: string
        communicationLanguage:
          type: string
        useAllApproversInApprovalProcess:
          type: boolean
          default: false
        approvalConfig:
          $ref: '#/components/schemas/ApprovalConfigBasicDto'
        candidateEmail:
          type: string
    TimesheetConfigDto:
      type: object
      properties:
        consolidationPeriod:
          type: string
        consolidationBreakdown:
          type: string
        communicationLanguage:
          type: string
        useAllApproversInApprovalProcess:
          type: boolean
          default: false
        approvalConfig:
          $ref: '#/components/schemas/ApprovalConfigDto'
    TimesheetRejectRequestDto:
      type: object
      properties:
        comment:
          type: string
    TimesheetSubmitRequestDto:
      type: object
      properties:
        rate:
          type: array
          items:
            $ref: '#/components/schemas/RateUnitRequestDto'
        approversList:
          type: array
          items:
            type: integer
            format: int32
        comments:
          type: string
    TimesheetWithoutCostCenterApprovalConfigBasicDto:
      type: object
      properties:
        overdueTasksThresholdDays:
          type: integer
          format: int64
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApprovalStepBasicDto'
    TimesheetWithoutCostCenterApprovalConfigDto:
      type: object
      properties:
        overdueTasksThresholdDays:
          type: integer
          format: int64
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TimesheetApprovalStepDto'
    TlkQueueDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        creator:
          $ref: '#/components/schemas/UserDto'
        creationDate:
          type: integer
          format: int64
        lastActionDate:
          type: integer
          format: int64
        owner:
          $ref: '#/components/schemas/UserDto'
        uniqueElements:
          type: boolean
          default: false
        elementsType:
          type: string
          enum:
            - CANDIDATE_ELEMENT
            - APPLICATION_ELEMENT
            - APPLICATION_SELECTION_TASK
            - OPENING_ELEMENT
            - CONTRACT_ELEMENT
            - TIMESHEET_ELEMENT
            - EXTERNAL_SYSTEM_REQUEST_ELEMENT
            - POSTING
            - ARCHIVED_OR_REMOVED_CANDIDATE
            - USER
        content:
          type: array
          items:
            $ref: '#/components/schemas/QueueAssignmentDto'
        history:
          type: array
          items:
            $ref: '#/components/schemas/QueueAssignmentHistoryDto'
        listeners:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EventServiceConfDto'
        settings:
          type: string
        actionSettings:
          type: array
          items:
            $ref: '#/components/schemas/QueueActionSettingsDto'
        queueUsers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/UserDto'
    TotalCostDto:
      type: object
      properties:
        minimum:
          type: number
        maximum:
          type: number
        currency:
          type: string
    TranslationsDto:
      type: object
      properties:
        id:
          type: string
        all:
          type: object
          additionalProperties:
            type: string
        ar:
          type: string
        bg:
          type: string
        pl:
          type: string
        pt:
          type: string
        dn:
          type: string
        nl:
          type: string
        ro:
          type: string
        sk:
          type: string
        sl:
          type: string
        ja:
          type: string
        sp:
          type: string
        is:
          type: string
        br:
          type: string
        cn:
          type: string
        cy:
          type: string
        et:
          type: string
        de:
          type: string
        fl:
          type: string
        gl:
          type: string
        hr:
          type: string
        el:
          type: string
        it:
          type: string
        ch:
          type: string
        cs:
          type: string
        fr:
          type: string
        ko:
          type: string
        lt:
          type: string
        my:
          type: string
        nw:
          type: string
        hu:
          type: string
        ru:
          type: string
        en:
          type: string
        fn:
          type: string
        lv:
          type: string
        ua:
          type: string
        tw:
          type: string
        vi:
          type: string
        sw:
          type: string
        uk:
          type: string
        wa:
          type: string
        ca:
          type: string
        tr:
          type: string
        at:
          type: string
        th:
          type: string
        sr:
          type: string
        mx:
          type: string
    UnpostAdvertDto:
      type: object
      required:
        - postingTargets
      properties:
        postingTargets:
          type: array
          items:
            type: integer
            format: int64
    UpdateApplicationScoreDto:
      type: object
      required:
        - applicationId
        - score
        - system
      properties:
        info:
          type: string
        score:
          type: number
          format: double
        system:
          type: string
        applicationId:
          type: integer
          format: int64
        populateScoreToChildApplications:
          type: boolean
          default: false
    UpdateConsentDto:
      type: object
      required:
        - consentId
        - status
      properties:
        consentId:
          type: integer
          format: int64
        status:
          description: New status
          type: string
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - GRANTED
            - REVOKED_BY_USER
            - WITHDRAWN_BY_CANDIDATE
            - EXPIRED
        comment:
          type: string
    UpdateLovEntriesDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UpdateLovEntryDto'
    UpdateLovEntriesWithDataFormatAndRequiredDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UpdateLovEntryWithDataFormatAndRequiredDto'
    UpdateLovEntriesWithDataValueDto:
      type: object
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UpdateLovEntryWithDataValueDto'
    UpdateLovEntryDto:
      type: object
      required:
        - id
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        id:
          type: integer
          format: int64
    UpdateLovEntryWithDataFormatAndRequiredDto:
      type: object
      required:
        - dataFormat
        - id
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        id:
          type: integer
          format: int64
        dataFormat:
          type: string
        required:
          type: boolean
          default: false
    UpdateLovEntryWithDataValueDto:
      type: object
      required:
        - id
        - value
      properties:
        value:
          type: string
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
        id:
          type: integer
          format: int64
        dataValue:
          type: number
    UpdateLovLabelsDto:
      type: object
      required:
        - id
        - labels
      properties:
        id:
          type: integer
          format: int64
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LovLabelDto'
    UpdateLovPropertiesDto:
      type: object
      properties:
        requisitionSections:
          type: string
          enum:
            - ADMINISTRATION
            - DESCRIPTION
            - ADVERTISEMENT
            - OFFER_CONTRACT
        required:
          type: boolean
          default: false
        updatable:
          type: boolean
          default: false
        useInPostingExtract:
          type: boolean
          default: false
        useInApplicationExtract:
          type: boolean
          default: false
        fieldType:
          type: string
          enum:
            - CORPORATE_GSA
            - CORPORATE_LOCAL
            - SPECIFIC_DEPARTMENT
        useInOpeningPermanent:
          type: boolean
          default: false
        useInOpeningContractor:
          type: boolean
          default: false
        useInPermanentContract:
          type: boolean
          default: false
        useInTemporaryContract:
          type: boolean
          default: false
        imageLibrary:
          type: boolean
          default: false
        searchable:
          type: boolean
          default: false
        filterable:
          type: boolean
          default: false
        sortOrder:
          type: string
          enum:
            - ALPHABETICAL
            - NUMERICAL
        accessibleInReports:
          type: boolean
          default: false
        departmentId:
          type: integer
          format: int64
    UserActionsDto:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/ActionDto'
        delete:
          $ref: '#/components/schemas/ActionDto'
        activate:
          $ref: '#/components/schemas/ActionDto'
        deactivate:
          $ref: '#/components/schemas/ActionDto'
        copyRolesFromAnotherProfile:
          $ref: '#/components/schemas/ActionDto'
        changePassword:
          $ref: '#/components/schemas/ActionDto'
        updateRole:
          $ref: '#/components/schemas/ActionDto'
        deleteRole:
          $ref: '#/components/schemas/ActionDto'
        updateEventNotification:
          $ref: '#/components/schemas/ActionDto'
        updateDocumentSecurity:
          $ref: '#/components/schemas/ActionDto'
        deleteDocumentSecurity:
          $ref: '#/components/schemas/ActionDto'
        updateUserData:
          $ref: '#/components/schemas/ActionDto'
        updateAssignNamedAccessRoles:
          $ref: '#/components/schemas/ActionDto'
        assignJobTemplate:
          $ref: '#/components/schemas/ActionDto'
        updateMailGateway:
          $ref: '#/components/schemas/ActionDto'
    UserDataDto:
      type: object
      properties:
        lovs:
          type: array
          items:
            $ref: '#/components/schemas/LovDto'
        fffs:
          type: array
          items:
            $ref: '#/components/schemas/FreeFormFieldDto'
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        fullName:
          type: string
        language:
          type: string
    UserFullDto:
      type: object
      properties:
        login:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        language:
          type: string
        mss:
          type: boolean
          default: false
        disabledLoginPage:
          type: boolean
          default: false
        id:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        status:
          type: string
        mustChangePassword:
          type: boolean
          default: false
        roleAssignments:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignmentDto'
        mailGatewayConfiguration:
          $ref: '#/components/schemas/MailGatewayConfigurationDto'
        eventNotificationConfiguration:
          $ref: '#/components/schemas/EventNotificationConfigurationDto'
        userPreferences:
          $ref: '#/components/schemas/UserPreferencesDto'
        userData:
          $ref: '#/components/schemas/UserDataDto'
        roleInRequisition:
          $ref: '#/components/schemas/RoleDto'
        roleToReceiveCandidate:
          $ref: '#/components/schemas/RoleDto'
        documentSecurity:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSecurityDto'
        emailContact:
          type: boolean
          default: false
        actions:
          $ref: '#/components/schemas/UserActionsDto'
        personalJobTemplates:
          type: array
          items:
            $ref: '#/components/schemas/PersonalJobTemplateFullDto'
        publicKeyConfigured:
          type: boolean
          default: false
    UserGlobalActionsDto:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/ActionDto'
    UserGraphQlContent:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserFullDto'
        actions:
          $ref: '#/components/schemas/UserGlobalActionsDto'
    UserGraphQlWrapperDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserGraphQlContent'
    UserGroupDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        lovName:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupMemberDto'
        activeDepartments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentDto'
        type:
          type: string
          enum:
            - GENERIC
            - PANEL_ACTUAL
            - PANEL_DEFAULT
            - RECRUITING_TEAM
            - OPERATIONAL_TEAM
            - ADDITIONAL_INTERVIEWERS
        auditData:
          $ref: '#/components/schemas/AuditDataEmbeddableDto'
    UserGroupMemberDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        group:
          $ref: '#/components/schemas/UserGroupDto'
        lovValue:
          type: string
        order:
          type: integer
          format: int32
    UserPasswordDto:
      type: object
      required:
        - password
      properties:
        password:
          type: string
    UserPreferencesDto:
      type: object
      required:
        - meetingConfirmationFormat
        - preferredCommunicationChannel
      properties:
        dateFormat:
          type: string
        timeFormat:
          type: string
          enum:
            - H12
            - H24
        timeZone:
          type: string
        currency:
          type: string
        firstDayOfWeek:
          type: string
          enum:
            - SUNDAY
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
        emailSignature:
          $ref: '#/components/schemas/MailDto'
        letterSignature:
          $ref: '#/components/schemas/MailDto'
        displayTimeAlerts:
          type: boolean
          default: false
        meetingLocation:
          $ref: '#/components/schemas/MeetingLocationDto'
        interviewAvailability:
          type: string
        meetingDuration:
          type: string
          enum:
            - HALF_HOUR
            - HOUR
            - HOUR_AND_HALF
            - TWO_HOURS
            - TWO_HOURS_AND_HALF
            - THREE_HOURS
        meetingPauseDuration:
          type: string
          enum:
            - QUARTER
            - HALF_HOUR
            - THREE_QUARTERS
            - HOUR
        meetingReminderBefore:
          type: string
          enum:
            - QUARTER
            - HALF_HOUR
            - THREE_QUARTERS
            - HOUR
        meetingReminder:
          type: boolean
          default: false
        meetingConfirmationFormat:
          type: string
          enum:
            - EMAIL
            - VCAL
        useDefaultTheme:
          type: boolean
          default: false
        theme:
          $ref: '#/components/schemas/ThemeDto'
        recruitmentRole:
          type: string
        otherRecruitmentRole:
          type: string
        cellphone:
          type: string
        unitOfLength:
          type: string
          enum:
            - KILOMETERS
            - MILES
        preferredCommunicationChannel:
          type: string
          enum:
            - EMAIL
            - COMMUNICATION_CENTER
        language:
          type: string
        publicKey:
          type: string
    UserThemeDto:
      type: object
      required:
        - departments
        - themeDto
      properties:
        themeDto:
          $ref: '#/components/schemas/ThemeDto'
        departments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentIdNameDto'
    UserThemesDto:
      type: object
      required:
        - userThemes
      properties:
        userThemes:
          type: array
          items:
            $ref: '#/components/schemas/UserThemeDto'
    VisaDetailsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        issueDate:
          type: integer
          format: int64
        validFrom:
          type: integer
          format: int64
        expirationDate:
          type: integer
          format: int64
        visaType:
          type: string
        passNum:
          type: string
        placeOfIssue:
          type: string
        numOfEntries:
          type: string
        refNum:
          type: string
        notes:
          type: string
        country:
          type: string
        employee:
          $ref: '#/components/schemas/EmployeeDto'
        employeeFullName:
          type: string
        internalMessage:
          $ref: '#/components/schemas/InternalMessageFullDto'
    WorkTimeDto:
      type: object
      properties:
        workPeriod:
          type: string
          enum:
            - Day
            - Week
            - Month
            - Quarter
            - Year
        workUnit:
          type: string
          enum:
            - Hours
            - Days
            - Weeks
            - Months
            - Quarters
        timeCount:
          type: number
          format: float
    WorkflowStepDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    WorkflowStepInstanceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        step:
          $ref: '#/components/schemas/WorkflowStepDto'
        creationDate:
          type: integer
          format: int64
        modificationDate:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - STARTED
            - COMPLETE
            - CANCELLED
        processInstance:
          $ref: '#/components/schemas/ProcessInstanceDto'
        suspendedInAllContexts:
          type: boolean
          default: false
    AdvertisementsApiGenerateTokenResponse:
      type: string
    LovApiConfigurableLovCreateConfigurableFieldWithEntriesResponse:
      type: string
    LovApiConfigurableLovUpdateFieldResponse:
      type: string
    LovApiConfigurableLovDeactivateConfigFieldResponse:
      type: string
    LovApiConfigurableLovDeleteEntryResponse:
      type: string
    LovApiConfigurableLovUpdatePropertiesResponse:
      type: string
    LovApiConfigurableLovUpdateEntriesResponse:
      type: string
    LovApiConfigurableLovCreateEntryResponse:
      type: string
    LovApiFreeFormFieldLovCreateNewLovWithEntriesResponse:
      type: string
    LovApiFreeFormFieldLovUpdateEntryResponse:
      type: string
    LovApiFreeFormFieldLovDeactivateFieldResponse:
      type: string
    LovApiFreeFormFieldLovDeleteEntryResponse:
      type: string
    LovApiFreeFormFieldLovUpdatePropertiesResponse:
      type: string
    LovApiFreeFormFieldLovUpdateEntriesResponse:
      type: string
    LovApiFreeFormFieldLovCreateNewEntryResponse:
      type: string
    LovApiStandardFieldsCreateNewEntryResponse:
      type: string
    LovApiUserDataCreateNewFieldResponse:
      type: string
    LovApiUserDataDeleteEntireFieldResponse:
      type: string
    LovApiUserDataUpdateUserDataLovResponse:
      type: string
    LovApiUserDataDeleteEntryResponse:
      type: string
    LovApiUserDataUpdateUserEntriesResponse:
      type: string
    LovApiUserDataCreateNewEntryResponse:
      type: string
